[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/base.js",
    "content": "/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"_config\", \"_tokenId\", \"_secret\"] }] */\n\nconst axios = require('axios');\nconst EventEmitter = require('events');\nconst pkg = require('../package.json');\n\n/**\n * Mux Base Class - Simple base class to be extended by all child modules.\n *\n * @ignore\n * @property {string} tokenId - The ID for the access token.\n * @property {string} tokenSecret - The secret for the access token.\n * @property {object} config - The configuration for the Base object.\n * @property {Object} requestOptions - The HTTP request options for Mux Assets\n * @property {string} requestOptions.auth.username - HTTP basic auth username (access token)\n * @property {string} requestOptions.auth.password - HTTP basic auth password (secret)\n *\n */\nclass Base extends EventEmitter {\n  constructor(...params) {\n    super();\n\n    if (params[0] instanceof Base) {\n      return Object.assign(this, params[0]);\n    }\n\n    if (typeof params[0] === 'object') {\n      this.config = params[0]; // eslint-disable-line prefer-destructuring\n      this.tokenId = undefined;\n      this.tokenSecret = undefined;\n    } else {\n      this.tokenId = params[0]; // eslint-disable-line prefer-destructuring\n      this.tokenSecret = params[1]; // eslint-disable-line prefer-destructuring\n      this.config = params[2]; // eslint-disable-line prefer-destructuring\n    }\n\n    this.http = axios.create({\n      baseURL: this.config.baseUrl,\n      headers: {\n        'User-Agent': `Mux Node | ${pkg.version}`,\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      mode: 'cors',\n      withCredentials: false,\n      auth: {\n        username: this.tokenId,\n        password: this.tokenSecret,\n      },\n    });\n\n    this.http.interceptors.request.use(req => {\n      this.emit('request', req);\n\n      return req;\n    });\n\n    this.http.interceptors.response.use(\n      res => {\n        this.emit('response', res);\n        if (this.isVideoUrl(res.config.url)) {\n          return res.data && res.data.data;\n        }\n\n        return res.data;\n      },\n      errorRes =>\n        Promise.reject(\n          (errorRes.response && errorRes.response.data.error) || errorRes\n        )\n    );\n  }\n\n  isVideoUrl(url) {\n    return url.startsWith(`${this.config.baseUrl}/video/v1/`);\n  }\n\n  set config(options = {}) {\n    this._config = {\n      baseUrl: 'https://api.mux.com',\n      ...options,\n    };\n  }\n\n  get config() {\n    return this._config;\n  }\n\n  set tokenId(token = process.env.MUX_TOKEN_ID) {\n    this._tokenId = token;\n\n    if (typeof this._tokenId === 'undefined') {\n      throw new Error('API Access Token must be provided.');\n    }\n  }\n\n  get tokenId() {\n    return this._tokenId;\n  }\n\n  set tokenSecret(secret = process.env.MUX_TOKEN_SECRET) {\n    this._secret = secret;\n\n    if (typeof this._secret === 'undefined' || this._secret === '') {\n      throw new Error('API secret key must be provided');\n    }\n  }\n\n  get tokenSecret() {\n    return this._secret;\n  }\n}\n\nmodule.exports = Base;\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/src/base.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Base",
    "memberof": "src/base.js",
    "static": true,
    "longname": "src/base.js~Base",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/base.js",
    "importStyle": "Base",
    "description": "Mux Base Class - Simple base class to be extended by all child modules.",
    "lineNumber": 19,
    "ignore": true,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "tokenId",
        "description": "The ID for the access token."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "tokenSecret",
        "description": "The secret for the access token."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The configuration for the Base object."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "requestOptions",
        "description": "The HTTP request options for Mux Assets"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "requestOptions.auth.username",
        "description": "HTTP basic auth username (access token)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "requestOptions.auth.password",
        "description": "HTTP basic auth password (secret)"
      }
    ],
    "interface": false,
    "extends": [
      "events~EventEmitter"
    ]
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/base.js~Base",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~Base#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "http",
    "memberof": "src/base.js~Base",
    "static": false,
    "longname": "src/base.js~Base#http",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "isVideoUrl",
    "memberof": "src/base.js~Base",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~Base#isVideoUrl",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "set",
    "name": "config",
    "memberof": "src/base.js~Base",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~Base#config",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "_config",
    "memberof": "src/base.js~Base",
    "static": false,
    "longname": "src/base.js~Base#_config",
    "access": "private",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "{\"baseUrl\": string, ...options: Object}"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "get",
    "name": "config",
    "memberof": "src/base.js~Base",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~Base#config",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "set",
    "name": "tokenId",
    "memberof": "src/base.js~Base",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~Base#tokenId",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "_tokenId",
    "memberof": "src/base.js~Base",
    "static": false,
    "longname": "src/base.js~Base#_tokenId",
    "access": "private",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "get",
    "name": "tokenId",
    "memberof": "src/base.js~Base",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~Base#tokenId",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "set",
    "name": "tokenSecret",
    "memberof": "src/base.js~Base",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~Base#tokenSecret",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "_secret",
    "memberof": "src/base.js~Base",
    "static": false,
    "longname": "src/base.js~Base#_secret",
    "access": "private",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "get",
    "name": "tokenSecret",
    "memberof": "src/base.js~Base",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/base.js~Base#tokenSecret",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "file",
    "name": "src/data/data.js",
    "content": "/*!\n * Mux Data\n * Copyright(c) 2018 Mux Inc.\n */\n\nconst Base = require('../base');\nconst Errors = require('../../src/data/resources/errors');\nconst Exports = require('../../src/data/resources/exports');\nconst Filters = require('../../src/data/resources/filters');\nconst Incidents = require('../../src/data/resources/incidents');\nconst Metrics = require('../../src/data/resources/metrics');\nconst RealTime = require('../../src/data/resources/real_time');\nconst VideoViews = require('../../src/data/resources/video_views');\n\n/**\n * @ignore\n * @extends Base\n * Data Class - Provides access to the Mux Data API\n *\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n */\nclass Data extends Base {\n  /**\n   * Data Constructor\n   *\n   * @param {string} accessToken - Mux API Access Token\n   * @param {string} secret - Mux API secret\n   * @constructor\n   */\n  constructor(...params) {\n    super(...params);\n\n    /** @type {Errors} */\n    this.Errors = new Errors(this);\n\n    /** @type {Exports} */\n    this.Exports = new Exports(this);\n\n    /** @type {Filters} */\n    this.Filters = new Filters(this);\n\n    /** @type {Incidents} */\n    this.Incidents = new Incidents(this);\n\n    /** @type {Metrics} */\n    this.Metrics = new Metrics(this);\n\n    /** @type {RealTime} */\n    this.RealTime = new RealTime(this);\n\n    /** @type {VideoViews} */\n    this.VideoViews = new VideoViews(this);\n  }\n}\n\nmodule.exports = Data;\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/src/data/data.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 69,
    "kind": "class",
    "name": "Data",
    "memberof": "src/data/data.js",
    "static": true,
    "longname": "src/data/data.js~Data",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/data/data.js",
    "importStyle": "Data",
    "description": "",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;"
    ],
    "lineNumber": 25,
    "ignore": true,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 70,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/data/data.js~Data",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/data.js~Data#constructor",
    "access": "public",
    "description": "Data Constructor",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accessToken",
        "description": "Mux API Access Token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "secret",
        "description": "Mux API secret"
      }
    ]
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "Errors",
    "memberof": "src/data/data.js~Data",
    "static": false,
    "longname": "src/data/data.js~Data#Errors",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "Errors"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "Exports",
    "memberof": "src/data/data.js~Data",
    "static": false,
    "longname": "src/data/data.js~Data#Exports",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Exports"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "Filters",
    "memberof": "src/data/data.js~Data",
    "static": false,
    "longname": "src/data/data.js~Data#Filters",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Filters"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "Incidents",
    "memberof": "src/data/data.js~Data",
    "static": false,
    "longname": "src/data/data.js~Data#Incidents",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "Incidents"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "Metrics",
    "memberof": "src/data/data.js~Data",
    "static": false,
    "longname": "src/data/data.js~Data#Metrics",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "Metrics"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "RealTime",
    "memberof": "src/data/data.js~Data",
    "static": false,
    "longname": "src/data/data.js~Data#RealTime",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "RealTime"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "VideoViews",
    "memberof": "src/data/data.js~Data",
    "static": false,
    "longname": "src/data/data.js~Data#VideoViews",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "VideoViews"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "src/data/resources/errors.js",
    "content": "/*!\n * Mux Errors\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base errors path for the Mux API\n * */\nconst PATH = '/data/v1/errors';\n\n/**\n * Errors Class - Provides access to the Mux Data Errors API\n * @extends Base\n * @example\n * const { Data } = new Mux(accessToken, secret);\n *\n * // Returns a list of playback errors filtered by the windows operating system\n * Data.Errors.list({ filters: ['operating_system:windows'] });\n */\nclass Errors extends Base {\n  /**\n   * Returns a list of playback errors\n   *\n   * @param {Object} [params] - example { timeframe: ['7:days'], filters: ['operating_system:windows'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Data } = new Mux(accessToken, secret);\n   *\n   * // Returns a list of playback errors filtered by the windows operating system\n   * Data.Errors.list({ filters: ['operating_system:windows'] });\n   *\n   * @see https://api-docs.mux.com/#view-error-get\n   */\n  list(params) {\n    return this.http.get(PATH, { params });\n  }\n}\n\nmodule.exports = Errors;\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/src/data/resources/errors.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "PATH",
    "memberof": "src/data/resources/errors.js",
    "static": true,
    "longname": "src/data/resources/errors.js~PATH",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/data/resources/errors.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 80,
    "kind": "class",
    "name": "Errors",
    "memberof": "src/data/resources/errors.js",
    "static": true,
    "longname": "src/data/resources/errors.js~Errors",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/data/resources/errors.js",
    "importStyle": "Errors",
    "description": "Errors Class - Provides access to the Mux Data Errors API",
    "examples": [
      "const { Data } = new Mux(accessToken, secret);\n\n// Returns a list of playback errors filtered by the windows operating system\nData.Errors.list({ filters: ['operating_system:windows'] });"
    ],
    "lineNumber": 21,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "list",
    "memberof": "src/data/resources/errors.js~Errors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/errors.js~Errors#list",
    "access": "public",
    "description": "Returns a list of playback errors",
    "examples": [
      "const { Data } = new Mux(accessToken, secret);\n\n// Returns a list of playback errors filtered by the windows operating system\nData.Errors.list({ filters: ['operating_system:windows'] });"
    ],
    "see": [
      "https://api-docs.mux.com/#view-error-get"
    ],
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "params",
        "description": "example { timeframe: ['7:days'], filters: ['operating_system:windows'] }"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "src/data/resources/exports.js",
    "content": "/*!\n * Mux Exports\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base exports path for the Mux API\n * */\nconst PATH = '/data/v1/exports';\n\n/**\n * Exports Class - Provides access to the Mux Data Exports API\n *\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // Lists the available video view exports along with URLs to retrieve them\n * Data.Exports.list();\n */\nclass Exports extends Base {\n  /**\n   * Lists the available video view exports along with URLs to retrieve them\n   * @extends Base\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Lists the available video view exports along with URLs to retrieve them\n   * Data.Exports.list();\n   *\n   * @see https://api-docs.mux.com/#export-get\n   */\n  list() {\n    return this.http.get(PATH);\n  }\n}\n\nmodule.exports = Exports;\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/src/data/resources/exports.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "name": "PATH",
    "memberof": "src/data/resources/exports.js",
    "static": true,
    "longname": "src/data/resources/exports.js~PATH",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/data/resources/exports.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "class",
    "name": "Exports",
    "memberof": "src/data/resources/exports.js",
    "static": true,
    "longname": "src/data/resources/exports.js~Exports",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/data/resources/exports.js",
    "importStyle": "Exports",
    "description": "Exports Class - Provides access to the Mux Data Exports API",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// Lists the available video view exports along with URLs to retrieve them\nData.Exports.list();"
    ],
    "lineNumber": 22,
    "interface": false,
    "extends": [
      "src/base.js~Base"
    ]
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "list",
    "memberof": "src/data/resources/exports.js~Exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/exports.js~Exports#list",
    "access": "public",
    "description": "Lists the available video view exports along with URLs to retrieve them",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// Lists the available video view exports along with URLs to retrieve them\nData.Exports.list();"
    ],
    "see": [
      "https://api-docs.mux.com/#export-get"
    ],
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@extends",
        "tagValue": "Base"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    },
    "params": []
  },
  {
    "__docId__": 86,
    "kind": "file",
    "name": "src/data/resources/filters.js",
    "content": "/*!\n * Mux Filters\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base filters path for the Mux API\n * */\nconst PATH = '/data/v1/filters';\n\n/**\n * Filters Class - Provides access to the Mux Data Filters API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // Lists all the filters broken out into basic and advanced\n * Data.Filters.list();\n */\nclass Filters extends Base {\n  /**\n   * Lists the values for a filter along with a total count of related views\n   *\n   * @param {string} filterId - The filter name/id for see https://api-docs.mux.com/#filter-get-1 for a list of all filter ids\n   * @param {Object} [queryParams] - example { timeframe: ['7:days'], filters: ['operating_system:windows'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Lists the values for a filter along with a total count of related views\n   * Data.Filters.get('browser', { timeframe: ['7:days'] });\n   *\n   * @see https://api-docs.mux.com/#filter-get-1\n   */\n  get(filterId, params) {\n    if (!filterId) {\n      throw new Error('Filter Id is required to get filter information.');\n    }\n    return this.http.get(`${PATH}/${filterId}`, { params });\n  }\n\n  /**\n   * Lists all the filters broken out into basic and advanced\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Lists the available video view exports along with URLs to retrieve them\n   * Data.Filters.list();\n   *\n   * @see https://api-docs.mux.com/#filter-get\n   */\n  list() {\n    return this.http.get(PATH);\n  }\n}\n\nmodule.exports = Filters;\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/src/data/resources/filters.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "name": "PATH",
    "memberof": "src/data/resources/filters.js",
    "static": true,
    "longname": "src/data/resources/filters.js~PATH",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/data/resources/filters.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 88,
    "kind": "class",
    "name": "Filters",
    "memberof": "src/data/resources/filters.js",
    "static": true,
    "longname": "src/data/resources/filters.js~Filters",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/data/resources/filters.js",
    "importStyle": "Filters",
    "description": "Filters Class - Provides access to the Mux Data Filters API",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// Lists all the filters broken out into basic and advanced\nData.Filters.list();"
    ],
    "lineNumber": 23,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "get",
    "memberof": "src/data/resources/filters.js~Filters",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/filters.js~Filters#get",
    "access": "public",
    "description": "Lists the values for a filter along with a total count of related views",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// Lists the values for a filter along with a total count of related views\nData.Filters.get('browser', { timeframe: ['7:days'] });"
    ],
    "see": [
      "https://api-docs.mux.com/#filter-get-1"
    ],
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filterId",
        "description": "The filter name/id for see https://api-docs.mux.com/#filter-get-1 for a list of all filter ids"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "queryParams",
        "description": "example { timeframe: ['7:days'], filters: ['operating_system:windows'] }"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "list",
    "memberof": "src/data/resources/filters.js~Filters",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/filters.js~Filters#list",
    "access": "public",
    "description": "Lists all the filters broken out into basic and advanced",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// Lists the available video view exports along with URLs to retrieve them\nData.Filters.list();"
    ],
    "see": [
      "https://api-docs.mux.com/#filter-get"
    ],
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    },
    "params": []
  },
  {
    "__docId__": 91,
    "kind": "file",
    "name": "src/data/resources/incidents.js",
    "content": "/*!\n * Mux Incidents\n * Copyright(c) 2019 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base incidents path for the Mux API\n * */\nconst PATH = '/data/v1/incidents';\n\n/**\n * Incidents Class - Provides access to the Mux Data Incidents API\n * @extends Base\n * @example\n * const { Data } = new Mux(accessToken, secret);\n *\n * // Returns a list of all open incidents\n * Data.Incidents.list({ status: 'open' });\n */\nclass Incidents extends Base {\n  /**\n   * Returns a list of all open incidents\n   *\n   * @param {Object} [params] - example { status: 'open', severity: 'warning' }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Data } = new Mux(accessToken, secret);\n   *\n   * // Returns a list of all open incidents\n   * Data.Incidents.list({ status: 'open' });\n   *\n   * @see https://api-docs.mux.com/#incident-get\n   */\n  list(params) {\n    return this.http.get(PATH, { params });\n  }\n\n  /**\n   * Returns the details for a single incident\n   *\n   * @param {string} incidentId - The ID for the incident\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * //Returns the details for a single incident\n   * Data.Incidents.get('ABCD1234');\n   *\n   * @see https://api-docs.mux.com/#incident-get-1\n   */\n  get(incidentId) {\n    if (!incidentId) {\n      throw new Error('An incident Id is required for incident details.');\n    }\n    return this.http.get(`${PATH}/${incidentId}`);\n  }\n\n  /**\n   * Returns all the incidents that seem related to a specific incident\n   *\n   * @param {string} incidentId - The ID for the incident\n   * @param {Object} [params] - example { measurement: 'median' }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * //Returns all the incidents that seem related to a specific incident\n   * Data.Incidents.related('ABCD1234');\n   *\n   * @see https://api-docs.mux.com/#incident-get-2\n   */\n  related(incidentId, params) {\n    if (!incidentId) {\n      throw new Error('An incident Id is required for related incidents.');\n    }\n    return this.http.get(`${PATH}/${incidentId}/related`, { params });\n  }\n}\n\nmodule.exports = Incidents;\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/src/data/resources/incidents.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "PATH",
    "memberof": "src/data/resources/incidents.js",
    "static": true,
    "longname": "src/data/resources/incidents.js~PATH",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/data/resources/incidents.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 93,
    "kind": "class",
    "name": "Incidents",
    "memberof": "src/data/resources/incidents.js",
    "static": true,
    "longname": "src/data/resources/incidents.js~Incidents",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/data/resources/incidents.js",
    "importStyle": "Incidents",
    "description": "Incidents Class - Provides access to the Mux Data Incidents API",
    "examples": [
      "const { Data } = new Mux(accessToken, secret);\n\n// Returns a list of all open incidents\nData.Incidents.list({ status: 'open' });"
    ],
    "lineNumber": 21,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "list",
    "memberof": "src/data/resources/incidents.js~Incidents",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/incidents.js~Incidents#list",
    "access": "public",
    "description": "Returns a list of all open incidents",
    "examples": [
      "const { Data } = new Mux(accessToken, secret);\n\n// Returns a list of all open incidents\nData.Incidents.list({ status: 'open' });"
    ],
    "see": [
      "https://api-docs.mux.com/#incident-get"
    ],
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "params",
        "description": "example { status: 'open', severity: 'warning' }"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "get",
    "memberof": "src/data/resources/incidents.js~Incidents",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/incidents.js~Incidents#get",
    "access": "public",
    "description": "Returns the details for a single incident",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n//Returns the details for a single incident\nData.Incidents.get('ABCD1234');"
    ],
    "see": [
      "https://api-docs.mux.com/#incident-get-1"
    ],
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "incidentId",
        "description": "The ID for the incident"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "related",
    "memberof": "src/data/resources/incidents.js~Incidents",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/incidents.js~Incidents#related",
    "access": "public",
    "description": "Returns all the incidents that seem related to a specific incident",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n//Returns all the incidents that seem related to a specific incident\nData.Incidents.related('ABCD1234');"
    ],
    "see": [
      "https://api-docs.mux.com/#incident-get-2"
    ],
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "incidentId",
        "description": "The ID for the incident"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "params",
        "description": "example { measurement: 'median' }"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 97,
    "kind": "file",
    "name": "src/data/resources/metrics.js",
    "content": "/*!\n * Mux Metrics\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base metrics path for the Mux API\n * */\nconst PATH = '/data/v1/metrics';\n\n/**\n * Metrics Class - Provides access to the Mux Data Metrics API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // List all of the values across every breakdown for a specific metric grouped by operating system\n * Data.Metrics.breakdown('aggregate_startup_time', { group_by: 'operating_system' });\n */\nclass Metrics extends Base {\n  /**\n   * List the breakdown values for a specific metric\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#breakdown-get for a list of all metric ids\n   * @param {Object} params - example: {group_by: 'browser'}\n   * NOTE: the group_by query parameter is required\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List all of the values across every breakdown for a specific metric grouped by browser\n   * Data.Metrics.breakdown('aggregate_startup_time', { group_by: 'browser' });\n   *\n   * @see https://api-docs.mux.com/#breakdown-get\n   */\n  breakdown(metricId, params) {\n    return this.http.get(`${PATH}/${metricId}/breakdown`, { params });\n  }\n\n  /**\n   * List all of the values across every breakdown for a specific metric\n   *\n   * @param {Object} params - example { value: 'safari', timeframe: '24:hours', dimension: 'cdn' }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List the breakdown values for a specific metric within the last 24 hours\n   * Data.Metrics.comparison({ value: 'safari', timeframe: '24:hours', dimension: 'cdn' });\n   * Note: the value query parameter is required\n   *\n   * @see https://api-docs.mux.com/#comparison-get\n   */\n  comparison(params) {\n    if (!params || (params && !params.value)) {\n      throw new Error(\n        'The value query parameter is required for comparing metrics'\n      );\n    }\n    return this.http.get(`${PATH}/comparison`, { params });\n  }\n\n  /**\n   * Returns a list of insights for a metric. These are the worst performing values across all\n   * breakdowns sorted by how much they negatively impact a specific metric.\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#breakdown-get for a list of all metric ids\n   * @param {Object} [params] - example { measurement: 'median', order_direction: 'desc' }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Get a list of insights for a metric measured by median and ordered descending\n   * Data.Metrics.insights('aggregate_startup_time', { measurement: 'median', order_direction: 'desc' });\n   *\n   * @see https://api-docs.mux.com/#insight-get\n   */\n  insights(metricId, params) {\n    if (!metricId) {\n      throw new Error('A metric Id is required for insight metrics.');\n    }\n    return this.http.get(`${PATH}/${metricId}/insights`, { params });\n  }\n\n  /**\n   * Returns the overall value for a specific metric, as well as the total view count,\n   * watch time, and the Mux Global metric value for the metric.\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#overall-get for a list of all metric ids\n   * @param {Object} [params] - example { timeframe: ['7:days'], filters: ['operating_system:windows'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Get the overall value for a specific metric within the past 7 days\n   * Data.Metrics.overall('aggregate_startup_time', { timeframe: ['7:days'] });\n   *\n   * @see https://api-docs.mux.com/#overall-get\n   */\n  overall(metricId, params) {\n    if (!metricId) {\n      throw new Error('A metric Id is required for overall metrics.');\n    }\n    return this.http.get(`${PATH}/${metricId}/overall`, { params });\n  }\n\n  /**\n   * Returns timeseries data for a specific metric\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#timeseries for a list of all metric ids\n   * @param {Object} [params] - example { timeframe: ['7:days'], filters: ['operating_system:windows'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Get timeseries data for a specific metric within the past 7 days\n   * Data.Metrics.timeseries('aggregate_startup_time', { timeframe: ['7:days'] });\n   *\n   * @see https://api-docs.mux.com/#timeseries\n   */\n  timeseries(metricId, params) {\n    if (!metricId) {\n      throw new Error('A metric Id is required for timeseries metrics.');\n    }\n    return this.http.get(`${PATH}/${metricId}/timeseries`, { params });\n  }\n}\n\nmodule.exports = Metrics;\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/src/data/resources/metrics.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "name": "PATH",
    "memberof": "src/data/resources/metrics.js",
    "static": true,
    "longname": "src/data/resources/metrics.js~PATH",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/data/resources/metrics.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "class",
    "name": "Metrics",
    "memberof": "src/data/resources/metrics.js",
    "static": true,
    "longname": "src/data/resources/metrics.js~Metrics",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/data/resources/metrics.js",
    "importStyle": "Metrics",
    "description": "Metrics Class - Provides access to the Mux Data Metrics API",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// List all of the values across every breakdown for a specific metric grouped by operating system\nData.Metrics.breakdown('aggregate_startup_time', { group_by: 'operating_system' });"
    ],
    "lineNumber": 23,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "breakdown",
    "memberof": "src/data/resources/metrics.js~Metrics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/metrics.js~Metrics#breakdown",
    "access": "public",
    "description": "List the breakdown values for a specific metric",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// List all of the values across every breakdown for a specific metric grouped by browser\nData.Metrics.breakdown('aggregate_startup_time', { group_by: 'browser' });"
    ],
    "see": [
      "https://api-docs.mux.com/#breakdown-get"
    ],
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "metricId",
        "description": "The metric name/id for see https://api-docs.mux.com/#breakdown-get for a list of all metric ids"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "example: {group_by: 'browser'}\nNOTE: the group_by query parameter is required"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "comparison",
    "memberof": "src/data/resources/metrics.js~Metrics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/metrics.js~Metrics#comparison",
    "access": "public",
    "description": "List all of the values across every breakdown for a specific metric",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// List the breakdown values for a specific metric within the last 24 hours\nData.Metrics.comparison({ value: 'safari', timeframe: '24:hours', dimension: 'cdn' });\nNote: the value query parameter is required"
    ],
    "see": [
      "https://api-docs.mux.com/#comparison-get"
    ],
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "example { value: 'safari', timeframe: '24:hours', dimension: 'cdn' }"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "insights",
    "memberof": "src/data/resources/metrics.js~Metrics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/metrics.js~Metrics#insights",
    "access": "public",
    "description": "Returns a list of insights for a metric. These are the worst performing values across all\nbreakdowns sorted by how much they negatively impact a specific metric.",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// Get a list of insights for a metric measured by median and ordered descending\nData.Metrics.insights('aggregate_startup_time', { measurement: 'median', order_direction: 'desc' });"
    ],
    "see": [
      "https://api-docs.mux.com/#insight-get"
    ],
    "lineNumber": 87,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "metricId",
        "description": "The metric name/id for see https://api-docs.mux.com/#breakdown-get for a list of all metric ids"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "params",
        "description": "example { measurement: 'median', order_direction: 'desc' }"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "overall",
    "memberof": "src/data/resources/metrics.js~Metrics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/metrics.js~Metrics#overall",
    "access": "public",
    "description": "Returns the overall value for a specific metric, as well as the total view count,\nwatch time, and the Mux Global metric value for the metric.",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// Get the overall value for a specific metric within the past 7 days\nData.Metrics.overall('aggregate_startup_time', { timeframe: ['7:days'] });"
    ],
    "see": [
      "https://api-docs.mux.com/#overall-get"
    ],
    "lineNumber": 111,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "metricId",
        "description": "The metric name/id for see https://api-docs.mux.com/#overall-get for a list of all metric ids"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "params",
        "description": "example { timeframe: ['7:days'], filters: ['operating_system:windows'] }"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "timeseries",
    "memberof": "src/data/resources/metrics.js~Metrics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/metrics.js~Metrics#timeseries",
    "access": "public",
    "description": "Returns timeseries data for a specific metric",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// Get timeseries data for a specific metric within the past 7 days\nData.Metrics.timeseries('aggregate_startup_time', { timeframe: ['7:days'] });"
    ],
    "see": [
      "https://api-docs.mux.com/#timeseries"
    ],
    "lineNumber": 134,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "metricId",
        "description": "The metric name/id for see https://api-docs.mux.com/#timeseries for a list of all metric ids"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "params",
        "description": "example { timeframe: ['7:days'], filters: ['operating_system:windows'] }"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 105,
    "kind": "file",
    "name": "src/data/resources/real_time.js",
    "content": "/*!\n * Mux Real-Time\n * Copyright(c) 2020 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base real-time path for the Mux API\n * */\nconst PATH = '/data/v1/realtime';\n\n/**\n * Real-Time Class - Provides access to the Mux Data Real-Time API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // Returns a list of available real-time dimensions\n * Data.RealTime.dimensions();\n */\nclass RealTime extends Base {\n  /**\n   * List of available real-time dimensions\n   *\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Returns a list of available real-time dimensions\n   * Data.RealTime.dimensions();\n   *\n   * @see https://api-docs.mux.com/#real-time-get\n   */\n  dimensions() {\n    return this.http.get(`${PATH}/dimensions`);\n  }\n\n  /**\n   * List available real-time metrics\n   *\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Returns a list of available real-time metrics\n   * Data.RealTime.metrics();\n   *\n   * @see https://api-docs.mux.com/#real-time-get-1\n   */\n  metrics() {\n    return this.http.get(`${PATH}/metrics`);\n  }\n\n  /**\n   * Get breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score.\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#real-time-get-1 for a list of all metric ids\n   * @param {Object} params - example { dimension: 'asn', timestamp: 1547853000, filters: ['operating_system:windows', 'country:US'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List the breakdown information for current-concurrent-viewers by ASN for a specific time for the Windows operating system in the US\n   * Data.RealTime.breakdown('current-concurrent-viewers', { dimension: 'asn', timestamp: 1547853000, filters: ['operating_system:windows', 'country:US'] });\n   *\n   * @see https://api-docs.mux.com/#real-time-get-2\n   */\n  breakdown(metricId, params) {\n    if (!metricId) {\n      throw new Error(\n        'A metric Id is required for real-time breakdown information'\n      );\n    }\n\n    if (!params || (params && !params.dimension)) {\n      throw new Error(\n        'The dimension query parameter is required for real-time breakdown information'\n      );\n    }\n    return this.http.get(`${PATH}/metrics/${metricId}/breakdown`, { params });\n  }\n\n  /**\n   * List histogram timeseries information for a specific metric\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#real-time-get-1 for a list of all metric ids\n   * @param {Object} params - example { filters: ['operating_system:windows', 'country:US'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List histogram timeseries information for video-startup-time for the Windows operating system in the US\n   * Data.RealTime.histogramTimeseries('video-startup-time', { filters: ['operating_system:windows', 'country:US'] });\n   *\n   * @see https://api-docs.mux.com/#real-time-get-3\n   */\n  histogramTimeseries(metricId, params) {\n    if (!metricId) {\n      throw new Error(\n        'A metric Id is required for real-time histogram timeseries information'\n      );\n    }\n    return this.http.get(`${PATH}/metrics/${metricId}/histogram-timeseries`, {\n      params,\n    });\n  }\n\n  /**\n   * List timeseries information for a specific metric along with the number of concurrent viewers.\n   *\n   * @param {string} metricId - The metric name/id for see https://api-docs.mux.com/#real-time-get-1 for a list of all metric ids\n   * @param {Object} params - example { filters: ['operating_system:windows', 'country:US'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // List timeseries information for the playback-failure-percentage metric along with the number of concurrent viewers for the Windows operating system in the US\n   * Data.RealTime.timeseries('playback-failure-percentage', { filters: ['operating_system:windows', 'country:US'] });\n   *\n   * @see https://api-docs.mux.com/#real-time-get-3\n   */\n  timeseries(metricId, params) {\n    if (!metricId) {\n      throw new Error(\n        'A metric Id is required for real-time timeseries information.'\n      );\n    }\n    return this.http.get(`${PATH}/metrics/${metricId}/timeseries`, {\n      params,\n    });\n  }\n}\nmodule.exports = RealTime;\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/src/data/resources/real_time.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "PATH",
    "memberof": "src/data/resources/real_time.js",
    "static": true,
    "longname": "src/data/resources/real_time.js~PATH",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/data/resources/real_time.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 107,
    "kind": "class",
    "name": "RealTime",
    "memberof": "src/data/resources/real_time.js",
    "static": true,
    "longname": "src/data/resources/real_time.js~RealTime",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/data/resources/real_time.js",
    "importStyle": "RealTime",
    "description": "Real-Time Class - Provides access to the Mux Data Real-Time API",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// Returns a list of available real-time dimensions\nData.RealTime.dimensions();"
    ],
    "lineNumber": 23,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "dimensions",
    "memberof": "src/data/resources/real_time.js~RealTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/real_time.js~RealTime#dimensions",
    "access": "public",
    "description": "List of available real-time dimensions",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// Returns a list of available real-time dimensions\nData.RealTime.dimensions();"
    ],
    "see": [
      "https://api-docs.mux.com/#real-time-get"
    ],
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    },
    "params": []
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "metrics",
    "memberof": "src/data/resources/real_time.js~RealTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/real_time.js~RealTime#metrics",
    "access": "public",
    "description": "List available real-time metrics",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// Returns a list of available real-time metrics\nData.RealTime.metrics();"
    ],
    "see": [
      "https://api-docs.mux.com/#real-time-get-1"
    ],
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    },
    "params": []
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "breakdown",
    "memberof": "src/data/resources/real_time.js~RealTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/real_time.js~RealTime#breakdown",
    "access": "public",
    "description": "Get breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score.",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// List the breakdown information for current-concurrent-viewers by ASN for a specific time for the Windows operating system in the US\nData.RealTime.breakdown('current-concurrent-viewers', { dimension: 'asn', timestamp: 1547853000, filters: ['operating_system:windows', 'country:US'] });"
    ],
    "see": [
      "https://api-docs.mux.com/#real-time-get-2"
    ],
    "lineNumber": 76,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "metricId",
        "description": "The metric name/id for see https://api-docs.mux.com/#real-time-get-1 for a list of all metric ids"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "example { dimension: 'asn', timestamp: 1547853000, filters: ['operating_system:windows', 'country:US'] }"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "histogramTimeseries",
    "memberof": "src/data/resources/real_time.js~RealTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/real_time.js~RealTime#histogramTimeseries",
    "access": "public",
    "description": "List histogram timeseries information for a specific metric",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// List histogram timeseries information for video-startup-time for the Windows operating system in the US\nData.RealTime.histogramTimeseries('video-startup-time', { filters: ['operating_system:windows', 'country:US'] });"
    ],
    "see": [
      "https://api-docs.mux.com/#real-time-get-3"
    ],
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "metricId",
        "description": "The metric name/id for see https://api-docs.mux.com/#real-time-get-1 for a list of all metric ids"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "example { filters: ['operating_system:windows', 'country:US'] }"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "timeseries",
    "memberof": "src/data/resources/real_time.js~RealTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/real_time.js~RealTime#timeseries",
    "access": "public",
    "description": "List timeseries information for a specific metric along with the number of concurrent viewers.",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// List timeseries information for the playback-failure-percentage metric along with the number of concurrent viewers for the Windows operating system in the US\nData.RealTime.timeseries('playback-failure-percentage', { filters: ['operating_system:windows', 'country:US'] });"
    ],
    "see": [
      "https://api-docs.mux.com/#real-time-get-3"
    ],
    "lineNumber": 134,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "metricId",
        "description": "The metric name/id for see https://api-docs.mux.com/#real-time-get-1 for a list of all metric ids"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "example { filters: ['operating_system:windows', 'country:US'] }"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 113,
    "kind": "file",
    "name": "src/data/resources/video_views.js",
    "content": "/*!\n * Mux Video Views\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base exports path for the Mux API\n * */\nconst PATH = '/data/v1/video-views';\n\n/**\n * VideoViews Class - Provides access to the Mux Data Video Views API\n *\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Data } = muxClient;\n *\n * // Returns a list of video views for a property that occurred within the specified timeframe.\n * // Results are ordered by view_end, according to what you provide for order_direction.\n * Data.VideoViews.list({order_direction: 'asc'});\n */\nclass VideoViews extends Base {\n  /**\n   * Returns a list of video views for a property that occurred within the specified timeframe.\n   * Results are ordered by view_end, according to what you provide for order_direction.\n   *\n   * @extends Base\n   * @param {Object} queryParams - example { viewer_id: 'ABCD1234', timeframe: ['7:days'], filters: ['operating_system:windows'] }\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * // Returns a list of video views for a property that occurred within the specified timeframe.\n   * Data.VideoViews.list({ viewer_id: 'ABCD1234', timeframe: ['7:days'], order_direction: 'asc' });\n   *\n   * @see https://api-docs.mux.com/#video-view-get-1\n   */\n  list(params) {\n    return this.http.get(PATH, { params });\n  }\n\n  /**\n   * Returns the details for a single video view\n   *\n   * @param {string} videoViewId - The ID for the video view\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Data } = muxClient;\n   *\n   * //Returns the details for a single video view\n   * Data.VideoViews.get('ABCD1234');\n   *\n   * @see https://api-docs.mux.com/#video-view-get-1\n   */\n  get(videoViewId) {\n    if (!videoViewId) {\n      throw new Error('A video view Id is required for video view details.');\n    }\n    return this.http.get(`${PATH}/${videoViewId}`);\n  }\n}\n\nmodule.exports = VideoViews;\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/src/data/resources/video_views.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 114,
    "kind": "variable",
    "name": "PATH",
    "memberof": "src/data/resources/video_views.js",
    "static": true,
    "longname": "src/data/resources/video_views.js~PATH",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/data/resources/video_views.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 115,
    "kind": "class",
    "name": "VideoViews",
    "memberof": "src/data/resources/video_views.js",
    "static": true,
    "longname": "src/data/resources/video_views.js~VideoViews",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/data/resources/video_views.js",
    "importStyle": "VideoViews",
    "description": "VideoViews Class - Provides access to the Mux Data Video Views API",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// Returns a list of video views for a property that occurred within the specified timeframe.\n// Results are ordered by view_end, according to what you provide for order_direction.\nData.VideoViews.list({order_direction: 'asc'});"
    ],
    "lineNumber": 23,
    "interface": false,
    "extends": [
      "src/base.js~Base"
    ]
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "list",
    "memberof": "src/data/resources/video_views.js~VideoViews",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/video_views.js~VideoViews#list",
    "access": "public",
    "description": "Returns a list of video views for a property that occurred within the specified timeframe.\nResults are ordered by view_end, according to what you provide for order_direction.",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n// Returns a list of video views for a property that occurred within the specified timeframe.\nData.VideoViews.list({ viewer_id: 'ABCD1234', timeframe: ['7:days'], order_direction: 'asc' });"
    ],
    "see": [
      "https://api-docs.mux.com/#video-view-get-1"
    ],
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@extends",
        "tagValue": "Base"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "queryParams",
        "description": "example { viewer_id: 'ABCD1234', timeframe: ['7:days'], filters: ['operating_system:windows'] }"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "get",
    "memberof": "src/data/resources/video_views.js~VideoViews",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/resources/video_views.js~VideoViews#get",
    "access": "public",
    "description": "Returns the details for a single video view",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Data } = muxClient;\n\n//Returns the details for a single video view\nData.VideoViews.get('ABCD1234');"
    ],
    "see": [
      "https://api-docs.mux.com/#video-view-get-1"
    ],
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "videoViewId",
        "description": "The ID for the video view"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "src/mux.js",
    "content": "/*!\n * Mux\n * Copyright(c) 2018 Mux Inc.\n */\n\nconst Base = require('./base');\nconst Video = require('./video/video');\nconst Data = require('./data/data');\nconst Webhooks = require('./webhooks/webhooks');\nconst JWT = require('./utils/jwt');\n\n/**\n * Mux Class - Provides access to the Mux Video and Mux Data API\n *\n * @extends Base\n * @type {Video}\n * @property {Video} Mux.Video provides access to the Mux Video API\n * @type {Data}\n * @property {Data} Mux.Data provides access to the Mux Data API\n * @type {Webhooks}\n * @property {Webhooks} Mux.Webhooks provides access to verifying Webhooks signatures\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Video, Data, Webhooks } = muxClient;\n *\n * // Create an asset\n * // returns a Promise\n * Video.Assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'})\n *   .then((data) => {\n *     assetId = data.id;\n *   });\n *\n * // Create a playback Id for an asset\n * // returns a Promise\n * Video.Assets.createPlaybackId(assetId, { policy: 'public' });\n *\n * // List all of the values across every breakdown for the `aggregate_startup_time` metric\n * // returns a Promise\n * Data.Metrics.breakdown('aggregate_startup_time', { group_by: 'browser' });\n\n * // Verify a webhook signature\n * Webhooks.verifyHeader(body, signature, secret);\n */\nclass Mux extends Base {\n  /**\n   * Mux Constructor\n   *\n   * @param {string=process.env.MUX_TOKEN_ID} accessToken - Mux API Access Token\n   * @param {string=process.env.MUX_TOKEN_SECRET} secret - Mux API secret\n   * @param {object} options - Optional configuration object\n   * @param {string='https://api.mux.com'} options.baseUrl - Change the base URL for API requests.\n   * @constructor\n   */\n  constructor(accessTokenOrConfig, secret, config) {\n    super(accessTokenOrConfig, secret, config);\n\n    /** @type {Video} */\n    this.Video = new Video(this);\n\n    /** @type {Data} */\n    this.Data = new Data(this);\n  }\n}\n\n/**\n * @ {JWT}\n */\nMux.JWT = JWT;\n\nMux.Webhooks = Webhooks;\n\nMux.default = Mux;\n\nmodule.exports = Mux;\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/src/mux.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "class",
    "name": "Mux",
    "memberof": "src/mux.js",
    "static": true,
    "longname": "src/mux.js~Mux",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node",
    "importStyle": "Mux",
    "description": "Mux Class - Provides access to the Mux Video and Mux Data API",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Video, Data, Webhooks } = muxClient;\n\n// Create an asset\n// returns a Promise\nVideo.Assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'})\n  .then((data) => {\n    assetId = data.id;\n  });\n\n// Create a playback Id for an asset\n// returns a Promise\nVideo.Assets.createPlaybackId(assetId, { policy: 'public' });\n\n// List all of the values across every breakdown for the `aggregate_startup_time` metric\n// returns a Promise\nData.Metrics.breakdown('aggregate_startup_time', { group_by: 'browser' });\n\n// Verify a webhook signature\nWebhooks.verifyHeader(body, signature, secret);"
    ],
    "lineNumber": 44,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Video"
        ],
        "spread": false,
        "optional": false,
        "name": "Mux.Video",
        "description": "provides access to the Mux Video API"
      },
      {
        "nullable": null,
        "types": [
          "Data"
        ],
        "spread": false,
        "optional": false,
        "name": "Mux.Data",
        "description": "provides access to the Mux Data API"
      },
      {
        "nullable": null,
        "types": [
          "Webhooks"
        ],
        "spread": false,
        "optional": false,
        "name": "Mux.Webhooks",
        "description": "provides access to verifying Webhooks signatures"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Webhooks"
      ],
      "spread": false,
      "description": null
    },
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 120,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/mux.js~Mux",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mux.js~Mux#constructor",
    "access": "public",
    "description": "Mux Constructor",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string=process.env.MUX_TOKEN_ID"
        ],
        "spread": false,
        "optional": false,
        "name": "accessToken",
        "description": "Mux API Access Token"
      },
      {
        "nullable": null,
        "types": [
          "string=process.env.MUX_TOKEN_SECRET"
        ],
        "spread": false,
        "optional": false,
        "name": "secret",
        "description": "Mux API secret"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Optional configuration object"
      },
      {
        "nullable": null,
        "types": [
          "string='https://api.mux.com'"
        ],
        "spread": false,
        "optional": false,
        "name": "options.baseUrl",
        "description": "Change the base URL for API requests."
      }
    ]
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "Video",
    "memberof": "src/mux.js~Mux",
    "static": false,
    "longname": "src/mux.js~Mux#Video",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "Video"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "Data",
    "memberof": "src/mux.js~Mux",
    "static": false,
    "longname": "src/mux.js~Mux#Data",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "Data"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 123,
    "kind": "file",
    "name": "src/utils/jwt.js",
    "content": "/*!\n * JWT - Signed URL Helpers\n * Note: Hacking this module into a class with static methods because ESDoc forces it. We'll revisit ESDoc later.\n * Documentationjs looks real nice.\n */\nconst fs = require('fs');\nconst jwt = require('jsonwebtoken');\n\nconst typeToClaim = type => {\n  const typeMap = {\n    video: 'v',\n    thumbnail: 't',\n    gif: 'g',\n  };\n\n  return typeMap[type];\n};\n\nconst getSigningKey = options => {\n  const keyId = options.keyId || process.env.MUX_SIGNING_KEY;\n  if (!keyId) {\n    throw new TypeError('Signing Key ID required');\n  }\n\n  return keyId;\n};\n\nconst getPrivateKey = options => {\n  let key;\n  if (options.keySecret) {\n    key = options.keySecret;\n  } else if (options.keyFilePath) {\n    key = fs.readFileSync(options.keyFilePath);\n  } else if (process.env.MUX_PRIVATE_KEY) {\n    key = Buffer.from(process.env.MUX_PRIVATE_KEY, 'base64');\n  }\n\n  if (key) {\n    const [rsaHeader] = key.toString().split('\\n');\n    if (rsaHeader === '-----BEGIN RSA PRIVATE KEY-----') {\n      return key;\n    }\n\n    try {\n      return Buffer.from(key, 'base64');\n    } catch (err) {\n      throw new TypeError(\n        'Specified signing key must be either a valid PEM string or a base64 encoded PEM.'\n      );\n    }\n  }\n\n  throw new TypeError('Signing Key ID required');\n};\n\n/**\n * JWT - Signed URL token generation helpers\n *\n * @example\n * const Mux = require('@mux/mux-node');\n *\n * const token = Mux.JWT.sign('some-playback-id', { keyId: 'your key id', keySecret: 'your key secret' })\n */\nclass JWT {\n  /**\n   * Creates a new token to be used with a signed playback ID\n   * @param {string} playbackId - The Playback ID (of type 'signed') that you'd like to generate a token for.\n   * @param {Object} options - Configuration options to use when creating the token\n   * @param {string} [options.keyId] - The signing key ID to use. If not specified, process.env.MUX_SIGNING_KEY is attempted\n   * @param {string} [options.keySecret] - The signing key secret. If not specified, process.env.MUX_PRIVATE_KEY is used.\n   * @param {string} [options.type=video] - Type of token this will be. Valid types are `video`, `thumbnail`, or `gif`\n   * @param {string} [options.expiration=7d] - Length of time for the token to be valid.\n   * @param {Object} [options.params] - Any additional query params you'd use with a public url. For example, with a thumbnail this would be values such as `time`.\n   * @returns {string} - Returns a token to be used with a signed URL.\n   *\n   * @example\n   * const Mux = require('@mux/mux-node');\n   *\n   * const token = Mux.JWT.sign('some-playback-id', { keyId: 'your key id', keySecret: 'your key secret' });\n   * // Now you can use the token in a url: `https://stream.mux.com/some-playback-id.m3u8?token=${token}`\n   */\n  static sign(playbackId, options = {}) {\n    const opts = {\n      type: 'video',\n      expiration: '7d',\n      params: {},\n      ...options,\n    };\n\n    const keyId = getSigningKey(options);\n    const keySecret = getPrivateKey(options);\n\n    const tokenOptions = {\n      keyid: keyId,\n      subject: playbackId,\n      audience: typeToClaim(opts.type),\n      expiresIn: opts.expiration,\n      noTimestamp: true,\n      algorithm: 'RS256',\n    };\n\n    return jwt.sign(opts.params, keySecret, tokenOptions);\n  }\n\n  /**\n   * Decodes an existing token.\n   *\n   * Note: This does not cryptographically verify the token signature, it simply decodes the values.\n   * @param {string} token - The token you'd like to decode.\n   * @returns {Object} - If the token could be decoded, it returns the decoded token object\n   *\n   * @example\n   * const Mux = require('@mux/mux-node');\n   *\n   * const token = Mux.JWT.sign('some-playback-id', { keyId: 'your key id', keySecret: 'your key secret' });\n   * const decoded = Mux.JWT.decode(token);\n   * // decoded will be the raw decoded JWT, so you'll see keys like `aud`, `exp`, etc.\n   */\n  static decode(token) {\n    return jwt.decode(token);\n  }\n}\n\nmodule.exports = JWT;\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/src/utils/jwt.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 124,
    "kind": "function",
    "name": "typeToClaim",
    "memberof": "src/utils/jwt.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/jwt.js~typeToClaim",
    "access": "public",
    "export": false,
    "importPath": "@mux/mux-node/src/utils/jwt.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "function",
    "name": "getSigningKey",
    "memberof": "src/utils/jwt.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/jwt.js~getSigningKey",
    "access": "public",
    "export": false,
    "importPath": "@mux/mux-node/src/utils/jwt.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "function",
    "name": "getPrivateKey",
    "memberof": "src/utils/jwt.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/jwt.js~getPrivateKey",
    "access": "public",
    "export": false,
    "importPath": "@mux/mux-node/src/utils/jwt.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 127,
    "kind": "class",
    "name": "JWT",
    "memberof": "src/utils/jwt.js",
    "static": true,
    "longname": "src/utils/jwt.js~JWT",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/utils/jwt.js",
    "importStyle": "JWT",
    "description": "JWT - Signed URL token generation helpers",
    "examples": [
      "const Mux = require('@mux/mux-node');\n\nconst token = Mux.JWT.sign('some-playback-id', { keyId: 'your key id', keySecret: 'your key secret' })"
    ],
    "lineNumber": 64,
    "interface": false
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "sign",
    "memberof": "src/utils/jwt.js~JWT",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/jwt.js~JWT.sign",
    "access": "public",
    "description": "Creates a new token to be used with a signed playback ID",
    "examples": [
      "const Mux = require('@mux/mux-node');\n\nconst token = Mux.JWT.sign('some-playback-id', { keyId: 'your key id', keySecret: 'your key secret' });\n// Now you can use the token in a url: `https://stream.mux.com/some-playback-id.m3u8?token=${token}`"
    ],
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - Returns a token to be used with a signed URL."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "playbackId",
        "description": "The Playback ID (of type 'signed') that you'd like to generate a token for."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Configuration options to use when creating the token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.keyId",
        "description": "The signing key ID to use. If not specified, process.env.MUX_SIGNING_KEY is attempted"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.keySecret",
        "description": "The signing key secret. If not specified, process.env.MUX_PRIVATE_KEY is used."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "video",
        "defaultRaw": "video",
        "name": "options.type",
        "description": "Type of token this will be. Valid types are `video`, `thumbnail`, or `gif`"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "7d",
        "defaultRaw": "7d",
        "name": "options.expiration",
        "description": "Length of time for the token to be valid."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.params",
        "description": "Any additional query params you'd use with a public url. For example, with a thumbnail this would be values such as `time`."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Returns a token to be used with a signed URL."
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "decode",
    "memberof": "src/utils/jwt.js~JWT",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/jwt.js~JWT.decode",
    "access": "public",
    "description": "Decodes an existing token.\n\nNote: This does not cryptographically verify the token signature, it simply decodes the values.",
    "examples": [
      "const Mux = require('@mux/mux-node');\n\nconst token = Mux.JWT.sign('some-playback-id', { keyId: 'your key id', keySecret: 'your key secret' });\nconst decoded = Mux.JWT.decode(token);\n// decoded will be the raw decoded JWT, so you'll see keys like `aud`, `exp`, etc."
    ],
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - If the token could be decoded, it returns the decoded token object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "The token you'd like to decode."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "If the token could be decoded, it returns the decoded token object"
    }
  },
  {
    "__docId__": 130,
    "kind": "file",
    "name": "src/video/resources/assets.js",
    "content": "/*!\n * Mux Assets\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base asset path for the Mux API\n * */\nconst PATH = '/video/v1/assets';\n\n/**\n * @private\n * Build the base asset path for the Mux API\n * */\nconst buildBasePath = assetId => `${PATH}/${assetId}`;\n\n/**\n * Assets Class - Provides access to the Mux Video Assets API\n *\n * @example\n * const { Video } = new Mux(accessToken, secret);\n *\n * // Create an asset\n * Video.Assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});\n */\nclass Assets extends Base {\n  /**\n   * Creates a Mux asset with the specified JSON parameters\n   * @param {Object} params - Asset JSON parameters (e.g input)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create an asset\n   * Video.Assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});\n   *\n   * @see https://docs.mux.com/reference#create-an-asset\n   */\n  create(params) {\n    if (!params) {\n      return Promise.reject(\n        new Error('Params are required for creating an asset')\n      );\n    }\n\n    return this.http.post(PATH, params);\n  }\n\n  /**\n   * Deletes a Mux asset\n   * @param {string} assetId - The ID for the asset intended for deletion\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete an asset\n   * Video.Assets.del(assetId);\n   *\n   * @see https://docs.mux.com/reference#delete-an-asset\n   */\n  del(assetId) {\n    if (!assetId) {\n      return Promise.reject(\n        new Error('An asset ID is required to delete an asset')\n      );\n    }\n    return this.http.delete(buildBasePath(assetId));\n  }\n\n  /**\n   * Get an asset\n   * @param {string} assetId - The ID for the asset\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get an asset\n   * Video.Assets.get(assetId);\n   *\n   * @see https://docs.mux.com/reference#retrieve-an-asset\n   */\n  get(assetId) {\n    if (!assetId) {\n      return Promise.reject(\n        new Error('An asset ID is required to get an asset')\n      );\n    }\n    return this.http.get(buildBasePath(assetId));\n  }\n\n  /**\n   * Get input info for an asset\n   * @param {string} assetId - The ID for the asset\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get input info for an asset\n   * Video.Assets.inputInfo(assetId);\n   *\n   * @see https://docs.mux.com/reference#retrieve-asset-input-info\n   */\n  inputInfo(assetId) {\n    if (!assetId) {\n      return Promise.reject(\n        new Error('An asset ID is required to get input-info')\n      );\n    }\n    return this.http.get(`${buildBasePath(assetId)}/input-info`);\n  }\n\n  /**\n   * List all assets for a Mux Environment (tied to your access token)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // List all assets for a Mux Environment\n   * Video.Assets.list();\n   *\n   * @see https://docs.mux.com/reference#list-assets\n   */\n  list(params) {\n    return this.http.get(PATH, { params });\n  }\n\n  /**\n   * Return an asset playback id\n   * @param {string} assetId - The ID for the asset\n   * @param {string} playbackId - The ID for the playbackId\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Retrieve an asset playbackId\n   * Video.Assets.playbackId(assetId, playbackId);\n   *\n   * @see https://docs.mux.com/v1/reference#retrieve-an-asset-playback-id\n   */\n  playbackId(assetId, playbackId) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!playbackId) {\n      return Promise.reject(new Error('A playback ID is required'));\n    }\n    return this.http.get(\n      `${buildBasePath(assetId)}/playback-ids/${playbackId}`\n    );\n  }\n\n  /**\n   * Create an asset playback id\n   * @param {string} assetId - The ID for the asset\n   * @param {Object} params - Asset JSON parameters (e.g playback_policy)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create an asset playback ID\n   * Video.Assets.createPlaybackId(assetId, { policy: 'public' });\n   *\n   * @see https://docs.mux.com/v1/reference#add-an-asset-playback-id\n   */\n  createPlaybackId(assetId, params) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!params) {\n      return Promise.reject(new Error('Playback ID params are required'));\n    }\n    return this.http.post(`${buildBasePath(assetId)}/playback-ids`, params);\n  }\n\n  /**\n   * Delete an asset playback ID\n   * @param {string} assetId - The ID for the asset\n   * @param {string} playbackId - The ID for the asset playback ID to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete an asset playback ID\n   * Video.Assets.deletePlaybackId(assetId, { policy: 'public' });\n   *\n   * @see https://docs.mux.com/v1/reference#delete-an-asset-playback-id\n   */\n  deletePlaybackId(assetId, playbackId) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!playbackId) {\n      return Promise.reject(new Error('A playback ID is required'));\n    }\n    return this.http.delete(\n      `${buildBasePath(assetId)}/playback-ids/${playbackId}`\n    );\n  }\n\n  /**\n   * Create a subtitle text track\n   * @param {string} assetId - The ID for the asset\n   * @param {Object} params - subtitle text track JSON parameters\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create an asset text track\n   * Video.Assets.createTrack(assetId, {\n   *   url: \"https://example.com/myVIdeo_en.srt\",\n   *   type: \"text\",\n   *   text_type: \"subtitles\",\n   *   language_code: \"en-US\",\n   * });\n   *\n   * @see https://docs.mux.com/reference#create-a-subtitle-text-track\n   */\n  createTrack(assetId, params) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!params) {\n      return Promise.reject(new Error('Text track params are required'));\n    }\n    return this.http.post(`${buildBasePath(assetId)}/tracks`, params);\n  }\n\n  /**\n   * Delete an asset text track\n   * @param {string} assetId - The ID for the asset\n   * @param {string} trackId - The ID for the asset text track to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete an asset text track\n   * Video.Assets.deleteTrack(assetId, trackId);\n   *\n   * @see https://docs.mux.com/reference#delete-a-subtitle-text-track\n   */\n  deleteTrack(assetId, trackId) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!trackId) {\n      return Promise.reject(new Error('A track ID is required'));\n    }\n    return this.http.delete(`${buildBasePath(assetId)}/tracks/${trackId}`);\n  }\n\n  /**\n   * Update mp4 support for an asset\n   * @param {Object} params - mp4 support JSON parameters\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Updates mp4 support for an asset\n   * Video.Assets.updateMp4Support(assetId, {mp4_support: \"standard\"});\n   *\n   * @see https://docs.mux.com/reference#update-mp4-support\n   */\n  updateMp4Support(assetId, params) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!(params && params.mp4_support)) {\n      return Promise.reject(new Error('params.mp4_support is required'));\n    }\n    return this.http.put(`${buildBasePath(assetId)}/mp4-support`, params);\n  }\n\n  /**\n   * Update master access for an asset\n   * @param {Object} params - master access JSON parameters\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Update master access for an asset\n   * Video.Assets.updateMasterAccess(assetId, {master_access: \"temporary\"});\n   *\n   * @see https://docs.mux.com/reference#update-master-access\n   */\n  updateMasterAccess(assetId, params) {\n    if (!assetId) {\n      return Promise.reject(new Error('An asset ID is required'));\n    }\n\n    if (!(params && params.master_access)) {\n      return Promise.reject(new Error('params.master_access is required'));\n    }\n    return this.http.put(`${buildBasePath(assetId)}/master-access`, params);\n  }\n}\n\nmodule.exports = Assets;\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/src/video/resources/assets.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 131,
    "kind": "variable",
    "name": "PATH",
    "memberof": "src/video/resources/assets.js",
    "static": true,
    "longname": "src/video/resources/assets.js~PATH",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/video/resources/assets.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 132,
    "kind": "function",
    "name": "buildBasePath",
    "memberof": "src/video/resources/assets.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/video/resources/assets.js~buildBasePath",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/video/resources/assets.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 16,
    "params": [
      {
        "name": "assetId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "class",
    "name": "Assets",
    "memberof": "src/video/resources/assets.js",
    "static": true,
    "longname": "src/video/resources/assets.js~Assets",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/video/resources/assets.js",
    "importStyle": "Assets",
    "description": "Assets Class - Provides access to the Mux Video Assets API",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Create an asset\nVideo.Assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});"
    ],
    "lineNumber": 27,
    "interface": false,
    "extends": [
      "src/base.js~Base"
    ]
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "create",
    "memberof": "src/video/resources/assets.js~Assets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/assets.js~Assets#create",
    "access": "public",
    "description": "Creates a Mux asset with the specified JSON parameters",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Create an asset\nVideo.Assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});"
    ],
    "see": [
      "https://docs.mux.com/reference#create-an-asset"
    ],
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Asset JSON parameters (e.g input)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "del",
    "memberof": "src/video/resources/assets.js~Assets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/assets.js~Assets#del",
    "access": "public",
    "description": "Deletes a Mux asset",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Delete an asset\nVideo.Assets.del(assetId);"
    ],
    "see": [
      "https://docs.mux.com/reference#delete-an-asset"
    ],
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "assetId",
        "description": "The ID for the asset intended for deletion"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "get",
    "memberof": "src/video/resources/assets.js~Assets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/assets.js~Assets#get",
    "access": "public",
    "description": "Get an asset",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Get an asset\nVideo.Assets.get(assetId);"
    ],
    "see": [
      "https://docs.mux.com/reference#retrieve-an-asset"
    ],
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "assetId",
        "description": "The ID for the asset"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "inputInfo",
    "memberof": "src/video/resources/assets.js~Assets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/assets.js~Assets#inputInfo",
    "access": "public",
    "description": "Get input info for an asset",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Get input info for an asset\nVideo.Assets.inputInfo(assetId);"
    ],
    "see": [
      "https://docs.mux.com/reference#retrieve-asset-input-info"
    ],
    "lineNumber": 108,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "assetId",
        "description": "The ID for the asset"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "list",
    "memberof": "src/video/resources/assets.js~Assets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/assets.js~Assets#list",
    "access": "public",
    "description": "List all assets for a Mux Environment (tied to your access token)",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// List all assets for a Mux Environment\nVideo.Assets.list();"
    ],
    "see": [
      "https://docs.mux.com/reference#list-assets"
    ],
    "lineNumber": 129,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    },
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "playbackId",
    "memberof": "src/video/resources/assets.js~Assets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/assets.js~Assets#playbackId",
    "access": "public",
    "description": "Return an asset playback id",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Retrieve an asset playbackId\nVideo.Assets.playbackId(assetId, playbackId);"
    ],
    "see": [
      "https://docs.mux.com/v1/reference#retrieve-an-asset-playback-id"
    ],
    "lineNumber": 147,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "assetId",
        "description": "The ID for the asset"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "playbackId",
        "description": "The ID for the playbackId"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "createPlaybackId",
    "memberof": "src/video/resources/assets.js~Assets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/assets.js~Assets#createPlaybackId",
    "access": "public",
    "description": "Create an asset playback id",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Create an asset playback ID\nVideo.Assets.createPlaybackId(assetId, { policy: 'public' });"
    ],
    "see": [
      "https://docs.mux.com/v1/reference#add-an-asset-playback-id"
    ],
    "lineNumber": 174,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "assetId",
        "description": "The ID for the asset"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Asset JSON parameters (e.g playback_policy)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "deletePlaybackId",
    "memberof": "src/video/resources/assets.js~Assets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/assets.js~Assets#deletePlaybackId",
    "access": "public",
    "description": "Delete an asset playback ID",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Delete an asset playback ID\nVideo.Assets.deletePlaybackId(assetId, { policy: 'public' });"
    ],
    "see": [
      "https://docs.mux.com/v1/reference#delete-an-asset-playback-id"
    ],
    "lineNumber": 199,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "assetId",
        "description": "The ID for the asset"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "playbackId",
        "description": "The ID for the asset playback ID to delete"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "createTrack",
    "memberof": "src/video/resources/assets.js~Assets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/assets.js~Assets#createTrack",
    "access": "public",
    "description": "Create a subtitle text track",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Create an asset text track\nVideo.Assets.createTrack(assetId, {\n  url: \"https://example.com/myVIdeo_en.srt\",\n  type: \"text\",\n  text_type: \"subtitles\",\n  language_code: \"en-US\",\n});"
    ],
    "see": [
      "https://docs.mux.com/reference#create-a-subtitle-text-track"
    ],
    "lineNumber": 231,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "assetId",
        "description": "The ID for the asset"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "subtitle text track JSON parameters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "deleteTrack",
    "memberof": "src/video/resources/assets.js~Assets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/assets.js~Assets#deleteTrack",
    "access": "public",
    "description": "Delete an asset text track",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Delete an asset text track\nVideo.Assets.deleteTrack(assetId, trackId);"
    ],
    "see": [
      "https://docs.mux.com/reference#delete-a-subtitle-text-track"
    ],
    "lineNumber": 256,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "assetId",
        "description": "The ID for the asset"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "trackId",
        "description": "The ID for the asset text track to delete"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "updateMp4Support",
    "memberof": "src/video/resources/assets.js~Assets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/assets.js~Assets#updateMp4Support",
    "access": "public",
    "description": "Update mp4 support for an asset",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Updates mp4 support for an asset\nVideo.Assets.updateMp4Support(assetId, {mp4_support: \"standard\"});"
    ],
    "see": [
      "https://docs.mux.com/reference#update-mp4-support"
    ],
    "lineNumber": 280,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "mp4 support JSON parameters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "updateMasterAccess",
    "memberof": "src/video/resources/assets.js~Assets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/assets.js~Assets#updateMasterAccess",
    "access": "public",
    "description": "Update master access for an asset",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Update master access for an asset\nVideo.Assets.updateMasterAccess(assetId, {master_access: \"temporary\"});"
    ],
    "see": [
      "https://docs.mux.com/reference#update-master-access"
    ],
    "lineNumber": 304,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "master access JSON parameters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 146,
    "kind": "file",
    "name": "src/video/resources/deliveryUsage.js",
    "content": "/*!\n * Mux DeliveryUsage\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base delivery usage path for the Mux API\n * */\nconst PATH = '/video/v1/delivery-usage';\n\n/**\n * DeliveryUsage Class - Provides access to the Mux Video Delivery Usage API\n *\n * @example\n * const { Video } = new Mux(accessToken, secret);\n *\n * // List delivery usage within a timeframe\n * Video.DeliveryUsage.list({timeframe: [1574076240, 1573471440]});\n */\nclass DeliveryUsage extends Base {\n  /**\n   * List all delivery usage during a timeframe for a Mux Environment (tied to your access token)\n   * @param {Object} params - Request JSON parameters (e.g timeframe)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // List all delivery usage for a Mux Environment within a timeframe\n   * Video.DeliveryUsage.list({timeframe: [1574076240, 1573471440]});\n   *\n   * @see https://docs.mux.com/reference#delivery-usage\n   */\n  list(params) {\n    return this.http.get(PATH, { params });\n  }\n}\n\nmodule.exports = DeliveryUsage;\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/src/video/resources/deliveryUsage.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 147,
    "kind": "variable",
    "name": "PATH",
    "memberof": "src/video/resources/deliveryUsage.js",
    "static": true,
    "longname": "src/video/resources/deliveryUsage.js~PATH",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/video/resources/deliveryUsage.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 148,
    "kind": "class",
    "name": "DeliveryUsage",
    "memberof": "src/video/resources/deliveryUsage.js",
    "static": true,
    "longname": "src/video/resources/deliveryUsage.js~DeliveryUsage",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/video/resources/deliveryUsage.js",
    "importStyle": "DeliveryUsage",
    "description": "DeliveryUsage Class - Provides access to the Mux Video Delivery Usage API",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// List delivery usage within a timeframe\nVideo.DeliveryUsage.list({timeframe: [1574076240, 1573471440]});"
    ],
    "lineNumber": 21,
    "interface": false,
    "extends": [
      "src/base.js~Base"
    ]
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "list",
    "memberof": "src/video/resources/deliveryUsage.js~DeliveryUsage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/deliveryUsage.js~DeliveryUsage#list",
    "access": "public",
    "description": "List all delivery usage during a timeframe for a Mux Environment (tied to your access token)",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// List all delivery usage for a Mux Environment within a timeframe\nVideo.DeliveryUsage.list({timeframe: [1574076240, 1573471440]});"
    ],
    "see": [
      "https://docs.mux.com/reference#delivery-usage"
    ],
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Request JSON parameters (e.g timeframe)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 150,
    "kind": "file",
    "name": "src/video/resources/liveStreams.js",
    "content": "/*!\n * Mux Live Streams\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base live stream path for the Mux API\n * */\nconst PATH = '/video/v1/live-streams';\n\n/**\n * @private\n * Build the base live stream path for the Mux API\n * */\nconst buildBasePath = liveStreamId => `${PATH}/${liveStreamId}`;\n\n/**\n * Live Streams Class - Provides access to the Mux Video Live Streams API\n *\n * @extends Base\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Video } = muxClient;\n *\n * // Create a live stream\n * Video.LiveStreams.create({\n *  playback_policy: 'public',\n *  new_asset_settings: { playback_policy: 'public' }\n * });\n */\nclass LiveStreams extends Base {\n  /**\n   * Creates a Mux live stream with the specified JSON parameters\n   * @param {Object} params - Live Stream JSON parameters (e.g playback_policy)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Video } = muxClient;\n   *\n   * // Create a live stream\n   * Video.LiveStreams.create({\n   *  playback_policy: 'public',\n   *  new_asset_settings: { playback_policy: 'public' }\n   * });\n   *\n   * @see https://docs.mux.com/reference#create-a-live-stream\n   */\n  create(params) {\n    return this.http.post(PATH, params);\n  }\n\n  /**\n   * Deletes a Mux Live Stream\n   * @param {string} liveStreamId - The ID for the live stream intended for deletion\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete a mux live stream\n   * Video.LiveStreams.del(liveStreamId);\n   *\n   * @see https://docs.mux.com/reference#delete-a-live-stream\n   */\n  del(liveStreamId) {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to delete a live stream')\n      );\n    }\n    return this.http.delete(buildBasePath(liveStreamId));\n  }\n\n  /**\n   * Get an Live Stream\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get a live stream\n   * Video.LiveStreams.get(liveStreamId);\n   *\n   * @see https://docs.mux.com/reference#retrieve-a-live-stream\n   */\n  get(liveStreamId) {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to get a live stream')\n      );\n    }\n    return this.http.get(buildBasePath(liveStreamId));\n  }\n\n  /**\n   * List all live streams for a Mux Environment (tied to your access token)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // List all live streams for a Mux Environment\n   * Video.LiveStreams.list();\n   *\n   * @see https://docs.mux.com/reference#list-live-streams\n   */\n  list(params) {\n    return this.http.get(PATH, { params });\n  }\n\n  /**\n   * Signal a live stream is finished\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Signal a live stream is finished\n   * Video.LiveStreams.signalComplete(liveStreamId);\n   *\n   * @see https://docs.mux.com/reference#signal-live-stream-complete\n   */\n  signalComplete(liveStreamId) {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to signal a stream is complete')\n      );\n    }\n    return this.http.put(`${buildBasePath(liveStreamId)}/complete`);\n  }\n\n  /**\n   * Reset a stream key\n   * @param {string} liveStreamId - The ID for the live stream\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Reset a live stream key if you want to immediately stop the current stream key\n   * // from working and create a new stream key that can be used for future broadcasts.\n   * Video.LiveStreams.resetStreamKey(liveStreamId);\n   *\n   * @see https://docs.mux.com/reference#reset-a-stream-key\n   */\n  resetStreamKey(liveStreamId) {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to reset a live stream key')\n      );\n    }\n    return this.http.post(`${buildBasePath(liveStreamId)}/reset-stream-key`);\n  }\n\n  /**\n   * Create a live stream playback id\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {Object} params - Live Stream JSON parameters (e.g playback_policy)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create a live stream playback ID\n   * Video.LiveStreams.createPlaybackId(liveStreamId, { policy: 'public' });\n   *\n   * @see https://docs.mux.com/reference#add-a-live-stream-playback-id\n   */\n  createPlaybackId(liveStreamId, params) {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error(\n          'A live stream ID is required to create a live stream playback ID'\n        )\n      );\n    }\n\n    if (!params) {\n      return Promise.reject(\n        new Error(\n          'A playback policy is required to create a live stream playback ID'\n        )\n      );\n    }\n    return this.http.post(\n      `${buildBasePath(liveStreamId)}/playback-ids`,\n      params\n    );\n  }\n\n  /**\n   * Delete a live stream playback ID\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {string} playbackId - The ID for the live stream playback ID to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete a live stream playback ID\n   * Video.LiveStreams.deletePlaybackId(liveStreamId, { policy: 'public' });\n   *\n   * @see https://docs.mux.com/reference#delete-a-live-stream-playback-id\n   */\n  deletePlaybackId(liveStreamId, playbackId) {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error(\n          'A live stream ID is required to delete a live stream playback ID'\n        )\n      );\n    }\n\n    if (!playbackId) {\n      return Promise.reject(\n        new Error(\n          'A live stream playback ID is required to delete a live stream playback ID'\n        )\n      );\n    }\n    return this.http.delete(\n      `${buildBasePath(liveStreamId)}/playback-ids/${playbackId}`\n    );\n  }\n\n  /**\n   * Create a simulcast target\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {Object} params - Simulcast Target JSON parameters (e.g url and stream_key)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Create a live simulcast target\n   * Video.LiveStreams.createSimulcastTarget(liveStreamId, {url: 'rtmp://live.example.com/app', stream_key: 'difvbfgi', passthrough: 'Example Live Streaming service'});\n   *\n   * @see https://docs.mux.com/reference#create-a-simulcast-target\n   */\n  createSimulcastTarget(liveStreamId, params) {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to create a simulcast target')\n      );\n    }\n\n    if (!(params && params.url)) {\n      return Promise.reject(\n        new Error('A url is required to create a simulcast target')\n      );\n    }\n    return this.http.post(\n      `${buildBasePath(liveStreamId)}/simulcast-targets`,\n      params\n    );\n  }\n\n  /**\n   * Get a simulcast target\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {string} simulcastTargetId - The ID for the simulcast target to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get a live simulcast target\n   * Video.LiveStreams.getSimulcastTarget(liveStreamId, simulcastTargetId);\n   *\n   * @see https://docs.mux.com/reference#retrieve-a-simulcast-target\n   */\n  getSimulcastTarget(liveStreamId, simulcastTargetId) {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to get a simulcast target')\n      );\n    }\n\n    if (!simulcastTargetId) {\n      return Promise.reject(\n        new Error('A simulcast target ID is required to get a simulcast target')\n      );\n    }\n    return this.http.get(\n      `${buildBasePath(liveStreamId)}/simulcast-targets/${simulcastTargetId}`\n    );\n  }\n\n  /**\n   * Delete a simulcast target\n   * @param {string} liveStreamId - The ID for the live stream\n   * @param {string} simulcastTargetId - The ID for the simulcast target to delete\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete a simulcast target\n   * Video.LiveStreams.deleteSimulcastTarget(liveStreamId, simulcastTargetId);\n   *\n   * @see https://docs.mux.com/reference#delete-a-simulcast-target\n   */\n  deleteSimulcastTarget(liveStreamId, simulcastTargetId) {\n    if (!liveStreamId) {\n      return Promise.reject(\n        new Error('A live stream ID is required to delete a simulcast target')\n      );\n    }\n\n    if (!simulcastTargetId) {\n      return Promise.reject(\n        new Error(\n          'A simulcast target ID is required to delete a simulcast target'\n        )\n      );\n    }\n    return this.http.delete(\n      `${buildBasePath(liveStreamId)}/simulcast-targets/${simulcastTargetId}`\n    );\n  }\n}\n\nmodule.exports = LiveStreams;\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/src/video/resources/liveStreams.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "name": "PATH",
    "memberof": "src/video/resources/liveStreams.js",
    "static": true,
    "longname": "src/video/resources/liveStreams.js~PATH",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/video/resources/liveStreams.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 152,
    "kind": "function",
    "name": "buildBasePath",
    "memberof": "src/video/resources/liveStreams.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/video/resources/liveStreams.js~buildBasePath",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/video/resources/liveStreams.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 16,
    "params": [
      {
        "name": "liveStreamId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 153,
    "kind": "class",
    "name": "LiveStreams",
    "memberof": "src/video/resources/liveStreams.js",
    "static": true,
    "longname": "src/video/resources/liveStreams.js~LiveStreams",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/video/resources/liveStreams.js",
    "importStyle": "LiveStreams",
    "description": "Live Streams Class - Provides access to the Mux Video Live Streams API",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Video } = muxClient;\n\n// Create a live stream\nVideo.LiveStreams.create({\n playback_policy: 'public',\n new_asset_settings: { playback_policy: 'public' }\n});"
    ],
    "lineNumber": 32,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "create",
    "memberof": "src/video/resources/liveStreams.js~LiveStreams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/liveStreams.js~LiveStreams#create",
    "access": "public",
    "description": "Creates a Mux live stream with the specified JSON parameters",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Video } = muxClient;\n\n// Create a live stream\nVideo.LiveStreams.create({\n playback_policy: 'public',\n new_asset_settings: { playback_policy: 'public' }\n});"
    ],
    "see": [
      "https://docs.mux.com/reference#create-a-live-stream"
    ],
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Live Stream JSON parameters (e.g playback_policy)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "del",
    "memberof": "src/video/resources/liveStreams.js~LiveStreams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/liveStreams.js~LiveStreams#del",
    "access": "public",
    "description": "Deletes a Mux Live Stream",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Delete a mux live stream\nVideo.LiveStreams.del(liveStreamId);"
    ],
    "see": [
      "https://docs.mux.com/reference#delete-a-live-stream"
    ],
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "liveStreamId",
        "description": "The ID for the live stream intended for deletion"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "get",
    "memberof": "src/video/resources/liveStreams.js~LiveStreams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/liveStreams.js~LiveStreams#get",
    "access": "public",
    "description": "Get an Live Stream",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Get a live stream\nVideo.LiveStreams.get(liveStreamId);"
    ],
    "see": [
      "https://docs.mux.com/reference#retrieve-a-live-stream"
    ],
    "lineNumber": 89,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "liveStreamId",
        "description": "The ID for the live stream"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "list",
    "memberof": "src/video/resources/liveStreams.js~LiveStreams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/liveStreams.js~LiveStreams#list",
    "access": "public",
    "description": "List all live streams for a Mux Environment (tied to your access token)",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// List all live streams for a Mux Environment\nVideo.LiveStreams.list();"
    ],
    "see": [
      "https://docs.mux.com/reference#list-live-streams"
    ],
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    },
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "signalComplete",
    "memberof": "src/video/resources/liveStreams.js~LiveStreams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/liveStreams.js~LiveStreams#signalComplete",
    "access": "public",
    "description": "Signal a live stream is finished",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Signal a live stream is finished\nVideo.LiveStreams.signalComplete(liveStreamId);"
    ],
    "see": [
      "https://docs.mux.com/reference#signal-live-stream-complete"
    ],
    "lineNumber": 127,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "liveStreamId",
        "description": "The ID for the live stream"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "resetStreamKey",
    "memberof": "src/video/resources/liveStreams.js~LiveStreams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/liveStreams.js~LiveStreams#resetStreamKey",
    "access": "public",
    "description": "Reset a stream key",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Reset a live stream key if you want to immediately stop the current stream key\n// from working and create a new stream key that can be used for future broadcasts.\nVideo.LiveStreams.resetStreamKey(liveStreamId);"
    ],
    "see": [
      "https://docs.mux.com/reference#reset-a-stream-key"
    ],
    "lineNumber": 150,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "liveStreamId",
        "description": "The ID for the live stream"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "createPlaybackId",
    "memberof": "src/video/resources/liveStreams.js~LiveStreams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/liveStreams.js~LiveStreams#createPlaybackId",
    "access": "public",
    "description": "Create a live stream playback id",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Create a live stream playback ID\nVideo.LiveStreams.createPlaybackId(liveStreamId, { policy: 'public' });"
    ],
    "see": [
      "https://docs.mux.com/reference#add-a-live-stream-playback-id"
    ],
    "lineNumber": 173,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "liveStreamId",
        "description": "The ID for the live stream"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Live Stream JSON parameters (e.g playback_policy)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "deletePlaybackId",
    "memberof": "src/video/resources/liveStreams.js~LiveStreams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/liveStreams.js~LiveStreams#deletePlaybackId",
    "access": "public",
    "description": "Delete a live stream playback ID",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Delete a live stream playback ID\nVideo.LiveStreams.deletePlaybackId(liveStreamId, { policy: 'public' });"
    ],
    "see": [
      "https://docs.mux.com/reference#delete-a-live-stream-playback-id"
    ],
    "lineNumber": 209,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "liveStreamId",
        "description": "The ID for the live stream"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "playbackId",
        "description": "The ID for the live stream playback ID to delete"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "createSimulcastTarget",
    "memberof": "src/video/resources/liveStreams.js~LiveStreams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/liveStreams.js~LiveStreams#createSimulcastTarget",
    "access": "public",
    "description": "Create a simulcast target",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Create a live simulcast target\nVideo.LiveStreams.createSimulcastTarget(liveStreamId, {url: 'rtmp://live.example.com/app', stream_key: 'difvbfgi', passthrough: 'Example Live Streaming service'});"
    ],
    "see": [
      "https://docs.mux.com/reference#create-a-simulcast-target"
    ],
    "lineNumber": 244,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "liveStreamId",
        "description": "The ID for the live stream"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Simulcast Target JSON parameters (e.g url and stream_key)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "getSimulcastTarget",
    "memberof": "src/video/resources/liveStreams.js~LiveStreams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/liveStreams.js~LiveStreams#getSimulcastTarget",
    "access": "public",
    "description": "Get a simulcast target",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Get a live simulcast target\nVideo.LiveStreams.getSimulcastTarget(liveStreamId, simulcastTargetId);"
    ],
    "see": [
      "https://docs.mux.com/reference#retrieve-a-simulcast-target"
    ],
    "lineNumber": 276,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "liveStreamId",
        "description": "The ID for the live stream"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "simulcastTargetId",
        "description": "The ID for the simulcast target to delete"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "deleteSimulcastTarget",
    "memberof": "src/video/resources/liveStreams.js~LiveStreams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/liveStreams.js~LiveStreams#deleteSimulcastTarget",
    "access": "public",
    "description": "Delete a simulcast target",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Delete a simulcast target\nVideo.LiveStreams.deleteSimulcastTarget(liveStreamId, simulcastTargetId);"
    ],
    "see": [
      "https://docs.mux.com/reference#delete-a-simulcast-target"
    ],
    "lineNumber": 307,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "liveStreamId",
        "description": "The ID for the live stream"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "simulcastTargetId",
        "description": "The ID for the simulcast target to delete"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 165,
    "kind": "file",
    "name": "src/video/resources/signingKeys.js",
    "content": "/*!\n * Mux Signing Keys\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base signing-key path for the Mux API\n * */\nconst PATH = '/video/v1/signing-keys';\n\n/**\n * @private\n * Build the base asset path for the Mux API\n * */\nconst buildBasePath = keyId => `${PATH}/${keyId}`;\n\n/**\n * Signing Key Class - Provides access to the Mux Video Signing Key API\n *\n * @example\n * const { Video } = new Mux(accessToken, secret);\n *\n * // Create a new signing key\n * Video.SigningKeys.create();\n */\nclass SigningKeys extends Base {\n  /**\n   * Creates a new Signing Key that can be used with the JWT module to sign URLs.\n   * @extends Base\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Video } = muxClient;\n   *\n   * const signingKey = await Video.SigningKeys.create();\n   *\n   * @see https://docs.mux.com/v1/reference#url-signing-keys\n   */\n  create() {\n    return this.http.post(PATH, {});\n  }\n\n  /**\n   * Get a signing key. *Note* The private key is _not_ returned.\n   * @param {string} keyId - The ID for the signing key\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get an asset\n   * Video.SigningKeys.get(keyId);\n   *\n   * @see https://docs.mux.com/v1/reference#retrieve-a-url-signing-key\n   */\n  get(keyId) {\n    if (!keyId) {\n      return Promise.reject(new Error('An signing key ID is required.'));\n    }\n    return this.http.get(buildBasePath(keyId));\n  }\n\n  /**\n   * Delete a signing key\n   * @param {string} keyId - The ID for the signing key\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get an asset\n   * Video.SigningKeys.del(keyId);\n   *\n   * @see https://docs.mux.com/v1/reference#delete-a-url-signing-key\n   */\n  del(keyId) {\n    if (!keyId) {\n      return Promise.reject(new Error('An signing key ID is required.'));\n    }\n    return this.http.delete(buildBasePath(keyId));\n  }\n\n  /**\n   * List signing keys\n   * @param {string} keyId - The ID for the signing key\n   * @param {object} params - Object to include as query params\n   * @param {number} params.limit - Number of signing keys to return in the response\n   * @param {number} params.page - Page of signing keys to return (limit * page)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get an asset\n   * Video.SigningKeys.list();\n   *\n   * @see https://docs.mux.com/v1/reference#list-url-signing-keys\n   */\n  list(params = {}) {\n    return this.http.get(PATH, { params });\n  }\n}\n\nmodule.exports = SigningKeys;\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/src/video/resources/signingKeys.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 166,
    "kind": "variable",
    "name": "PATH",
    "memberof": "src/video/resources/signingKeys.js",
    "static": true,
    "longname": "src/video/resources/signingKeys.js~PATH",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/video/resources/signingKeys.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 167,
    "kind": "function",
    "name": "buildBasePath",
    "memberof": "src/video/resources/signingKeys.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/video/resources/signingKeys.js~buildBasePath",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/video/resources/signingKeys.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 16,
    "params": [
      {
        "name": "keyId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 168,
    "kind": "class",
    "name": "SigningKeys",
    "memberof": "src/video/resources/signingKeys.js",
    "static": true,
    "longname": "src/video/resources/signingKeys.js~SigningKeys",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/video/resources/signingKeys.js",
    "importStyle": "SigningKeys",
    "description": "Signing Key Class - Provides access to the Mux Video Signing Key API",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Create a new signing key\nVideo.SigningKeys.create();"
    ],
    "lineNumber": 27,
    "interface": false,
    "extends": [
      "src/base.js~Base"
    ]
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "create",
    "memberof": "src/video/resources/signingKeys.js~SigningKeys",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/signingKeys.js~SigningKeys#create",
    "access": "public",
    "description": "Creates a new Signing Key that can be used with the JWT module to sign URLs.",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Video } = muxClient;\n\nconst signingKey = await Video.SigningKeys.create();"
    ],
    "see": [
      "https://docs.mux.com/v1/reference#url-signing-keys"
    ],
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@extends",
        "tagValue": "Base"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    },
    "params": []
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "get",
    "memberof": "src/video/resources/signingKeys.js~SigningKeys",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/signingKeys.js~SigningKeys#get",
    "access": "public",
    "description": "Get a signing key. *Note* The private key is _not_ returned.",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Get an asset\nVideo.SigningKeys.get(keyId);"
    ],
    "see": [
      "https://docs.mux.com/v1/reference#retrieve-a-url-signing-key"
    ],
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "keyId",
        "description": "The ID for the signing key"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "del",
    "memberof": "src/video/resources/signingKeys.js~SigningKeys",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/signingKeys.js~SigningKeys#del",
    "access": "public",
    "description": "Delete a signing key",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Get an asset\nVideo.SigningKeys.del(keyId);"
    ],
    "see": [
      "https://docs.mux.com/v1/reference#delete-a-url-signing-key"
    ],
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "keyId",
        "description": "The ID for the signing key"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "list",
    "memberof": "src/video/resources/signingKeys.js~SigningKeys",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/signingKeys.js~SigningKeys#list",
    "access": "public",
    "description": "List signing keys",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Get an asset\nVideo.SigningKeys.list();"
    ],
    "see": [
      "https://docs.mux.com/v1/reference#list-url-signing-keys"
    ],
    "lineNumber": 101,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "keyId",
        "description": "The ID for the signing key"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Object to include as query params"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Number of signing keys to return in the response"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.page",
        "description": "Page of signing keys to return (limit * page)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 173,
    "kind": "file",
    "name": "src/video/resources/uploads.js",
    "content": "/*!\n * Mux Assets\n * Copyright(c) 2018 Mux Inc.\n */\nconst Base = require('../../base');\n\n/**\n * @private Base asset path for the Mux API\n * */\nconst PATH = '/video/v1/uploads';\n\n/**\n * @private\n * Build the base asset path for the Mux API\n * */\nconst buildBasePath = uploadId => `${PATH}/${uploadId}`;\n\n/**\n * Uploads Class - Provides access to the Mux Video Uploads API\n *\n * @example\n * const { Video } = new Mux(accessToken, secret);\n *\n * // Create an upload\n * Video.Uploads.create({ new_asset_settings: { playback_policy: 'public' } });\n */\nclass Uploads extends Base {\n  /**\n   * Creates a direct upload with the specified JSON parameters\n   * @extends Base\n   * @param {Object} params - Upload JSON parameters (e.g timeout)\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const muxClient = new Mux(accessToken, secret);\n   * const { Video } = muxClient;\n   *\n   * // Create a new upload\n   * const upload = await Video.Uploads.create({new_asset_settings: {playback_policy: 'public'}});\n   * // Now push a file to the URL returned.\n   * fs.createReadStream(pathToFile).pipe(request.put(upload.url))\n   *\n   * @see https://docs.mux.com/reference#upload-an-asset\n   */\n  create(params) {\n    if (!params) {\n      return Promise.reject(\n        new Error('Params are required for creating a direct upload')\n      );\n    }\n\n    return this.http.post(PATH, params);\n  }\n\n  /**\n   * Cancels an upload\n   * @param {string} uploadId - The ID for the upload intended for cancellation\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Delete an upload\n   * Video.Uploads.cancel(uploadId);\n   *\n   * @see https://docs.mux.com/reference#delete-an-asset\n   */\n  cancel(uploadId) {\n    if (!uploadId) {\n      return Promise.reject(new Error('An upload ID is required'));\n    }\n    return this.http.put(`${buildBasePath(uploadId)}/cancel`);\n  }\n\n  /**\n   * Get an upload\n   * @param {string} uploadId - The ID for the upload\n   * @returns {Promise} - Returns a resolved Promise with a response from the Mux API\n   *\n   * @example\n   * const { Video } = new Mux(accessToken, secret);\n   *\n   * // Get an asset\n   * Video.Uploads.get(uploadId);\n   *\n   * @see https://docs.mux.com/reference#retrieve-an-asset\n   */\n  get(uploadId) {\n    if (!uploadId) {\n      return Promise.reject(\n        new Error('An upload ID is required to get an asset')\n      );\n    }\n    return this.http.get(buildBasePath(uploadId));\n  }\n}\n\nmodule.exports = Uploads;\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/src/video/resources/uploads.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 174,
    "kind": "variable",
    "name": "PATH",
    "memberof": "src/video/resources/uploads.js",
    "static": true,
    "longname": "src/video/resources/uploads.js~PATH",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/video/resources/uploads.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 175,
    "kind": "function",
    "name": "buildBasePath",
    "memberof": "src/video/resources/uploads.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/video/resources/uploads.js~buildBasePath",
    "access": "private",
    "export": false,
    "importPath": "@mux/mux-node/src/video/resources/uploads.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 16,
    "params": [
      {
        "name": "uploadId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 176,
    "kind": "class",
    "name": "Uploads",
    "memberof": "src/video/resources/uploads.js",
    "static": true,
    "longname": "src/video/resources/uploads.js~Uploads",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/video/resources/uploads.js",
    "importStyle": "Uploads",
    "description": "Uploads Class - Provides access to the Mux Video Uploads API",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Create an upload\nVideo.Uploads.create({ new_asset_settings: { playback_policy: 'public' } });"
    ],
    "lineNumber": 27,
    "interface": false,
    "extends": [
      "src/base.js~Base"
    ]
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "create",
    "memberof": "src/video/resources/uploads.js~Uploads",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/uploads.js~Uploads#create",
    "access": "public",
    "description": "Creates a direct upload with the specified JSON parameters",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Video } = muxClient;\n\n// Create a new upload\nconst upload = await Video.Uploads.create({new_asset_settings: {playback_policy: 'public'}});\n// Now push a file to the URL returned.\nfs.createReadStream(pathToFile).pipe(request.put(upload.url))"
    ],
    "see": [
      "https://docs.mux.com/reference#upload-an-asset"
    ],
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@extends",
        "tagValue": "Base"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Upload JSON parameters (e.g timeout)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "cancel",
    "memberof": "src/video/resources/uploads.js~Uploads",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/uploads.js~Uploads#cancel",
    "access": "public",
    "description": "Cancels an upload",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Delete an upload\nVideo.Uploads.cancel(uploadId);"
    ],
    "see": [
      "https://docs.mux.com/reference#delete-an-asset"
    ],
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "uploadId",
        "description": "The ID for the upload intended for cancellation"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "get",
    "memberof": "src/video/resources/uploads.js~Uploads",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/resources/uploads.js~Uploads#get",
    "access": "public",
    "description": "Get an upload",
    "examples": [
      "const { Video } = new Mux(accessToken, secret);\n\n// Get an asset\nVideo.Uploads.get(uploadId);"
    ],
    "see": [
      "https://docs.mux.com/reference#retrieve-an-asset"
    ],
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Returns a resolved Promise with a response from the Mux API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "uploadId",
        "description": "The ID for the upload"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a resolved Promise with a response from the Mux API"
    }
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "src/video/video.js",
    "content": "/*!\n * Mux Video\n * Copyright(c) 2018 Mux Inc.\n */\n\nconst Assets = require('./resources/assets');\nconst Base = require('../base');\nconst LiveStreams = require('./resources/liveStreams');\nconst Uploads = require('./resources/uploads');\nconst SigningKeys = require('./resources/signingKeys');\nconst DeliveryUsage = require('./resources/deliveryUsage');\n\n/**\n * @ignore\n * @extends Base\n * Video Class - Provides access to the Mux Video API\n *\n * @example\n * const muxClient = new Mux(accessToken, secret);\n * const { Video } = muxClient;\n *\n * // Create an asset\n * Video.Assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});\n *\n * // Create an asset playback ID\n * Video.Assets.createPlaybackId(assetId, { policy: 'public' });\n */\nclass Video extends Base {\n  /**\n   * Video Constructor\n   *\n   * @param {string} accessToken - Mux API Access Token\n   * @param {string} secret - Mux API secret\n   * @constructor\n   */\n  constructor(...params) {\n    super(...params);\n\n    /** @type {Assets} */\n    this.Assets = new Assets(this);\n\n    /** @type {LiveStreams} */\n    this.LiveStreams = new LiveStreams(this);\n\n    /** @Type {Uploads} */\n    this.Uploads = new Uploads(this);\n\n    /** @Type {SigningKeys} */\n    this.SigningKeys = new SigningKeys(this);\n\n    /** @Type {DeliveryUsage} */\n    this.DeliveryUsage = new DeliveryUsage(this);\n  }\n}\n\nmodule.exports = Video;\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/src/video/video.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "class",
    "name": "Video",
    "memberof": "src/video/video.js",
    "static": true,
    "longname": "src/video/video.js~Video",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/video/video.js",
    "importStyle": "Video",
    "description": "",
    "examples": [
      "const muxClient = new Mux(accessToken, secret);\nconst { Video } = muxClient;\n\n// Create an asset\nVideo.Assets.create({input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4'});\n\n// Create an asset playback ID\nVideo.Assets.createPlaybackId(assetId, { policy: 'public' });"
    ],
    "lineNumber": 28,
    "ignore": true,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 182,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/video/video.js~Video",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/video/video.js~Video#constructor",
    "access": "public",
    "description": "Video Constructor",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accessToken",
        "description": "Mux API Access Token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "secret",
        "description": "Mux API secret"
      }
    ]
  },
  {
    "__docId__": 183,
    "kind": "member",
    "name": "Assets",
    "memberof": "src/video/video.js~Video",
    "static": false,
    "longname": "src/video/video.js~Video#Assets",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Assets"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 184,
    "kind": "member",
    "name": "LiveStreams",
    "memberof": "src/video/video.js~Video",
    "static": false,
    "longname": "src/video/video.js~Video#LiveStreams",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "LiveStreams"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 185,
    "kind": "member",
    "name": "Uploads",
    "memberof": "src/video/video.js~Video",
    "static": false,
    "longname": "src/video/video.js~Video#Uploads",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@Type",
        "tagValue": "{Uploads}"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "SigningKeys",
    "memberof": "src/video/video.js~Video",
    "static": false,
    "longname": "src/video/video.js~Video#SigningKeys",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@Type",
        "tagValue": "{SigningKeys}"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "DeliveryUsage",
    "memberof": "src/video/video.js~Video",
    "static": false,
    "longname": "src/video/video.js~Video#DeliveryUsage",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@Type",
        "tagValue": "{DeliveryUsage}"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "file",
    "name": "src/webhooks/resources/verify_header.js",
    "content": "const crypto = require('crypto');\n\nconst DEFAULT_TOLERANCE = 300; // 5 minutes\nconst EXPECTED_SCHEME = 'v1';\n\n/**\n * Secure compare, from https://github.com/freewil/scmp\n */\nfunction secureCompare(_a, _b) {\n  const a = Buffer.from(_a);\n  const b = Buffer.from(_b);\n\n  // return early here if buffer lengths are not equal since timingSafeEqual\n  // will throw if buffer lengths are not equal\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  // use crypto.timingSafeEqual if available (since Node.js v6.6.0),\n  // otherwise use our own scmp-internal function.\n  if (crypto.timingSafeEqual) {\n    return crypto.timingSafeEqual(a, b);\n  }\n\n  const len = a.length;\n  let result = 0;\n\n  for (let i = 0; i < len; i += 1) {\n    /* eslint-disable no-bitwise */\n    result |= a[i] ^ b[i];\n  }\n  return result === 0;\n}\n\nclass VerifyHeader {\n  static parseHeader(header, scheme = EXPECTED_SCHEME) {\n    if (typeof header !== 'string') {\n      return null;\n    }\n\n    return header.split(',').reduce(\n      (accum, item) => {\n        const kv = item.split('=');\n\n        if (kv[0] === 't') {\n          /* eslint-disable no-param-reassign, prefer-destructuring */\n          accum.timestamp = kv[1];\n        }\n\n        if (kv[0] === scheme) {\n          accum.signatures.push(kv[1]);\n        }\n\n        return accum;\n      },\n      {\n        timestamp: -1,\n        signatures: [],\n      }\n    );\n  }\n\n  static computeSignature(payload, secret) {\n    return crypto\n      .createHmac('sha256', secret)\n      .update(payload, 'utf8')\n      .digest('hex');\n  }\n\n  static verify(_payload, _header, secret, tolerance = DEFAULT_TOLERANCE) {\n    const payload = Buffer.isBuffer(_payload)\n      ? _payload.toString('utf8')\n      : _payload;\n    const header = Buffer.isBuffer(_header)\n      ? _header.toString('utf8')\n      : _header;\n\n    const details = this.parseHeader(header);\n\n    if (!details || details.timestamp === -1) {\n      throw new Error('Unable to extract timestamp and signatures from header');\n    }\n\n    if (!details.signatures.length) {\n      throw new Error('No signatures found with expected scheme');\n    }\n\n    const expectedSignature = this.computeSignature(\n      `${details.timestamp}.${payload}`,\n      secret\n    );\n\n    const signatureFound = !!details.signatures.filter(sig =>\n      secureCompare(sig, expectedSignature)\n    ).length;\n\n    if (!signatureFound) {\n      throw new Error(\n        'No signatures found matching the expected signature for payload.'\n      );\n    }\n\n    const timestampAge = Math.floor(Date.now() / 1000) - details.timestamp;\n\n    if (tolerance > 0 && timestampAge > tolerance) {\n      throw new Error('Timestamp outside the tolerance zone');\n    }\n\n    return true;\n  }\n}\n\nmodule.exports = VerifyHeader;\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/src/webhooks/resources/verify_header.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 189,
    "kind": "variable",
    "name": "DEFAULT_TOLERANCE",
    "memberof": "src/webhooks/resources/verify_header.js",
    "static": true,
    "longname": "src/webhooks/resources/verify_header.js~DEFAULT_TOLERANCE",
    "access": "public",
    "export": false,
    "importPath": "@mux/mux-node/src/webhooks/resources/verify_header.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 190,
    "kind": "variable",
    "name": "EXPECTED_SCHEME",
    "memberof": "src/webhooks/resources/verify_header.js",
    "static": true,
    "longname": "src/webhooks/resources/verify_header.js~EXPECTED_SCHEME",
    "access": "public",
    "export": false,
    "importPath": "@mux/mux-node/src/webhooks/resources/verify_header.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 191,
    "kind": "function",
    "name": "secureCompare",
    "memberof": "src/webhooks/resources/verify_header.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/webhooks/resources/verify_header.js~secureCompare",
    "access": "public",
    "export": false,
    "importPath": "@mux/mux-node/src/webhooks/resources/verify_header.js",
    "importStyle": null,
    "description": "Secure compare, from https://github.com/freewil/scmp",
    "lineNumber": 9,
    "params": [
      {
        "name": "_a",
        "types": [
          "*"
        ]
      },
      {
        "name": "_b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 192,
    "kind": "class",
    "name": "VerifyHeader",
    "memberof": "src/webhooks/resources/verify_header.js",
    "static": true,
    "longname": "src/webhooks/resources/verify_header.js~VerifyHeader",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/webhooks/resources/verify_header.js",
    "importStyle": "VerifyHeader",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "parseHeader",
    "memberof": "src/webhooks/resources/verify_header.js~VerifyHeader",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/webhooks/resources/verify_header.js~VerifyHeader.parseHeader",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "header",
        "types": [
          "*"
        ]
      },
      {
        "name": "scheme",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": "EXPECTED_SCHEME",
        "defaultValue": "EXPECTED_SCHEME"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "computeSignature",
    "memberof": "src/webhooks/resources/verify_header.js~VerifyHeader",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/webhooks/resources/verify_header.js~VerifyHeader.computeSignature",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [
      {
        "name": "payload",
        "types": [
          "*"
        ]
      },
      {
        "name": "secret",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "verify",
    "memberof": "src/webhooks/resources/verify_header.js~VerifyHeader",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/webhooks/resources/verify_header.js~VerifyHeader.verify",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "_payload",
        "types": [
          "*"
        ]
      },
      {
        "name": "_header",
        "types": [
          "*"
        ]
      },
      {
        "name": "secret",
        "types": [
          "*"
        ]
      },
      {
        "name": "tolerance",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": "DEFAULT_TOLERANCE",
        "defaultValue": "DEFAULT_TOLERANCE"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "file",
    "name": "src/webhooks/webhooks.js",
    "content": "const VerifyHeader = require('./resources/verify_header');\n\n/**\n * Webhooks - Provides access to the Mux Webhooks signature verification\n *\n * @example\n * const Mux = require('@mux/mux-node');\n * const { Webhooks } = Mux;\n *\n * // Verify a webhook signature\n * Webhooks.verifyHeader(body, signature, secret);\n *\n */\nclass Webhooks {\n  /**\n   * Verify a webhook signature. When enabled, Mux will send webhooks with a signature\n   * in the http request header 'Mux-Signature'. You can use that signature to verify\n   * that the webhook is indeed coming from Mux.\n   *\n   * @param {string} body - The raw request body from Mux. This is stringified JSON.\n   * @param {string} signature - The signature that was in the request header.\n   * @param {string} secret - The webhook signing secret (get this from your dashboard).\n   * @returns {boolean} - Returns true if the signature is verified.\n   *\n   * @throws {Error} throw error when a webhook signature verification fails.\n   *\n   * @example\n   * const Mux = require('@mux/mux-node');\n   * const { Webhooks } = Mux;\n   *\n   * // Verify a webhook signature\n   * Webhooks.verifyHeader(body, signature, secret);\n   *\n   * @see https://docs.mux.com/docs/webhook-security\n   */\n  static verifyHeader(...args) {\n    return VerifyHeader.verify(...args);\n  }\n}\n\nmodule.exports = Webhooks;\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/src/webhooks/webhooks.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 197,
    "kind": "class",
    "name": "Webhooks",
    "memberof": "src/webhooks/webhooks.js",
    "static": true,
    "longname": "src/webhooks/webhooks.js~Webhooks",
    "access": "public",
    "export": true,
    "importPath": "@mux/mux-node/src/webhooks/webhooks.js",
    "importStyle": "Webhooks",
    "description": "Webhooks - Provides access to the Mux Webhooks signature verification",
    "examples": [
      "const Mux = require('@mux/mux-node');\nconst { Webhooks } = Mux;\n\n// Verify a webhook signature\nWebhooks.verifyHeader(body, signature, secret);"
    ],
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "verifyHeader",
    "memberof": "src/webhooks/webhooks.js~Webhooks",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/webhooks/webhooks.js~Webhooks.verifyHeader",
    "access": "public",
    "description": "Verify a webhook signature. When enabled, Mux will send webhooks with a signature\nin the http request header 'Mux-Signature'. You can use that signature to verify\nthat the webhook is indeed coming from Mux.",
    "examples": [
      "const Mux = require('@mux/mux-node');\nconst { Webhooks } = Mux;\n\n// Verify a webhook signature\nWebhooks.verifyHeader(body, signature, secret);"
    ],
    "see": [
      "https://docs.mux.com/docs/webhook-security"
    ],
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - Returns true if the signature is verified."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The raw request body from Mux. This is stringified JSON."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "signature",
        "description": "The signature that was in the request header."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "secret",
        "description": "The webhook signing secret (get this from your dashboard)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true if the signature is verified."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "throw error when a webhook signature verification fails."
      }
    ]
  },
  {
    "kind": "index",
    "content": "![Mux Node Banner](github-nodejs-sdk.png)\n\n# Mux Node\n\n![build status](https://api.travis-ci.org/muxinc/mux-node-sdk.svg?branch=master) ![npm version](https://badge.fury.io/js/%40mux%2Fmux-node.svg)\n\nOfficial Mux API wrapper for Node projects, supporting both Mux Data and Mux Video.\n\n[Mux Video](https://mux.com/video) is an API-first platform, powered by data and designed by video experts to make beautiful video possible for every development team.\n\n[Mux Data](https://mux.com/data) is a platform for monitoring your video streaming performance with just a few lines of code. Get in-depth quality of service analytics on web, mobile, and OTT devices.\n\nThis library is intended to provide Mux API convenience methods for applications written in server-side Javascript. **Please note** that this package uses Mux access tokens and secret keys and is intended to be used in server-side code only.\n\nNot familiar with Mux? Check out https://mux.com/ for more information.\n\n## Documentation\n\nSee the [Mux-Node docs](https://muxinc.github.io/mux-node-sdk)\n\n## Installation\n\n```\nnpm install @mux/mux-node --save\n```\n\nor\n\n```\nyarn add @mux/mux-node\n```\n\n## Usage\n\nTo start, you will need a Mux access token and secret for your Mux environment. For more information on where to get\nan access token, visit the Mux Getting Started guide https://docs.mux.com/docs\n\nRequire the `@mux/mux-node` npm module and create a Mux instance. Your Mux instance will have `Data` and `Video` properties\nthat will allow you to access the Mux Data and Video APIs.\n\n```javascript\nconst Mux = require('@mux/mux-node');\nconst { Video, Data } = new Mux(accessToken, secret);\n```\n\nIf a token ID and secret aren't included as parameters, the SDK will attempt to use the `MUX_TOKEN_ID` and `MUX_TOKEN_SECRET` environment variables.\n\n```javascript\n// assume process.env.MUX_TOKEN_ID and process.env.MUX_TOKEN_SECRET contain your credentials\nconst muxClient = new Mux(); // Success!\n```\n\nAs an example, you can create a Mux asset and playback ID by using the below functions on your Video instance.\n\n```javascript\n// Create an asset\nconst asset = await Video.Assets.create({\n  input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4',\n});\n```\n\n```javascript\n// ...then later, a playback ID for that asset\nconst playbackId = await Video.Assets.createPlaybackId(asset.id, {\n  policy: 'public',\n});\n```\n\nOr, if you don't have the files online already, you can ingest one via the direct uploads API.\n\n```javascript\nconst request = require('request');\nlet upload = await Video.Uploads.create({\n  new_asset_settings: { playback_policy: 'public' },\n});\n\n// The URL you get back from the upload API is resumable, and the file can be uploaded using a `PUT` request (or a series of them).\nawait fs.createReadStream('/path/to/your/file').pipe(request.put(upload.url));\n\n// The upload may not be updated immediately, but shortly after the upload is finished you'll get a `video.asset.created` event and the upload will now have a status of `asset_created` and a new `asset_id` key.\nlet updatedUpload = await Video.Uploads.get(upload.id);\n\n// Or you could decide to go get additional information about that new asset you created.\nlet asset = await Video.Assets.get(updatedUpload['asset_id']);\n```\n\nYou can access the Mux Data API in the same way by using your Data instance. For example, you can list all of the\nvalues across every breakdown for the `aggregate_startup_time` metric by using the below function.\n\n```javascript\nconst breakdown = await Data.Metrics.breakdown('aggregate_startup_time', {\n  group_by: 'browser',\n});\n```\n\n## Usage Details\n\nEvery function will return a chainable [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\n```javascript\nVideo.Assets.create({\n  input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4',\n}).then(asset => {\n  /* Do things with the asset */\n});\n```\n\n## Verifying Webhook Signatures\n\nVerifying Webhook Signatures is *optional*. Learn more in our [Webhook Security Guide](https://docs.mux.com/docs/webhook-security)\n\n\n```javascript\n/*\n  If the header is valid, this will return `true`\n  If invalid, this will throw one of the following errors:\n    * new Error('Unable to extract timestamp and signatures from header')\n    * new Error('No signatures found with expected scheme');\n    * new Error('No signatures found matching the expected signature for payload.')\n    * new Error('Timestamp outside the tolerance zone')\n*/\n\n/*\n  `payload` is the raw request body. It should be a string representation of a JSON object.\n  `header` is the value in request.headers['mux-signature']\n  `secret` is the signing secret for this configured webhook. You can find that in your webhooks dashboard\n           (note that this secret is different than your API Secret Key)\n*/\n\nMux.Webhooks.verifyHeader(payload, header, secret);\n```\n\nNote that when passing in the payload you want to pass in the raw un-parsed request body, not the parsed JSON.\nHere's an example if you are using express.\n\n```javascript\nconst Mux = require('@mux/mux-node');\nconst { Webhooks } = Mux;\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\n/**\n * You'll need to make sure this is externally accessible.  ngrok (https://ngrok.com/)\n * makes this really easy.\n */\n\nconst webhookSecret = process.env.WEBHOOK_SECRET;\nconst app = express();\n\napp.post(\n  '/webhooks',\n  bodyParser.raw({type: 'application/json'}),\n  async (req, res) => {\n    try {\n      const sig = req.headers['mux-signature'];\n      // returns a `boolean` with value `true` if the signature is valid\n      const isValidSignature = Webhooks.verifyHeader(req.body, sig, webhookSecret);\n      console.log('Success:', isValidSignature);\n      // convert the raw req.body to JSON, which is originally Buffer (raw)\n      const jsonFormattedBody = JSON.parse(req.body);\n      // await doSomething();\n      res.json({received: true});\n    } catch (err) {\n      // On error, return the error message\n      return res.status(400).send(`Webhook Error: ${err.message}`);\n    }\n   }\n);\n\napp.listen(3000, () => {\n  console.log('Example app listening on port 3000!');\n});\n```\n\n## JWT Helpers <small>([API Reference](https://muxinc.github.io/mux-node-sdk/class/src/utils/jwt.js~JWT.html))</small>\n\nYou can use any JWT-compatible library, but we've included some light helpers in the SDK to make it easier to get up and running.\n\n```javascript\n// Assuming you have your signing key specified in your environment variables:\n// Signing token ID: process.env.MUX_SIGNING_KEY\n// Signing token secret: process.env.MUX_PRIVATE_KEY\n\n// Most simple request, defaults to type video and is valid for 7 days.\nconst token = Mux.JWT.sign('some-playback-id');\n// https://stream.mux.com/some-playback-id.m3u8?token=${token}\n\n// If you wanted to sign a thumbnail\nconst thumbParams = { time: 14, width: 100 }\nconst thumbToken = Mux.JWT.sign('some-playback-id', { type: 'thumbnail', params: thumbParams });\n// https://image.mux.com/some-playback-id/thumbnail.jpg?token=${token}\n\n// If you wanted to sign a gif\nconst gifToken = Mux.JWT.sign('some-playback-id', { type: 'gif' });\n// https://image.mux.com/some-playback-id/animated.gif?token=${token}\n```\n\n## `request` and `response` events\n\nThe SDK returns the `data` key for every object, because in the Mux API that's always the thing you actually want to see. Sometimes, however, it's useful to see more details about the request being made or the full response object. You can listen for `request` and `response` events to get these raw objects.\n\n```javascript\nmuxClient.on('request', req => {\n  // Request will contain everything being sent such as `headers, method, base url, etc\n});\n\nmuxClient.on('response', res => {\n  // Response will include everything returned from the API, such as status codes/text, headers, etc\n});\n```\n\nSee the [Mux-Node docs](https://muxinc.github.io/mux-node-sdk/identifiers.html) for a list of all available functions.\n\n## Development\n\nRun unit tests: `yarn test` or `yarn test:unit`\n\nRun integration tests: `yarn test:int` - this will run integration tests with `nock` and `NOCK_BACK_MODE` set to `record`. This means that previously recorded API requests will be stubbed and any missing ones will be recorded.\n\nYou can also run integration tests with real requests by running `yarn test:int:wild`. Make sure you have `MUX_TOKEN_ID` and `MUX_TOKEN_SECRET` set as environment variables so your requests are authenticated. This is useful to run locally to verify that actual API requests work as expected. When running the whole suite locally you might run into Mux API rate limits so keep that in mind.\n\n**Pro Tip** Use mocha `-g` option to run only a specific test or group of tests. For example: `yarn test -g 'creates a new Assets'`.\n\nTo generate the ESDocs, run:\n\n```\nyarn esdoc\nopen ./docs/index.html\n```\n\n## Contributing\n\nFind a bug or want to add a useful feature? That'd be amazing! If you'd like to submit a [pull request](https://help.github.com/articles/about-pull-requests/) to the project with changes, please do something along these lines:\n\n1. Fork the project wherever you'd like\n2. Create a meaningful branch name that relates to your contribution. Consider including an issue number if available. `git co -b add-node-lts-support`\n3. Make any changes you'd like in your forked branch.\n4. Add any relevant tests for your changes\n5. Open the pull request! :tada:\n\nRunning integration tests will require a Mux account with valid seed data for `/video` and `/data` endpoints. If you are contributing and you don't have this, please add unit test coverage and someone from the Mux will help get integration tests added if necessary.\n\n",
    "longname": "/home/travis/build/muxinc/mux-node-sdk/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@mux/mux-node\",\n  \"version\": \"3.0.4\",\n  \"description\": \"Mux API wrapper\",\n  \"keywords\": [\n    \"mux\",\n    \"video\",\n    \"video encoding\",\n    \"video transcoding\",\n    \"api\",\n    \"video analytics\",\n    \"live streaming\"\n  ],\n  \"author\": \"Mux <help@mux.com> (https://mux.com/)\",\n  \"main\": \"src/mux.js\",\n  \"engines\": {\n    \"node\": \">=10\"\n  },\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"docs\": \"esdoc\",\n    \"test\": \"yarn mocha --recursive ./test\",\n    \"test:unit\": \"mocha --recursive ./test/unit\",\n    \"test:int\": \"NOCK_BACK_MODE=record mocha --recursive ./test/integration --timeout 10000\",\n    \"test:int:wild\": \"NOCK_BACK_MODE=wild mocha --recursive ./test/integration --timeout 10000\",\n    \"format\": \"eslint src/** test/** types/** --no-error-on-unmatched-pattern\",\n    \"lint\": \"yarn format\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^0.18.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"jsonwebtoken\": \"^8.4.0\"\n  },\n  \"devDependencies\": {\n    \"@typescript-eslint/eslint-plugin\": \"^3.0.1\",\n    \"@typescript-eslint/parser\": \"^3.0.1\",\n    \"chai\": \"^4.1.2\",\n    \"esdoc\": \"^1.0.4\",\n    \"esdoc-node\": \"^1.0.3\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^7.1.0\",\n    \"eslint-config-airbnb-base\": \"^12.1.0\",\n    \"eslint-config-prettier\": \"^3.3.0\",\n    \"eslint-plugin-chai-friendly\": \"^0.4.1\",\n    \"eslint-plugin-import\": \"^2.9.0\",\n    \"eslint-plugin-node\": \"^6.0.1\",\n    \"eslint-plugin-prettier\": \"^3.0.0\",\n    \"mocha\": \"^8.0.1\",\n    \"moxios\": \"^0.4.0\",\n    \"nock\": \"^12.0.3\",\n    \"prettier\": \"^1.15.3\",\n    \"sinon\": \"^4.5.0\",\n    \"typescript\": \"^3.8.3\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/muxinc/mux-node-sdk.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/muxinc/mux-node-sdk/issues\"\n  },\n  \"homepage\": \"https://github.com/muxinc/mux-node-sdk#readme\",\n  \"types\": \"types/mux.d.ts\"\n}\n",
    "longname": "/home/travis/build/muxinc/mux-node-sdk/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "![Mux Node Banner](github-nodejs-sdk.png)\n\n# Mux Node\n\n![build status](https://api.travis-ci.org/muxinc/mux-node-sdk.svg?branch=master) ![npm version](https://badge.fury.io/js/%40mux%2Fmux-node.svg)\n\nOfficial Mux API wrapper for Node projects, supporting both Mux Data and Mux Video.\n\n[Mux Video](https://mux.com/video) is an API-first platform, powered by data and designed by video experts to make beautiful video possible for every development team.\n\n[Mux Data](https://mux.com/data) is a platform for monitoring your video streaming performance with just a few lines of code. Get in-depth quality of service analytics on web, mobile, and OTT devices.\n\nThis library is intended to provide Mux API convenience methods for applications written in server-side Javascript. **Please note** that this package uses Mux access tokens and secret keys and is intended to be used in server-side code only.\n\nNot familiar with Mux? Check out https://mux.com/ for more information.\n\n## Documentation\n\nSee the [Mux-Node docs](https://muxinc.github.io/mux-node-sdk)\n\n## Installation\n\n```\nnpm install @mux/mux-node --save\n```\n\nor\n\n```\nyarn add @mux/mux-node\n```\n\n## Usage\n\nTo start, you will need a Mux access token and secret for your Mux environment. For more information on where to get\nan access token, visit the Mux Getting Started guide https://docs.mux.com/docs\n\nRequire the `@mux/mux-node` npm module and create a Mux instance. Your Mux instance will have `Data` and `Video` properties\nthat will allow you to access the Mux Data and Video APIs.\n\n```javascript\nconst Mux = require('@mux/mux-node');\nconst { Video, Data } = new Mux(accessToken, secret);\n```\n\nIf a token ID and secret aren't included as parameters, the SDK will attempt to use the `MUX_TOKEN_ID` and `MUX_TOKEN_SECRET` environment variables.\n\n```javascript\n// assume process.env.MUX_TOKEN_ID and process.env.MUX_TOKEN_SECRET contain your credentials\nconst muxClient = new Mux(); // Success!\n```\n\nAs an example, you can create a Mux asset and playback ID by using the below functions on your Video instance.\n\n```javascript\n// Create an asset\nconst asset = await Video.Assets.create({\n  input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4',\n});\n```\n\n```javascript\n// ...then later, a playback ID for that asset\nconst playbackId = await Video.Assets.createPlaybackId(asset.id, {\n  policy: 'public',\n});\n```\n\nOr, if you don't have the files online already, you can ingest one via the direct uploads API.\n\n```javascript\nconst request = require('request');\nlet upload = await Video.Uploads.create({\n  new_asset_settings: { playback_policy: 'public' },\n});\n\n// The URL you get back from the upload API is resumable, and the file can be uploaded using a `PUT` request (or a series of them).\nawait fs.createReadStream('/path/to/your/file').pipe(request.put(upload.url));\n\n// The upload may not be updated immediately, but shortly after the upload is finished you'll get a `video.asset.created` event and the upload will now have a status of `asset_created` and a new `asset_id` key.\nlet updatedUpload = await Video.Uploads.get(upload.id);\n\n// Or you could decide to go get additional information about that new asset you created.\nlet asset = await Video.Assets.get(updatedUpload['asset_id']);\n```\n\nYou can access the Mux Data API in the same way by using your Data instance. For example, you can list all of the\nvalues across every breakdown for the `aggregate_startup_time` metric by using the below function.\n\n```javascript\nconst breakdown = await Data.Metrics.breakdown('aggregate_startup_time', {\n  group_by: 'browser',\n});\n```\n\n## Usage Details\n\nEvery function will return a chainable [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\n```javascript\nVideo.Assets.create({\n  input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4',\n}).then(asset => {\n  /* Do things with the asset */\n});\n```\n\n## Verifying Webhook Signatures\n\nVerifying Webhook Signatures is *optional*. Learn more in our [Webhook Security Guide](https://docs.mux.com/docs/webhook-security)\n\n\n```javascript\n/*\n  If the header is valid, this will return `true`\n  If invalid, this will throw one of the following errors:\n    * new Error('Unable to extract timestamp and signatures from header')\n    * new Error('No signatures found with expected scheme');\n    * new Error('No signatures found matching the expected signature for payload.')\n    * new Error('Timestamp outside the tolerance zone')\n*/\n\n/*\n  `payload` is the raw request body. It should be a string representation of a JSON object.\n  `header` is the value in request.headers['mux-signature']\n  `secret` is the signing secret for this configured webhook. You can find that in your webhooks dashboard\n           (note that this secret is different than your API Secret Key)\n*/\n\nMux.Webhooks.verifyHeader(payload, header, secret);\n```\n\nNote that when passing in the payload you want to pass in the raw un-parsed request body, not the parsed JSON.\nHere's an example if you are using express.\n\n```javascript\nconst Mux = require('@mux/mux-node');\nconst { Webhooks } = Mux;\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\n/**\n * You'll need to make sure this is externally accessible.  ngrok (https://ngrok.com/)\n * makes this really easy.\n */\n\nconst webhookSecret = process.env.WEBHOOK_SECRET;\nconst app = express();\n\napp.post(\n  '/webhooks',\n  bodyParser.raw({type: 'application/json'}),\n  async (req, res) => {\n    try {\n      const sig = req.headers['mux-signature'];\n      // returns a `boolean` with value `true` if the signature is valid\n      const isValidSignature = Webhooks.verifyHeader(req.body, sig, webhookSecret);\n      console.log('Success:', isValidSignature);\n      // convert the raw req.body to JSON, which is originally Buffer (raw)\n      const jsonFormattedBody = JSON.parse(req.body);\n      // await doSomething();\n      res.json({received: true});\n    } catch (err) {\n      // On error, return the error message\n      return res.status(400).send(`Webhook Error: ${err.message}`);\n    }\n   }\n);\n\napp.listen(3000, () => {\n  console.log('Example app listening on port 3000!');\n});\n```\n\n## JWT Helpers <small>([API Reference](https://muxinc.github.io/mux-node-sdk/class/src/utils/jwt.js~JWT.html))</small>\n\nYou can use any JWT-compatible library, but we've included some light helpers in the SDK to make it easier to get up and running.\n\n```javascript\n// Assuming you have your signing key specified in your environment variables:\n// Signing token ID: process.env.MUX_SIGNING_KEY\n// Signing token secret: process.env.MUX_PRIVATE_KEY\n\n// Most simple request, defaults to type video and is valid for 7 days.\nconst token = Mux.JWT.sign('some-playback-id');\n// https://stream.mux.com/some-playback-id.m3u8?token=${token}\n\n// If you wanted to sign a thumbnail\nconst thumbParams = { time: 14, width: 100 }\nconst thumbToken = Mux.JWT.sign('some-playback-id', { type: 'thumbnail', params: thumbParams });\n// https://image.mux.com/some-playback-id/thumbnail.jpg?token=${token}\n\n// If you wanted to sign a gif\nconst gifToken = Mux.JWT.sign('some-playback-id', { type: 'gif' });\n// https://image.mux.com/some-playback-id/animated.gif?token=${token}\n```\n\n## `request` and `response` events\n\nThe SDK returns the `data` key for every object, because in the Mux API that's always the thing you actually want to see. Sometimes, however, it's useful to see more details about the request being made or the full response object. You can listen for `request` and `response` events to get these raw objects.\n\n```javascript\nmuxClient.on('request', req => {\n  // Request will contain everything being sent such as `headers, method, base url, etc\n});\n\nmuxClient.on('response', res => {\n  // Response will include everything returned from the API, such as status codes/text, headers, etc\n});\n```\n\nSee the [Mux-Node docs](https://muxinc.github.io/mux-node-sdk/identifiers.html) for a list of all available functions.\n\n## Development\n\nRun unit tests: `yarn test` or `yarn test:unit`\n\nRun integration tests: `yarn test:int` - this will run integration tests with `nock` and `NOCK_BACK_MODE` set to `record`. This means that previously recorded API requests will be stubbed and any missing ones will be recorded.\n\nYou can also run integration tests with real requests by running `yarn test:int:wild`. Make sure you have `MUX_TOKEN_ID` and `MUX_TOKEN_SECRET` set as environment variables so your requests are authenticated. This is useful to run locally to verify that actual API requests work as expected. When running the whole suite locally you might run into Mux API rate limits so keep that in mind.\n\n**Pro Tip** Use mocha `-g` option to run only a specific test or group of tests. For example: `yarn test -g 'creates a new Assets'`.\n\nTo generate the ESDocs, run:\n\n```\nyarn esdoc\nopen ./docs/index.html\n```\n\n## Contributing\n\nFind a bug or want to add a useful feature? That'd be amazing! If you'd like to submit a [pull request](https://help.github.com/articles/about-pull-requests/) to the project with changes, please do something along these lines:\n\n1. Fork the project wherever you'd like\n2. Create a meaningful branch name that relates to your contribution. Consider including an issue number if available. `git co -b add-node-lts-support`\n3. Make any changes you'd like in your forked branch.\n4. Add any relevant tests for your changes\n5. Open the pull request! :tada:\n\nRunning integration tests will require a Mux account with valid seed data for `/video` and `/data` endpoints. If you are contributing and you don't have this, please add unit test coverage and someone from the Mux will help get integration tests added if necessary.\n\n",
    "longname": "/home/travis/build/muxinc/mux-node-sdk/manual/index.md",
    "name": "./manual/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/travis/build/muxinc/mux-node-sdk/manual/overview.md",
    "name": "./manual/overview.md",
    "content": "test overview\n",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 199,
    "kind": "testFile",
    "name": "test/unit/base.spec.js",
    "content": "const { expect } = require('chai');\nconst moxios = require('moxios');\nconst Base = require('../../src/base');\n\n/** @test {Mux} */\ndescribe('Unit::Base', () => {\n  /** @test {Base} */\n  describe('Base', () => {\n    /** @test {Base} */\n    it('allows configuration to be passed in as params', () => {\n      const baseClient = new Base('testKey', 'testSecret');\n      expect(baseClient.tokenId).to.be.eq('testKey');\n      expect(baseClient.tokenSecret).to.be.eq('testSecret');\n    });\n\n    it('allows configuration to be passed in via environment variables', () => {\n      process.env.MUX_TOKEN_ID = 'testKey';\n      process.env.MUX_TOKEN_SECRET = 'testSecret';\n      const baseClient = new Base();\n      expect(baseClient.tokenId).to.be.eq('testKey');\n      expect(baseClient.tokenSecret).to.be.eq('testSecret');\n    });\n\n    it('prioritizes params over environment variables', () => {\n      process.env.MUX_TOKEN_ID = 'crusty-old-id';\n      process.env.MUX_TOKEN_SECRET = 'crusty-old-secret';\n      const baseClient = new Base('fancy-new-id', 'fancy-new-secret');\n      expect(baseClient.tokenId).to.be.eq('fancy-new-id');\n      expect(baseClient.tokenSecret).to.be.eq('fancy-new-secret');\n    });\n\n    it('allows configuration to be passed in via the parent instance', () => {\n      const parentBase = new Base('testKey', 'testSecret');\n      const childBase = new Base(parentBase);\n      expect(childBase.tokenId).to.be.eq(parentBase.tokenId);\n      expect(childBase.tokenSecret).to.be.eq(parentBase.tokenSecret);\n    });\n\n    describe('http requests', () => {\n      let baseClient;\n\n      beforeEach(() => {\n        baseClient = new Base('fancy-new-id', 'fancy-new-secret');\n        moxios.install(baseClient.http);\n\n        moxios.stubRequest('https://api.mux.com/test/v1/foo', {\n          status: 200,\n          responseText: '{\"data\": [\"something\", \"very\", \"fun\"]}',\n        });\n      });\n\n      afterEach(() => {\n        delete process.env.MUX_TOKEN_ID;\n        delete process.env.MUX_TOKEN_SECRET;\n        moxios.uninstall(baseClient.http);\n      });\n\n      it('fire an event on a request', done => {\n        baseClient.on('request', req => {\n          expect(req.auth.username).to.equal('fancy-new-id');\n          expect(req.auth.password).to.equal('fancy-new-secret');\n          expect(req.baseURL).to.equal('https://api.mux.com');\n          expect(req.url).to.equal('/test/v1/foo');\n          done();\n        });\n\n        baseClient.http.get('/test/v1/foo');\n      });\n\n      it('fire an event on a response', done => {\n        baseClient.on('response', res => {\n          expect(res.status).to.equal(200);\n          expect(res.data).to.eql({ data: ['something', 'very', 'fun'] });\n          done();\n        });\n\n        baseClient.http.get('/test/v1/foo');\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/test/unit/base.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 200,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/unit/base.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/base.spec.js~describe0",
    "access": null,
    "description": "Unit::Base",
    "lineNumber": 6,
    "testTargets": [
      "Mux"
    ]
  },
  {
    "__docId__": 201,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "test/unit/base.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/base.spec.js~describe0.describe1",
    "access": null,
    "description": "Base",
    "lineNumber": 8,
    "testTargets": [
      "Base"
    ]
  },
  {
    "__docId__": 202,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "test/unit/base.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/base.spec.js~describe0.describe1.it2",
    "access": null,
    "description": "allows configuration to be passed in as params",
    "lineNumber": 10,
    "testTargets": [
      "Base"
    ]
  },
  {
    "__docId__": 203,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "test/unit/base.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/base.spec.js~describe0.describe1.it3",
    "access": null,
    "description": "allows configuration to be passed in via environment variables",
    "lineNumber": 16
  },
  {
    "__docId__": 204,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "test/unit/base.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/base.spec.js~describe0.describe1.it4",
    "access": null,
    "description": "prioritizes params over environment variables",
    "lineNumber": 24
  },
  {
    "__docId__": 205,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "test/unit/base.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/base.spec.js~describe0.describe1.it5",
    "access": null,
    "description": "allows configuration to be passed in via the parent instance",
    "lineNumber": 32
  },
  {
    "__docId__": 206,
    "kind": "test",
    "name": "describe6",
    "testId": 6,
    "memberof": "test/unit/base.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/base.spec.js~describe0.describe1.describe6",
    "access": null,
    "description": "http requests",
    "lineNumber": 39
  },
  {
    "__docId__": 207,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "test/unit/base.spec.js~describe0.describe1.describe6",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/base.spec.js~describe0.describe1.describe6.it7",
    "access": null,
    "description": "fire an event on a request",
    "lineNumber": 58
  },
  {
    "__docId__": 208,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "test/unit/base.spec.js~describe0.describe1.describe6",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/base.spec.js~describe0.describe1.describe6.it8",
    "access": null,
    "description": "fire an event on a response",
    "lineNumber": 70
  },
  {
    "__docId__": 209,
    "kind": "testFile",
    "name": "test/unit/data/data.spec.js",
    "content": "const { expect } = require('chai');\nconst Data = require('../../../src/data/data');\nconst Metrics = require('../../../src/data/resources/metrics');\nconst Filters = require('../../../src/data/resources/filters');\nconst Errors = require('../../../src/data/resources/errors');\nconst VideoViews = require('../../../src/data/resources/video_views');\nconst Exports = require('../../../src/data/resources/exports');\nconst Incidents = require('../../../src/data/resources/incidents');\n\n/** @test {Data} */\ndescribe('Unit::Data', () => {\n  const testApiKey = 'testApiKey';\n  const testSecret = 'testSecret';\n\n  /** @test {Data} */\n  describe('Data', () => {\n    /** @test {Data} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new Data()).to.throw('API Access Token must be provided.');\n    });\n\n    /** @test {Data} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new Data(testApiKey)).to.throw(\n        'API secret key must be provided'\n      );\n    });\n\n    /** @test {Data} */\n    it('creates a new Data instance', () => {\n      const TestData = new Data(testApiKey, testSecret);\n      expect(() => new Data(testApiKey, testSecret)).to.not.throw();\n      expect(TestData.Metrics).to.be.an.instanceof(Metrics);\n      expect(TestData.Errors).to.be.an.instanceof(Errors);\n      expect(TestData.Exports).to.be.an.instanceof(Exports);\n      expect(TestData.VideoViews).to.be.an.instanceof(VideoViews);\n      expect(TestData.Filters).to.be.an.instanceof(Filters);\n      expect(TestData.Incidents).to.be.an.instanceof(Incidents);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/test/unit/data/data.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 210,
    "kind": "test",
    "name": "describe9",
    "testId": 9,
    "memberof": "test/unit/data/data.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/data/data.spec.js~describe9",
    "access": null,
    "description": "Unit::Data",
    "lineNumber": 11,
    "testTargets": [
      "Data"
    ]
  },
  {
    "__docId__": 211,
    "kind": "test",
    "name": "describe10",
    "testId": 10,
    "memberof": "test/unit/data/data.spec.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/data.spec.js~describe9.describe10",
    "access": null,
    "description": "Data",
    "lineNumber": 16,
    "testTargets": [
      "Data"
    ]
  },
  {
    "__docId__": 212,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "test/unit/data/data.spec.js~describe9.describe10",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/data.spec.js~describe9.describe10.it11",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 18,
    "testTargets": [
      "Data"
    ]
  },
  {
    "__docId__": 213,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "test/unit/data/data.spec.js~describe9.describe10",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/data.spec.js~describe9.describe10.it12",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 23,
    "testTargets": [
      "Data"
    ]
  },
  {
    "__docId__": 214,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "test/unit/data/data.spec.js~describe9.describe10",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/data.spec.js~describe9.describe10.it13",
    "access": null,
    "description": "creates a new Data instance",
    "lineNumber": 30,
    "testTargets": [
      "Data"
    ]
  },
  {
    "__docId__": 215,
    "kind": "testFile",
    "name": "test/unit/data/resources/errors.spec.js",
    "content": "const { expect } = require('chai');\nconst moxios = require('moxios');\nconst sinon = require('sinon');\nconst Errors = require('../../../../src/data/resources/errors');\n\n/** @test {Errors} */\ndescribe('Unit::Errors', () => {\n  const testApiKey = 'testKey';\n  const testSecret = 'testSecret';\n  const errorsInstance = new Errors(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(errorsInstance.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(errorsInstance.http);\n  });\n\n  /** @test {Errors} */\n  describe('Errors', () => {\n    /** @test {Errors} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new Errors()).to.throw('API Access Token must be provided.');\n    });\n\n    /** @test {Errors} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new Errors(testApiKey)).to.throw(\n        'API secret key must be provided'\n      );\n    });\n\n    /** @test {Errors} */\n    it('creates a new Errors instance', () => {\n      const TestErrors = new Errors(testApiKey, testSecret);\n      expect(() => new Errors(testApiKey, testSecret)).to.not.throw();\n      expect(TestErrors.tokenId).to.equal(testApiKey);\n      expect(TestErrors.tokenSecret).to.equal(testSecret);\n    });\n  });\n\n  /** @test {Errors.list} */\n  describe('Errors.list', () => {\n    /** @test {Errors.list} */\n    it('makes a get request to the Mux data errors route', done => {\n      moxios.stubRequest('https://api.mux.com/data/v1/errors', {\n        status: 200,\n        responseText: '{\"data\": {\"errors\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      errorsInstance.list({}).then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].data.errors).to.be.true;\n        done();\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/test/unit/data/resources/errors.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 216,
    "kind": "test",
    "name": "describe14",
    "testId": 14,
    "memberof": "test/unit/data/resources/errors.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/data/resources/errors.spec.js~describe14",
    "access": null,
    "description": "Unit::Errors",
    "lineNumber": 7,
    "testTargets": [
      "Errors"
    ]
  },
  {
    "__docId__": 217,
    "kind": "test",
    "name": "describe15",
    "testId": 15,
    "memberof": "test/unit/data/resources/errors.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/errors.spec.js~describe14.describe15",
    "access": null,
    "description": "Errors",
    "lineNumber": 21,
    "testTargets": [
      "Errors"
    ]
  },
  {
    "__docId__": 218,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "test/unit/data/resources/errors.spec.js~describe14.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/errors.spec.js~describe14.describe15.it16",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 23,
    "testTargets": [
      "Errors"
    ]
  },
  {
    "__docId__": 219,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "test/unit/data/resources/errors.spec.js~describe14.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/errors.spec.js~describe14.describe15.it17",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 28,
    "testTargets": [
      "Errors"
    ]
  },
  {
    "__docId__": 220,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "test/unit/data/resources/errors.spec.js~describe14.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/errors.spec.js~describe14.describe15.it18",
    "access": null,
    "description": "creates a new Errors instance",
    "lineNumber": 35,
    "testTargets": [
      "Errors"
    ]
  },
  {
    "__docId__": 221,
    "kind": "test",
    "name": "describe19",
    "testId": 19,
    "memberof": "test/unit/data/resources/errors.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/errors.spec.js~describe14.describe19",
    "access": null,
    "description": "Errors.list",
    "lineNumber": 44,
    "testTargets": [
      "Errors.list"
    ]
  },
  {
    "__docId__": 222,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "test/unit/data/resources/errors.spec.js~describe14.describe19",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/errors.spec.js~describe14.describe19.it20",
    "access": null,
    "description": "makes a get request to the Mux data errors route",
    "lineNumber": 46,
    "testTargets": [
      "Errors.list"
    ]
  },
  {
    "__docId__": 223,
    "kind": "testFile",
    "name": "test/unit/data/resources/exports.spec.js",
    "content": "const { expect } = require('chai');\nconst moxios = require('moxios');\nconst sinon = require('sinon');\nconst Exports = require('../../../../src/data/resources/exports');\n\n/** @test {Exports} */\ndescribe('Unit::Exports', () => {\n  const testApiKey = 'testKey';\n  const testSecret = 'testSecret';\n  const exportsInstance = new Exports(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(exportsInstance.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(exportsInstance.http);\n  });\n\n  /** @test {Exports} */\n  describe('Exports', () => {\n    /** @test {Exports} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new Exports()).to.throw(\n        'API Access Token must be provided.'\n      );\n    });\n\n    /** @test {Exports} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new Exports(testApiKey)).to.throw(\n        'API secret key must be provided'\n      );\n    });\n\n    /** @test {Exports} */\n    it('creates a new Exports instance', () => {\n      const TestExports = new Exports(testApiKey, testSecret);\n      expect(() => new Exports(testApiKey, testSecret)).to.not.throw();\n      expect(TestExports.tokenId).to.equal(testApiKey);\n      expect(TestExports.tokenSecret).to.equal(testSecret);\n    });\n  });\n\n  /** @test {Exports.list} */\n  describe('Exports.list', () => {\n    /** @test {Exports.list} */\n    it('makes a get request to the Mux data exports route', done => {\n      moxios.stubRequest('https://api.mux.com/data/v1/exports', {\n        status: 200,\n        responseText: '{\"data\": {\"exports\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      exportsInstance.list({}).then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].data.exports).to.be.true;\n        done();\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/test/unit/data/resources/exports.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 224,
    "kind": "test",
    "name": "describe21",
    "testId": 21,
    "memberof": "test/unit/data/resources/exports.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/data/resources/exports.spec.js~describe21",
    "access": null,
    "description": "Unit::Exports",
    "lineNumber": 7,
    "testTargets": [
      "Exports"
    ]
  },
  {
    "__docId__": 225,
    "kind": "test",
    "name": "describe22",
    "testId": 22,
    "memberof": "test/unit/data/resources/exports.spec.js~describe21",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/exports.spec.js~describe21.describe22",
    "access": null,
    "description": "Exports",
    "lineNumber": 21,
    "testTargets": [
      "Exports"
    ]
  },
  {
    "__docId__": 226,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "test/unit/data/resources/exports.spec.js~describe21.describe22",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/exports.spec.js~describe21.describe22.it23",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 23,
    "testTargets": [
      "Exports"
    ]
  },
  {
    "__docId__": 227,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "test/unit/data/resources/exports.spec.js~describe21.describe22",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/exports.spec.js~describe21.describe22.it24",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 30,
    "testTargets": [
      "Exports"
    ]
  },
  {
    "__docId__": 228,
    "kind": "test",
    "name": "it25",
    "testId": 25,
    "memberof": "test/unit/data/resources/exports.spec.js~describe21.describe22",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/exports.spec.js~describe21.describe22.it25",
    "access": null,
    "description": "creates a new Exports instance",
    "lineNumber": 37,
    "testTargets": [
      "Exports"
    ]
  },
  {
    "__docId__": 229,
    "kind": "test",
    "name": "describe26",
    "testId": 26,
    "memberof": "test/unit/data/resources/exports.spec.js~describe21",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/exports.spec.js~describe21.describe26",
    "access": null,
    "description": "Exports.list",
    "lineNumber": 46,
    "testTargets": [
      "Exports.list"
    ]
  },
  {
    "__docId__": 230,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "test/unit/data/resources/exports.spec.js~describe21.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/exports.spec.js~describe21.describe26.it27",
    "access": null,
    "description": "makes a get request to the Mux data exports route",
    "lineNumber": 48,
    "testTargets": [
      "Exports.list"
    ]
  },
  {
    "__docId__": 231,
    "kind": "testFile",
    "name": "test/unit/data/resources/filters.spec.js",
    "content": "const { expect } = require('chai');\nconst moxios = require('moxios');\nconst sinon = require('sinon');\nconst Filters = require('../../../../src/data/resources/filters');\n\n/** @test {Filters} */\ndescribe('Unit::Filters', () => {\n  const testApiKey = 'testKey';\n  const testSecret = 'testSecret';\n  const filtersInstance = new Filters(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(filtersInstance.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(filtersInstance.http);\n  });\n\n  /** @test {Filters} */\n  describe('Filters', () => {\n    /** @test {Filters} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new Filters()).to.throw(\n        'API Access Token must be provided.'\n      );\n    });\n\n    /** @test {Filters} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new Filters(testApiKey)).to.throw(\n        'API secret key must be provided'\n      );\n    });\n\n    /** @test {Filters} */\n    it('creates a new Filters instance', () => {\n      const TestFilters = new Filters(testApiKey, testSecret);\n      expect(() => new Filters(testApiKey, testSecret)).to.not.throw();\n      expect(TestFilters.tokenId).to.equal(testApiKey);\n      expect(TestFilters.tokenSecret).to.equal(testSecret);\n    });\n  });\n\n  /** @test {Filters.list} */\n  describe('Filters.list', () => {\n    /** @test {Filters.list} */\n    it('makes a get request to the Mux data filters route', done => {\n      moxios.stubRequest('https://api.mux.com/data/v1/filters', {\n        status: 200,\n        responseText: '{\"data\": {\"filters\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      filtersInstance.list({}).then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].data.filters).to.be.true;\n        done();\n      });\n    });\n  });\n\n  /** @test {Filters.get} */\n  describe('Filters.get', () => {\n    /** @test {Filters.get} */\n    it('throws an error if a filter Id is not provided', () => {\n      expect(() => filtersInstance.get()).to.throw(\n        'Filter Id is required to get filter information.'\n      );\n    });\n\n    /** @test {Filters.get} */\n    it('makes a get request to the Mux data filters route', done => {\n      moxios.stubRequest('https://api.mux.com/data/v1/filters/someFilter', {\n        status: 200,\n        responseText: '{\"data\": {\"filters\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      filtersInstance.get('someFilter', {}).then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].data.filters).to.be.true;\n        done();\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/test/unit/data/resources/filters.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 232,
    "kind": "test",
    "name": "describe28",
    "testId": 28,
    "memberof": "test/unit/data/resources/filters.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe28",
    "access": null,
    "description": "Unit::Filters",
    "lineNumber": 7,
    "testTargets": [
      "Filters"
    ]
  },
  {
    "__docId__": 233,
    "kind": "test",
    "name": "describe29",
    "testId": 29,
    "memberof": "test/unit/data/resources/filters.spec.js~describe28",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe28.describe29",
    "access": null,
    "description": "Filters",
    "lineNumber": 21,
    "testTargets": [
      "Filters"
    ]
  },
  {
    "__docId__": 234,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "test/unit/data/resources/filters.spec.js~describe28.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe28.describe29.it30",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 23,
    "testTargets": [
      "Filters"
    ]
  },
  {
    "__docId__": 235,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "test/unit/data/resources/filters.spec.js~describe28.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe28.describe29.it31",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 30,
    "testTargets": [
      "Filters"
    ]
  },
  {
    "__docId__": 236,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "test/unit/data/resources/filters.spec.js~describe28.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe28.describe29.it32",
    "access": null,
    "description": "creates a new Filters instance",
    "lineNumber": 37,
    "testTargets": [
      "Filters"
    ]
  },
  {
    "__docId__": 237,
    "kind": "test",
    "name": "describe33",
    "testId": 33,
    "memberof": "test/unit/data/resources/filters.spec.js~describe28",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe28.describe33",
    "access": null,
    "description": "Filters.list",
    "lineNumber": 46,
    "testTargets": [
      "Filters.list"
    ]
  },
  {
    "__docId__": 238,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "test/unit/data/resources/filters.spec.js~describe28.describe33",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe28.describe33.it34",
    "access": null,
    "description": "makes a get request to the Mux data filters route",
    "lineNumber": 48,
    "testTargets": [
      "Filters.list"
    ]
  },
  {
    "__docId__": 239,
    "kind": "test",
    "name": "describe35",
    "testId": 35,
    "memberof": "test/unit/data/resources/filters.spec.js~describe28",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe28.describe35",
    "access": null,
    "description": "Filters.get",
    "lineNumber": 65,
    "testTargets": [
      "Filters.get"
    ]
  },
  {
    "__docId__": 240,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "test/unit/data/resources/filters.spec.js~describe28.describe35",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe28.describe35.it36",
    "access": null,
    "description": "throws an error if a filter Id is not provided",
    "lineNumber": 67,
    "testTargets": [
      "Filters.get"
    ]
  },
  {
    "__docId__": 241,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "test/unit/data/resources/filters.spec.js~describe28.describe35",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe28.describe35.it37",
    "access": null,
    "description": "makes a get request to the Mux data filters route",
    "lineNumber": 74,
    "testTargets": [
      "Filters.get"
    ]
  },
  {
    "__docId__": 242,
    "kind": "testFile",
    "name": "test/unit/data/resources/incidents.spec.js",
    "content": "const { expect } = require('chai');\nconst moxios = require('moxios');\nconst sinon = require('sinon');\nconst Incidents = require('../../../../src/data/resources/incidents');\n\n/** @test {Incidents} */\ndescribe('Unit::Incidents', () => {\n  const testApiKey = 'testKey';\n  const testSecret = 'testSecret';\n  const incidentsInstance = new Incidents(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(incidentsInstance.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(incidentsInstance.http);\n  });\n\n  /** @test {Incidents} */\n  describe('Incidents', () => {\n    /** @test {Incidents} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new Incidents()).to.throw(\n        'API Access Token must be provided.'\n      );\n    });\n\n    /** @test {Incidents} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new Incidents(testApiKey)).to.throw(\n        'API secret key must be provided'\n      );\n    });\n\n    /** @test {Incidents} */\n    it('creates a new Incidents instance', () => {\n      const TestIncidents = new Incidents(testApiKey, testSecret);\n      expect(() => new Incidents(testApiKey, testSecret)).to.not.throw();\n      expect(TestIncidents.tokenId).to.equal(testApiKey);\n      expect(TestIncidents.tokenSecret).to.equal(testSecret);\n    });\n  });\n\n  /** @test {Incidents.list} */\n  describe('Incidents.list', () => {\n    /** @test {Incidents.list} */\n    it('makes a get request to the Mux data incidents route', done => {\n      moxios.stubRequest('https://api.mux.com/data/v1/incidents?status=open', {\n        status: 200,\n        responseText: '{\"data\": {\"incidents\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      incidentsInstance.list({ status: 'open' }).then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].data.incidents).to.be.true;\n        done();\n      });\n    });\n  });\n\n  /** @test {Incidents.get} */\n  describe('Incidents.get', () => {\n    /** @test {Incidents.get} */\n    it('throws an error if an incident Id is not provided', () => {\n      expect(() => incidentsInstance.get()).to.throw(\n        'An incident Id is required for incident details.'\n      );\n    });\n\n    it('makes a get request to the Mux data incidents route', done => {\n      moxios.stubRequest('https://api.mux.com/data/v1/incidents/abc123', {\n        status: 200,\n        responseText: '{\"data\": {\"incidents\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      incidentsInstance.get('abc123').then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].data.incidents).to.be.true;\n        done();\n      });\n    });\n  });\n\n  /** @test {Incidents.related} */\n  describe('Incidents.related', () => {\n    /** @test {Incidents.related} */\n    it('throws an error if an incident Id is not provided', () => {\n      expect(() => incidentsInstance.related()).to.throw(\n        'An incident Id is required for related incidents.'\n      );\n    });\n\n    it('makes a get request to the Mux data incidents route', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/data/v1/incidents/abc123/related',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"incidents\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      incidentsInstance.related('abc123').then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].data.incidents).to.be.true;\n        done();\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/test/unit/data/resources/incidents.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 243,
    "kind": "test",
    "name": "describe38",
    "testId": 38,
    "memberof": "test/unit/data/resources/incidents.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/data/resources/incidents.spec.js~describe38",
    "access": null,
    "description": "Unit::Incidents",
    "lineNumber": 7,
    "testTargets": [
      "Incidents"
    ]
  },
  {
    "__docId__": 244,
    "kind": "test",
    "name": "describe39",
    "testId": 39,
    "memberof": "test/unit/data/resources/incidents.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/incidents.spec.js~describe38.describe39",
    "access": null,
    "description": "Incidents",
    "lineNumber": 21,
    "testTargets": [
      "Incidents"
    ]
  },
  {
    "__docId__": 245,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "test/unit/data/resources/incidents.spec.js~describe38.describe39",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/incidents.spec.js~describe38.describe39.it40",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 23,
    "testTargets": [
      "Incidents"
    ]
  },
  {
    "__docId__": 246,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "test/unit/data/resources/incidents.spec.js~describe38.describe39",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/incidents.spec.js~describe38.describe39.it41",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 30,
    "testTargets": [
      "Incidents"
    ]
  },
  {
    "__docId__": 247,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "test/unit/data/resources/incidents.spec.js~describe38.describe39",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/incidents.spec.js~describe38.describe39.it42",
    "access": null,
    "description": "creates a new Incidents instance",
    "lineNumber": 37,
    "testTargets": [
      "Incidents"
    ]
  },
  {
    "__docId__": 248,
    "kind": "test",
    "name": "describe43",
    "testId": 43,
    "memberof": "test/unit/data/resources/incidents.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/incidents.spec.js~describe38.describe43",
    "access": null,
    "description": "Incidents.list",
    "lineNumber": 46,
    "testTargets": [
      "Incidents.list"
    ]
  },
  {
    "__docId__": 249,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "test/unit/data/resources/incidents.spec.js~describe38.describe43",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/incidents.spec.js~describe38.describe43.it44",
    "access": null,
    "description": "makes a get request to the Mux data incidents route",
    "lineNumber": 48,
    "testTargets": [
      "Incidents.list"
    ]
  },
  {
    "__docId__": 250,
    "kind": "test",
    "name": "describe45",
    "testId": 45,
    "memberof": "test/unit/data/resources/incidents.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/incidents.spec.js~describe38.describe45",
    "access": null,
    "description": "Incidents.get",
    "lineNumber": 65,
    "testTargets": [
      "Incidents.get"
    ]
  },
  {
    "__docId__": 251,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "test/unit/data/resources/incidents.spec.js~describe38.describe45",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/incidents.spec.js~describe38.describe45.it46",
    "access": null,
    "description": "throws an error if an incident Id is not provided",
    "lineNumber": 67,
    "testTargets": [
      "Incidents.get"
    ]
  },
  {
    "__docId__": 252,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "test/unit/data/resources/incidents.spec.js~describe38.describe45",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/incidents.spec.js~describe38.describe45.it47",
    "access": null,
    "description": "makes a get request to the Mux data incidents route",
    "lineNumber": 73
  },
  {
    "__docId__": 253,
    "kind": "test",
    "name": "describe48",
    "testId": 48,
    "memberof": "test/unit/data/resources/incidents.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/incidents.spec.js~describe38.describe48",
    "access": null,
    "description": "Incidents.related",
    "lineNumber": 90,
    "testTargets": [
      "Incidents.related"
    ]
  },
  {
    "__docId__": 254,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "test/unit/data/resources/incidents.spec.js~describe38.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/incidents.spec.js~describe38.describe48.it49",
    "access": null,
    "description": "throws an error if an incident Id is not provided",
    "lineNumber": 92,
    "testTargets": [
      "Incidents.related"
    ]
  },
  {
    "__docId__": 255,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "test/unit/data/resources/incidents.spec.js~describe38.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/incidents.spec.js~describe38.describe48.it50",
    "access": null,
    "description": "makes a get request to the Mux data incidents route",
    "lineNumber": 98
  },
  {
    "__docId__": 256,
    "kind": "testFile",
    "name": "test/unit/data/resources/metrics.spec.js",
    "content": "const { expect } = require('chai');\nconst moxios = require('moxios');\nconst sinon = require('sinon');\nconst Metrics = require('../../../../src/data/resources/metrics');\n\n/** @test {Metrics} */\ndescribe('Unit::Metrics', () => {\n  const testApiKey = 'testKey';\n  const testSecret = 'testSecret';\n  const metricsInstance = new Metrics(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(metricsInstance.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(metricsInstance.http);\n  });\n\n  /** @test {Metrics} */\n  describe('Metrics', () => {\n    /** @test {Metrics} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new Metrics()).to.throw(\n        'API Access Token must be provided.'\n      );\n    });\n\n    /** @test {Metrics} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new Metrics(testApiKey)).to.throw(\n        'API secret key must be provided'\n      );\n    });\n\n    /** @test {Metrics} */\n    it('creates a new Metrics instance', () => {\n      const TestMetrics = new Metrics(testApiKey, testSecret);\n      expect(() => new Metrics(testApiKey, testSecret)).to.not.throw();\n      expect(TestMetrics.tokenId).to.equal(testApiKey);\n      expect(TestMetrics.tokenSecret).to.equal(testSecret);\n    });\n  });\n\n  /** @test {Metrics.breakdown} */\n  describe('Metrics.breakdown', () => {\n    /** @test {Metrics.breakdown} */\n    it('makes a get request to the Mux data breakdown route', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/data/v1/metrics/testMetric/breakdown',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"breakdown\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      metricsInstance.breakdown('testMetric', {}).then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].data.breakdown).to.be.true;\n        done();\n      });\n    });\n  });\n\n  /** @test {Metrics.comparison} */\n  describe('Metrics.comparison', () => {\n    /** @test {Metrics.comparison} */\n    it('throws an error if the value query parameter is not provided', () => {\n      expect(() => metricsInstance.comparison()).to.throw(\n        'The value query parameter is required for comparing metrics'\n      );\n      expect(() => metricsInstance.comparison({})).to.throw(\n        'The value query parameter is required for comparing metrics'\n      );\n    });\n\n    /** @test {Metrics.comparison} */\n    it('makes a get request to the Mux data comparision route', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/data/v1/metrics/comparison?value=abc123',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"comparison\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      metricsInstance.comparison({ value: 'abc123' }).then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].data.comparison).to.be.true;\n        done();\n      });\n    });\n  });\n\n  /** @test {Metrics.insights} */\n  describe('Metrics.insights', () => {\n    /** @test {Metrics.insights} */\n    it('throws an error if a metric Id is not provided', () => {\n      expect(() => metricsInstance.insights()).to.throw(\n        'A metric Id is required for insight metrics.'\n      );\n    });\n\n    /** @test {Metrics.insights} */\n    it('makes a get request to the Mux data insights route', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/data/v1/metrics/testMetric/insights',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"insights\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      metricsInstance.insights('testMetric').then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].data.insights).to.be.true;\n        done();\n      });\n    });\n  });\n\n  /** @test {Metrics.overall} */\n  describe('Metrics.overall', () => {\n    /** @test {Metrics.overall} */\n    it('throws an error if a metric Id is not provided', () => {\n      expect(() => metricsInstance.overall()).to.throw(\n        'A metric Id is required for overall metrics.'\n      );\n    });\n\n    /** @test {Metrics.overall} */\n    it('makes a get request to the Mux data overall route', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/data/v1/metrics/testMetric/overall',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"overall\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      metricsInstance.overall('testMetric', {}).then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].data.overall).to.be.true;\n        done();\n      });\n    });\n  });\n\n  /** @test {Metrics.timeseries} */\n  describe('Metrics.timeseries', () => {\n    /** @test {Metrics.timeseries} */\n    it('throws an error if a metric Id is not provided', () => {\n      expect(() => metricsInstance.timeseries()).to.throw(\n        'A metric Id is required for timeseries metrics.'\n      );\n    });\n\n    /** @test {Metrics.timeseries} */\n    it('makes a get request to the Mux data timeseries route', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/data/v1/metrics/testMetric/timeseries',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"timeseries\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      metricsInstance.timeseries('testMetric', {}).then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].data.timeseries).to.be.true;\n        done();\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/test/unit/data/resources/metrics.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 257,
    "kind": "test",
    "name": "describe51",
    "testId": 51,
    "memberof": "test/unit/data/resources/metrics.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe51",
    "access": null,
    "description": "Unit::Metrics",
    "lineNumber": 7,
    "testTargets": [
      "Metrics"
    ]
  },
  {
    "__docId__": 258,
    "kind": "test",
    "name": "describe52",
    "testId": 52,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe51",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe51.describe52",
    "access": null,
    "description": "Metrics",
    "lineNumber": 21,
    "testTargets": [
      "Metrics"
    ]
  },
  {
    "__docId__": 259,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe51.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe51.describe52.it53",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 23,
    "testTargets": [
      "Metrics"
    ]
  },
  {
    "__docId__": 260,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe51.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe51.describe52.it54",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 30,
    "testTargets": [
      "Metrics"
    ]
  },
  {
    "__docId__": 261,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe51.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe51.describe52.it55",
    "access": null,
    "description": "creates a new Metrics instance",
    "lineNumber": 37,
    "testTargets": [
      "Metrics"
    ]
  },
  {
    "__docId__": 262,
    "kind": "test",
    "name": "describe56",
    "testId": 56,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe51",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe51.describe56",
    "access": null,
    "description": "Metrics.breakdown",
    "lineNumber": 46,
    "testTargets": [
      "Metrics.breakdown"
    ]
  },
  {
    "__docId__": 263,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe51.describe56",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe51.describe56.it57",
    "access": null,
    "description": "makes a get request to the Mux data breakdown route",
    "lineNumber": 48,
    "testTargets": [
      "Metrics.breakdown"
    ]
  },
  {
    "__docId__": 264,
    "kind": "test",
    "name": "describe58",
    "testId": 58,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe51",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe51.describe58",
    "access": null,
    "description": "Metrics.comparison",
    "lineNumber": 68,
    "testTargets": [
      "Metrics.comparison"
    ]
  },
  {
    "__docId__": 265,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe51.describe58",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe51.describe58.it59",
    "access": null,
    "description": "throws an error if the value query parameter is not provided",
    "lineNumber": 70,
    "testTargets": [
      "Metrics.comparison"
    ]
  },
  {
    "__docId__": 266,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe51.describe58",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe51.describe58.it60",
    "access": null,
    "description": "makes a get request to the Mux data comparision route",
    "lineNumber": 80,
    "testTargets": [
      "Metrics.comparison"
    ]
  },
  {
    "__docId__": 267,
    "kind": "test",
    "name": "describe61",
    "testId": 61,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe51",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe51.describe61",
    "access": null,
    "description": "Metrics.insights",
    "lineNumber": 100,
    "testTargets": [
      "Metrics.insights"
    ]
  },
  {
    "__docId__": 268,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe51.describe61",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe51.describe61.it62",
    "access": null,
    "description": "throws an error if a metric Id is not provided",
    "lineNumber": 102,
    "testTargets": [
      "Metrics.insights"
    ]
  },
  {
    "__docId__": 269,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe51.describe61",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe51.describe61.it63",
    "access": null,
    "description": "makes a get request to the Mux data insights route",
    "lineNumber": 109,
    "testTargets": [
      "Metrics.insights"
    ]
  },
  {
    "__docId__": 270,
    "kind": "test",
    "name": "describe64",
    "testId": 64,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe51",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe51.describe64",
    "access": null,
    "description": "Metrics.overall",
    "lineNumber": 129,
    "testTargets": [
      "Metrics.overall"
    ]
  },
  {
    "__docId__": 271,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe51.describe64",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe51.describe64.it65",
    "access": null,
    "description": "throws an error if a metric Id is not provided",
    "lineNumber": 131,
    "testTargets": [
      "Metrics.overall"
    ]
  },
  {
    "__docId__": 272,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe51.describe64",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe51.describe64.it66",
    "access": null,
    "description": "makes a get request to the Mux data overall route",
    "lineNumber": 138,
    "testTargets": [
      "Metrics.overall"
    ]
  },
  {
    "__docId__": 273,
    "kind": "test",
    "name": "describe67",
    "testId": 67,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe51",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe51.describe67",
    "access": null,
    "description": "Metrics.timeseries",
    "lineNumber": 158,
    "testTargets": [
      "Metrics.timeseries"
    ]
  },
  {
    "__docId__": 274,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe51.describe67",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe51.describe67.it68",
    "access": null,
    "description": "throws an error if a metric Id is not provided",
    "lineNumber": 160,
    "testTargets": [
      "Metrics.timeseries"
    ]
  },
  {
    "__docId__": 275,
    "kind": "test",
    "name": "it69",
    "testId": 69,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe51.describe67",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe51.describe67.it69",
    "access": null,
    "description": "makes a get request to the Mux data timeseries route",
    "lineNumber": 167,
    "testTargets": [
      "Metrics.timeseries"
    ]
  },
  {
    "__docId__": 276,
    "kind": "testFile",
    "name": "test/unit/data/resources/real_time.spec.js",
    "content": "const { expect } = require('chai');\nconst moxios = require('moxios');\nconst sinon = require('sinon');\nconst RealTime = require('../../../../src/data/resources/real_time');\n\n/** @test {RealTime} */\ndescribe('Unit::RealTime', () => {\n  const testApiKey = 'testKey';\n  const testSecret = 'testSecret';\n  const realTimeInstance = new RealTime(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(realTimeInstance.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(realTimeInstance.http);\n  });\n\n  /** @test {RealTime} */\n  describe('RealTime', () => {\n    /** @test {RealTime} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new RealTime()).to.throw(\n        'API Access Token must be provided.'\n      );\n    });\n\n    /** @test {RealTime} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new RealTime(testApiKey)).to.throw(\n        'API secret key must be provided'\n      );\n    });\n\n    /** @test {RealTime} */\n    it('creates a new RealTime instance', () => {\n      const TestMetrics = new RealTime(testApiKey, testSecret);\n      expect(() => new RealTime(testApiKey, testSecret)).to.not.throw();\n      expect(TestMetrics.tokenId).to.equal(testApiKey);\n      expect(TestMetrics.tokenSecret).to.equal(testSecret);\n    });\n  });\n\n  /** @test {RealTime.dimensions} */\n  describe('RealTime.dimensions', () => {\n    /** @test {RealTime.dimensions} */\n    it('makes a get request to the Mux data real-time dimensions route', done => {\n      moxios.stubRequest('https://api.mux.com/data/v1/realtime/dimensions', {\n        status: 200,\n        responseText: '{\"data\": {\"name\": \"asn\", \"display_name\": \"ASN\"}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      realTimeInstance.dimensions().then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].data.name).to.equal('asn');\n        done();\n      });\n    });\n  });\n\n  /** @test {RealTime.metrics} */\n  describe('RealTime.metrics', () => {\n    /** @test {RealTime.metrics} */\n    it('makes a get request to the Mux data real-time metrics route', done => {\n      moxios.stubRequest('https://api.mux.com/data/v1/realtime/metrics', {\n        status: 200,\n        responseText:\n          '{\"data\": {\"name\": \"current-concurrent-viewers\", \"display_name\": \"Current Concurrent Viewers (CCV)\" }}',\n      });\n\n      const onFulfilled = sinon.spy();\n      realTimeInstance.metrics().then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].data.name).to.equal(\n          'current-concurrent-viewers'\n        );\n        done();\n      });\n    });\n  });\n\n  /** @test {RealTime.breakdown} */\n  describe('RealTime.breakdown', () => {\n    /** @test {RealTime.breakdown} */\n    it('throws an error if the value query parameter is not provided', () => {\n      expect(() => realTimeInstance.breakdown()).to.throw(\n        'A metric Id is required for real-time breakdown information'\n      );\n      expect(() => realTimeInstance.breakdown({})).to.throw(\n        'The dimension query parameter is required for real-time breakdown information'\n      );\n    });\n\n    /** @test {RealTime.breakdown} */\n    it('makes a get request to the Mux data real-time metrics route', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/data/v1/realtime/metrics/playback-failure-percentage/breakdown?dimension=country',\n        {\n          status: 200,\n          responseText: '{\"data\": { \"breakdown\": true }}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      realTimeInstance\n        .breakdown('playback-failure-percentage', { dimension: 'country' })\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].data.breakdown).to.be.true;\n        done();\n      });\n    });\n  });\n\n  /** @test {RealTime.histogramTimeseries} */\n  describe('RealTime.histogramTimeseries', () => {\n    /** @test {RealTime.histogramTimeseries} */\n    it('throws an error if the value query parameter is not provided', () => {\n      expect(() => realTimeInstance.histogramTimeseries()).to.throw(\n        'A metric Id is required for real-time histogram timeseries information'\n      );\n    });\n\n    /** @test {RealTime.histogramTimeseries} */\n    it('makes a get request to the Mux data real-time histogramTimeseries route', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/data/v1/realtime/metrics/playback-failure-percentage/histogram-timeseries',\n        {\n          status: 200,\n          responseText: '{\"data\": { \"histogramTimeseries\": true }}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      realTimeInstance\n        .histogramTimeseries('playback-failure-percentage')\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].data.histogramTimeseries).to.be\n          .true;\n        done();\n      });\n    });\n  });\n\n  /** @test {RealTime.timeseries} */\n  describe('RealTime.timeseries', () => {\n    /** @test {RealTime.timeseries} */\n    it('throws an error if the value query parameter is not provided', () => {\n      expect(() => realTimeInstance.timeseries()).to.throw(\n        'A metric Id is required for real-time timeseries information'\n      );\n    });\n\n    /** @test {RealTime.timeseries} */\n    it('makes a get request to the Mux data real-time timeseries route', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/data/v1/realtime/metrics/playback-failure-percentage/timeseries',\n        {\n          status: 200,\n          responseText: '{\"data\": { \"timeseries\": true }}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      realTimeInstance\n        .timeseries('playback-failure-percentage')\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].data.timeseries).to.be.true;\n        done();\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/test/unit/data/resources/real_time.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 277,
    "kind": "test",
    "name": "describe70",
    "testId": 70,
    "memberof": "test/unit/data/resources/real_time.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe70",
    "access": null,
    "description": "Unit::RealTime",
    "lineNumber": 7,
    "testTargets": [
      "RealTime"
    ]
  },
  {
    "__docId__": 278,
    "kind": "test",
    "name": "describe71",
    "testId": 71,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe70.describe71",
    "access": null,
    "description": "RealTime",
    "lineNumber": 21,
    "testTargets": [
      "RealTime"
    ]
  },
  {
    "__docId__": 279,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe70.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe70.describe71.it72",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 23,
    "testTargets": [
      "RealTime"
    ]
  },
  {
    "__docId__": 280,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe70.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe70.describe71.it73",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 30,
    "testTargets": [
      "RealTime"
    ]
  },
  {
    "__docId__": 281,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe70.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe70.describe71.it74",
    "access": null,
    "description": "creates a new RealTime instance",
    "lineNumber": 37,
    "testTargets": [
      "RealTime"
    ]
  },
  {
    "__docId__": 282,
    "kind": "test",
    "name": "describe75",
    "testId": 75,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe70.describe75",
    "access": null,
    "description": "RealTime.dimensions",
    "lineNumber": 46,
    "testTargets": [
      "RealTime.dimensions"
    ]
  },
  {
    "__docId__": 283,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe70.describe75",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe70.describe75.it76",
    "access": null,
    "description": "makes a get request to the Mux data real-time dimensions route",
    "lineNumber": 48,
    "testTargets": [
      "RealTime.dimensions"
    ]
  },
  {
    "__docId__": 284,
    "kind": "test",
    "name": "describe77",
    "testId": 77,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe70.describe77",
    "access": null,
    "description": "RealTime.metrics",
    "lineNumber": 65,
    "testTargets": [
      "RealTime.metrics"
    ]
  },
  {
    "__docId__": 285,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe70.describe77",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe70.describe77.it78",
    "access": null,
    "description": "makes a get request to the Mux data real-time metrics route",
    "lineNumber": 67,
    "testTargets": [
      "RealTime.metrics"
    ]
  },
  {
    "__docId__": 286,
    "kind": "test",
    "name": "describe79",
    "testId": 79,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe70.describe79",
    "access": null,
    "description": "RealTime.breakdown",
    "lineNumber": 87,
    "testTargets": [
      "RealTime.breakdown"
    ]
  },
  {
    "__docId__": 287,
    "kind": "test",
    "name": "it80",
    "testId": 80,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe70.describe79",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe70.describe79.it80",
    "access": null,
    "description": "throws an error if the value query parameter is not provided",
    "lineNumber": 89,
    "testTargets": [
      "RealTime.breakdown"
    ]
  },
  {
    "__docId__": 288,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe70.describe79",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe70.describe79.it81",
    "access": null,
    "description": "makes a get request to the Mux data real-time metrics route",
    "lineNumber": 99,
    "testTargets": [
      "RealTime.breakdown"
    ]
  },
  {
    "__docId__": 289,
    "kind": "test",
    "name": "describe82",
    "testId": 82,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe70.describe82",
    "access": null,
    "description": "RealTime.histogramTimeseries",
    "lineNumber": 121,
    "testTargets": [
      "RealTime.histogramTimeseries"
    ]
  },
  {
    "__docId__": 290,
    "kind": "test",
    "name": "it83",
    "testId": 83,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe70.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe70.describe82.it83",
    "access": null,
    "description": "throws an error if the value query parameter is not provided",
    "lineNumber": 123,
    "testTargets": [
      "RealTime.histogramTimeseries"
    ]
  },
  {
    "__docId__": 291,
    "kind": "test",
    "name": "it84",
    "testId": 84,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe70.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe70.describe82.it84",
    "access": null,
    "description": "makes a get request to the Mux data real-time histogramTimeseries route",
    "lineNumber": 130,
    "testTargets": [
      "RealTime.histogramTimeseries"
    ]
  },
  {
    "__docId__": 292,
    "kind": "test",
    "name": "describe85",
    "testId": 85,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe70.describe85",
    "access": null,
    "description": "RealTime.timeseries",
    "lineNumber": 153,
    "testTargets": [
      "RealTime.timeseries"
    ]
  },
  {
    "__docId__": 293,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe70.describe85",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe70.describe85.it86",
    "access": null,
    "description": "throws an error if the value query parameter is not provided",
    "lineNumber": 155,
    "testTargets": [
      "RealTime.timeseries"
    ]
  },
  {
    "__docId__": 294,
    "kind": "test",
    "name": "it87",
    "testId": 87,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe70.describe85",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe70.describe85.it87",
    "access": null,
    "description": "makes a get request to the Mux data real-time timeseries route",
    "lineNumber": 162,
    "testTargets": [
      "RealTime.timeseries"
    ]
  },
  {
    "__docId__": 295,
    "kind": "testFile",
    "name": "test/unit/data/resources/video_views.spec.js",
    "content": "const { expect } = require('chai');\nconst moxios = require('moxios');\nconst sinon = require('sinon');\nconst VideoViews = require('../../../../src/data/resources/video_views');\n\n/** @test {VideoViews} */\ndescribe('Unit::VideoViews', () => {\n  const testApiKey = 'testKey';\n  const testSecret = 'testSecret';\n  const videoViewsInstance = new VideoViews(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(videoViewsInstance.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(videoViewsInstance.http);\n  });\n\n  /** @test {VideoViews} */\n  describe('VideoViews', () => {\n    /** @test {VideoViews} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new VideoViews()).to.throw(\n        'API Access Token must be provided.'\n      );\n    });\n\n    /** @test {VideoViews} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new VideoViews(testApiKey)).to.throw(\n        'API secret key must be provided'\n      );\n    });\n\n    /** @test {VideoViews} */\n    it('creates a new VideoViews instance', () => {\n      const TestVideoViews = new VideoViews(testApiKey, testSecret);\n      expect(() => new VideoViews(testApiKey, testSecret)).to.not.throw();\n      expect(TestVideoViews.tokenId).to.equal(testApiKey);\n      expect(TestVideoViews.tokenSecret).to.equal(testSecret);\n    });\n  });\n\n  /** @test {VideoViews.list} */\n  describe('VideoViews.list', () => {\n    /** @test {VideoViews.list} */\n    it('makes a get request to the Mux data video-views route', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/data/v1/video-views?viewer_id=abc123',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"video\": \"views\"}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      videoViewsInstance.list({ viewer_id: 'abc123' }).then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].data.video).to.equal('views');\n        done();\n      });\n    });\n  });\n\n  /** @test {VideoViews.get} */\n  describe('VideoViews.get', () => {\n    /** @test {VideoViews.get} */\n    it('makes a get request to the Mux data video-views route', done => {\n      moxios.stubRequest('https://api.mux.com/data/v1/video-views/someView', {\n        status: 200,\n        responseText: '{\"data\": {\"video\": \"views\"}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      videoViewsInstance.get('someView').then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].data.video).to.equal('views');\n        done();\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/test/unit/data/resources/video_views.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 296,
    "kind": "test",
    "name": "describe88",
    "testId": 88,
    "memberof": "test/unit/data/resources/video_views.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/data/resources/video_views.spec.js~describe88",
    "access": null,
    "description": "Unit::VideoViews",
    "lineNumber": 7,
    "testTargets": [
      "VideoViews"
    ]
  },
  {
    "__docId__": 297,
    "kind": "test",
    "name": "describe89",
    "testId": 89,
    "memberof": "test/unit/data/resources/video_views.spec.js~describe88",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/video_views.spec.js~describe88.describe89",
    "access": null,
    "description": "VideoViews",
    "lineNumber": 21,
    "testTargets": [
      "VideoViews"
    ]
  },
  {
    "__docId__": 298,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "test/unit/data/resources/video_views.spec.js~describe88.describe89",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/video_views.spec.js~describe88.describe89.it90",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 23,
    "testTargets": [
      "VideoViews"
    ]
  },
  {
    "__docId__": 299,
    "kind": "test",
    "name": "it91",
    "testId": 91,
    "memberof": "test/unit/data/resources/video_views.spec.js~describe88.describe89",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/video_views.spec.js~describe88.describe89.it91",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 30,
    "testTargets": [
      "VideoViews"
    ]
  },
  {
    "__docId__": 300,
    "kind": "test",
    "name": "it92",
    "testId": 92,
    "memberof": "test/unit/data/resources/video_views.spec.js~describe88.describe89",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/video_views.spec.js~describe88.describe89.it92",
    "access": null,
    "description": "creates a new VideoViews instance",
    "lineNumber": 37,
    "testTargets": [
      "VideoViews"
    ]
  },
  {
    "__docId__": 301,
    "kind": "test",
    "name": "describe93",
    "testId": 93,
    "memberof": "test/unit/data/resources/video_views.spec.js~describe88",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/video_views.spec.js~describe88.describe93",
    "access": null,
    "description": "VideoViews.list",
    "lineNumber": 46,
    "testTargets": [
      "VideoViews.list"
    ]
  },
  {
    "__docId__": 302,
    "kind": "test",
    "name": "it94",
    "testId": 94,
    "memberof": "test/unit/data/resources/video_views.spec.js~describe88.describe93",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/video_views.spec.js~describe88.describe93.it94",
    "access": null,
    "description": "makes a get request to the Mux data video-views route",
    "lineNumber": 48,
    "testTargets": [
      "VideoViews.list"
    ]
  },
  {
    "__docId__": 303,
    "kind": "test",
    "name": "describe95",
    "testId": 95,
    "memberof": "test/unit/data/resources/video_views.spec.js~describe88",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/video_views.spec.js~describe88.describe95",
    "access": null,
    "description": "VideoViews.get",
    "lineNumber": 68,
    "testTargets": [
      "VideoViews.get"
    ]
  },
  {
    "__docId__": 304,
    "kind": "test",
    "name": "it96",
    "testId": 96,
    "memberof": "test/unit/data/resources/video_views.spec.js~describe88.describe95",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/video_views.spec.js~describe88.describe95.it96",
    "access": null,
    "description": "makes a get request to the Mux data video-views route",
    "lineNumber": 70,
    "testTargets": [
      "VideoViews.get"
    ]
  },
  {
    "__docId__": 305,
    "kind": "testFile",
    "name": "test/unit/mux.spec.js",
    "content": "const { expect } = require('chai');\nconst Mux = require('../../src/mux');\nconst MuxVideo = require('../../src/video/video');\nconst MuxData = require('../../src/data/data');\n\n/** @test {Mux} */\ndescribe('Unit::Mux', () => {\n  /** @test {Mux} */\n  describe('Mux', () => {\n    /** @test {Mux} */\n    it('exposes Mux Video and Data as instance methods', () => {\n      const muxClient = new Mux('testKey', 'testSecret');\n      const { Video, Data } = muxClient;\n      expect(Video).to.to.be.an.instanceof(MuxVideo);\n      expect(Data).to.to.be.an.instanceof(MuxData);\n    });\n\n    /** @test {Mux.JTW} */\n    it('exposes JWT Helper utilities as static methods', () => {\n      expect(Mux.JWT.sign).to.be.a('function');\n      expect(Mux.JWT.decode).to.be.a('function');\n    });\n\n    /** @test {Mux.Webhooks} */\n    it('exposes Webhooks.verifyHeader', () => {\n      expect(Mux.Webhooks.verifyHeader).to.be.a('function');\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/test/unit/mux.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 306,
    "kind": "test",
    "name": "describe97",
    "testId": 97,
    "memberof": "test/unit/mux.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/mux.spec.js~describe97",
    "access": null,
    "description": "Unit::Mux",
    "lineNumber": 7,
    "testTargets": [
      "Mux"
    ]
  },
  {
    "__docId__": 307,
    "kind": "test",
    "name": "describe98",
    "testId": 98,
    "memberof": "test/unit/mux.spec.js~describe97",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/mux.spec.js~describe97.describe98",
    "access": null,
    "description": "Mux",
    "lineNumber": 9,
    "testTargets": [
      "Mux"
    ]
  },
  {
    "__docId__": 308,
    "kind": "test",
    "name": "it99",
    "testId": 99,
    "memberof": "test/unit/mux.spec.js~describe97.describe98",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/mux.spec.js~describe97.describe98.it99",
    "access": null,
    "description": "exposes Mux Video and Data as instance methods",
    "lineNumber": 11,
    "testTargets": [
      "Mux"
    ]
  },
  {
    "__docId__": 309,
    "kind": "test",
    "name": "it100",
    "testId": 100,
    "memberof": "test/unit/mux.spec.js~describe97.describe98",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/mux.spec.js~describe97.describe98.it100",
    "access": null,
    "description": "exposes JWT Helper utilities as static methods",
    "lineNumber": 19,
    "testTargets": [
      "Mux.JTW"
    ]
  },
  {
    "__docId__": 310,
    "kind": "test",
    "name": "it101",
    "testId": 101,
    "memberof": "test/unit/mux.spec.js~describe97.describe98",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/mux.spec.js~describe97.describe98.it101",
    "access": null,
    "description": "exposes Webhooks.verifyHeader",
    "lineNumber": 25,
    "testTargets": [
      "Mux.Webhooks"
    ]
  },
  {
    "__docId__": 311,
    "kind": "testFile",
    "name": "test/unit/utils/jwt.spec.js",
    "content": "const { expect } = require('chai');\nconst path = require('path');\nconst JWT = require('../../../src/utils/jwt');\n\nconst TEST_ID = '01XNj9qIpoW3eU1sED8EqrFRy01J3VTZ01x';\nconst TEST_SECRET =\n  ' LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNGdoaERZN25QTzFhMmxibHN0T3JTcmt3VUdkdzVaT0tjR0h5U2NkWXpoc1FudHNnCkw4VWxHcURScVhuZFZ2Ky9rMEI2MnZxbzJGT1gvYkdVK2srT2lRang4UCswNVJKOWEyL1lpSzJjQm56MG15WEEKOS9CajRVNis1d3dCUk15Z2xCd2VaeWt1ZVNsZ1dYYnZRRm50bE1LcXptYU5XcnJvSDNpVEJZUU9xeFF5dHdkZApaSXlVeTYwNDJUMXJaQm5WOVN3RzA0UEhjaVJ3TjJ3Ly83YVhMY2FGRnJTOUVxZ29SNGszcjllblN1YWM3STRvCmV5NVJwMmFaVXlzK3U1VnMwUzluMzIzWVViMWZtRU1kZzEyWU1yMHIyL2Q5ZjMrdVZXQVVUTkQ1MitSREsvZ00KOEt6dW5FZ2w5eWFacit6VlFpa0RhOFoyOE9yOUxrN0xNNk5TNlFJREFRQUJBb0lCQURPbXRvYmlvUFRMU0hlYwpZK0Q1ZmFzVnBuUzVMcE5IbzlzS2h0TlZPblhldVcyVHBVZEZSYlZRQ3BrdnYrU2hqS1dabG5senppR2crSnFBCmVncTVJMWt0TWh4Z1VuWUdRNkxKYkRIUGVsZ0JOZVErUEZwc0ZHYm9GN2UwaHBXeUxQK3JiVWNsb2ZrTiszWjIKTnpYOVZzMG5ydUI3anRHczVGNU1yMHdUWVVhMmFNSHU2dnNNZFNYY00rZTVZS3FCQ3Z3dS9MZ0ZvVFE1YXh0RQo0ZzJYbU91YUQrSFBPU0o1T0Mwc3grK1RkbXBNL1lMK3RjVjZZNVBWbUFMUURMcmFJdU9UM01lcUlicElvRlZQCmcxeldSOTBqb3BKWVpLSVFoNEY4WE4xODR1bmZ6bjVJbW1JdktOWE9QSU1YMk1oekw2YU5rSXZ5YmdpWUIvVGwKMm5vdVNBRUNnWUVBNHlzZmVZL0h3Rkl4Vy9MZ2R3UHJubDR4aGkwRkFWeE1QK1k0alhYUHU1bklXS3dvUk1xbgplTEd6UnhESnlhQmN5NXgzVjFhTmYwblV1YzJqRUM2Yi9XUUo2VWJMUzJvK2J1NmdJR1NsbmxLWS9uSlJGTnpwClE0d0F1c1J3M2dTVi9FNW12QVJiYk1vQ3Rha3FxdXhhWlMzODQ1MEFaQkxqcm1kZDU1VlFPUVVDZ1lFQS9yaGIKRm9oVmdxZzY0QjFpU0FCc3dYdTdLNzZHQUN4ZEg0MmxoVjQvNktiUVRVNnFwRWxVZURwbWlVeUkxeVBxZ1MwbApLYS9XMGg5VDI5S0Z1bVlFOWdlUG02b0ZaZjIvQ0RnaWtTWHdQTk5kRWp2SmtrMXdnb3dLbDNNbUhuWGtTYUlZCmpYVG9Td2tmN2RJREhVRXQ3RnRVd1VsQXROM3N4TFcvWlVKSEI1VUNnWUFMOXkyRlBhbUwyOGgxeTJrL1c1bUIKa2Z5UjBMVSt5Um5MRTlsT3VqSGk4OHExd1B1dUErNm1VTlhjbkduRWtRblNQNytaZmhtZDVzbXByOGN6QndGNAphMWlLVFF4UVFKeGhRM2h6dkZsczZYVGRraS9ySldlMEF4L1d0cG9yVjVwKzI3SlZuUFVqMmRBaXVYSmg1bWtzCmd5dWE0WjR2cHo4TzVLcnhrOC9SOFFLQmdRQ1BJbE4xTHZrMktZaWtCWDhEek5GUVRGSWFPNzZhL0ZMNzl5R3EKOXhKY2p0aUFpSk1WTEd1OS83czhyZmc3Uk9CeTVFWjh6V1dldjZIazVjRGx4SXhISUdxUFk1UVRBdXJGR0o0OApDQ0NlWFh0d1VvNXJtdjU5TFdxS1BsZU9TRnNYRVhKUWt3QXhvaGdDRU1CVlFSb29OZzVEYXdGa1lVeTZJUk5ECk9HSW5uUUtCZ1FDeWo1UVU3YjcycktVaWlhTisxaExrVEJFQUFab01jRjY4Ukp5Mlh5VXo5bVJQK1hLMkthbHoKbVdXNFh2RHZoVlB1T25tNjJ1RkxURCsybG1mNjdwUlY3bHlSVWlycVFabzNUVmsweE8yS3JJV21uRm1EZzBSRQp6YnB6MVJsZy9ZVjhQU3E4alE3ZUFsRUs0RHRSdlVoQW5RRU52NlVyVjltRnRjR1k0ZFhSUmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=';\n\n/** @test {Mux.Utils.JWT} */\ndescribe('Utils::JWT', () => {\n  /** @test {Mux.Utils.JWT.sign} */\n  describe('sign', () => {\n    /** @test {Mux.Utils.JWT.sign} */\n    it('defaults to video and includes an expiration', () => {\n      const options = {\n        keyId: TEST_ID,\n        keySecret: TEST_SECRET,\n      };\n\n      const token = JWT.sign('some-playback-id', options);\n      expect(token).to.be.a('string');\n      const decoded = JWT.decode(token);\n      expect(decoded.aud).to.eq('v');\n      expect(decoded.exp).to.be.greaterThan(new Date().getTime() / 1000);\n    });\n\n    it('maps type video to v', () => {\n      const options = {\n        keyId: TEST_ID,\n        keySecret: TEST_SECRET,\n        type: 'video',\n      };\n      const token = JWT.sign('some-playback-id', options);\n      expect(token).to.be.a('string');\n      const decoded = JWT.decode(token);\n      expect(decoded.aud).to.eq('v');\n    });\n\n    it('maps type thumbnail to t', () => {\n      const options = {\n        keyId: TEST_ID,\n        keySecret: TEST_SECRET,\n        type: 'thumbnail',\n      };\n      const token = JWT.sign('some-playback-id', options);\n      expect(token).to.be.a('string');\n      const decoded = JWT.decode(token);\n      expect(decoded.aud).to.eq('t');\n    });\n\n    it('maps type gif to g', () => {\n      const options = {\n        keyId: TEST_ID,\n        keySecret: TEST_SECRET,\n        type: 'gif',\n      };\n      const token = JWT.sign('some-playback-id', options);\n      expect(token).to.be.a('string');\n      const decoded = JWT.decode(token);\n      expect(decoded.aud).to.eq('g');\n    });\n\n    it('takes a file path for a secret', () => {\n      const options = {\n        keyId: TEST_ID,\n        keyFilePath: path.join(__dirname, 'example-private-key.pem'),\n        type: 'gif',\n      };\n\n      const token = JWT.sign('some-playback-id', options);\n      expect(token).to.be.a('string');\n      const decoded = JWT.decode(token);\n      expect(decoded.aud).to.eq('g');\n    });\n\n    it('falls back to using environment variables for the key and secret', () => {\n      process.env.MUX_SIGNING_KEY = TEST_ID;\n      process.env.MUX_PRIVATE_KEY = TEST_SECRET;\n      const options = {\n        type: 'gif',\n      };\n\n      const token = JWT.sign('some-playback-id', options);\n      expect(token).to.be.a('string');\n      const decoded = JWT.decode(token);\n      expect(decoded.aud).to.eq('g');\n    });\n\n    it('accepts a timestamp or time shorthand', () => {\n      const options1 = {\n        keyId: TEST_ID,\n        keySecret: TEST_SECRET,\n        expiration: '3h',\n      };\n\n      const options2 = {\n        ...options1,\n        expiration: 60 * 60 * 3,\n      };\n\n      const token1 = JWT.sign('some-playback-id', options1);\n      const token2 = JWT.sign('some-playback-id', options2);\n      expect(token1).to.be.a('string');\n      expect(token2).to.be.a('string');\n\n      const decoded1 = JWT.decode(token1);\n      const decoded2 = JWT.decode(token2);\n      expect(decoded1.exp).to.be.closeTo(decoded2.exp, 2);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/test/unit/utils/jwt.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 312,
    "kind": "test",
    "name": "describe102",
    "testId": 102,
    "memberof": "test/unit/utils/jwt.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/utils/jwt.spec.js~describe102",
    "access": null,
    "description": "Utils::JWT",
    "lineNumber": 10,
    "testTargets": [
      "Mux.Utils.JWT"
    ]
  },
  {
    "__docId__": 313,
    "kind": "test",
    "name": "describe103",
    "testId": 103,
    "memberof": "test/unit/utils/jwt.spec.js~describe102",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/utils/jwt.spec.js~describe102.describe103",
    "access": null,
    "description": "sign",
    "lineNumber": 12,
    "testTargets": [
      "Mux.Utils.JWT.sign"
    ]
  },
  {
    "__docId__": 314,
    "kind": "test",
    "name": "it104",
    "testId": 104,
    "memberof": "test/unit/utils/jwt.spec.js~describe102.describe103",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/jwt.spec.js~describe102.describe103.it104",
    "access": null,
    "description": "defaults to video and includes an expiration",
    "lineNumber": 14,
    "testTargets": [
      "Mux.Utils.JWT.sign"
    ]
  },
  {
    "__docId__": 315,
    "kind": "test",
    "name": "it105",
    "testId": 105,
    "memberof": "test/unit/utils/jwt.spec.js~describe102.describe103",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/jwt.spec.js~describe102.describe103.it105",
    "access": null,
    "description": "maps type video to v",
    "lineNumber": 27
  },
  {
    "__docId__": 316,
    "kind": "test",
    "name": "it106",
    "testId": 106,
    "memberof": "test/unit/utils/jwt.spec.js~describe102.describe103",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/jwt.spec.js~describe102.describe103.it106",
    "access": null,
    "description": "maps type thumbnail to t",
    "lineNumber": 39
  },
  {
    "__docId__": 317,
    "kind": "test",
    "name": "it107",
    "testId": 107,
    "memberof": "test/unit/utils/jwt.spec.js~describe102.describe103",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/jwt.spec.js~describe102.describe103.it107",
    "access": null,
    "description": "maps type gif to g",
    "lineNumber": 51
  },
  {
    "__docId__": 318,
    "kind": "test",
    "name": "it108",
    "testId": 108,
    "memberof": "test/unit/utils/jwt.spec.js~describe102.describe103",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/jwt.spec.js~describe102.describe103.it108",
    "access": null,
    "description": "takes a file path for a secret",
    "lineNumber": 63
  },
  {
    "__docId__": 319,
    "kind": "test",
    "name": "it109",
    "testId": 109,
    "memberof": "test/unit/utils/jwt.spec.js~describe102.describe103",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/jwt.spec.js~describe102.describe103.it109",
    "access": null,
    "description": "falls back to using environment variables for the key and secret",
    "lineNumber": 76
  },
  {
    "__docId__": 320,
    "kind": "test",
    "name": "it110",
    "testId": 110,
    "memberof": "test/unit/utils/jwt.spec.js~describe102.describe103",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/jwt.spec.js~describe102.describe103.it110",
    "access": null,
    "description": "accepts a timestamp or time shorthand",
    "lineNumber": 89
  },
  {
    "__docId__": 321,
    "kind": "testFile",
    "name": "test/unit/video/resources/assets.spec.js",
    "content": "const { expect } = require('chai');\nconst sinon = require('sinon');\nconst moxios = require('moxios');\nconst Assets = require('../../../../src/video/resources/assets');\n\n/** @test {Assets} */\ndescribe('Unit::Assets', () => {\n  const testApiKey = 'testApiKey';\n  const testSecret = 'testSecret';\n  const testAssets = new Assets(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(testAssets.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(testAssets.http);\n  });\n\n  /** @test {Assets} */\n  describe('Assets', () => {\n    /** @test {Assets} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new Assets()).to.throw('API Access Token must be provided.');\n    });\n\n    /** @test {Assets} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new Assets('testKey')).to.throw(\n        'API secret key must be provided'\n      );\n    });\n\n    /** @test {Assets} */\n    it('creates a new Assets instance', () => {\n      const TestAssets = new Assets(testApiKey, testSecret);\n      expect(() => new Assets(testApiKey, testSecret)).to.not.throw();\n      expect(TestAssets.tokenId).to.equal(testApiKey);\n      expect(TestAssets.tokenSecret).to.equal(testSecret);\n    });\n  });\n\n  /** @test {Assets.create} */\n  describe('Assets.create', () => {\n    /** @test {Assets.create} */\n    it('makes a POST request to create an asset', done => {\n      moxios.stubRequest('https://api.mux.com/video/v1/assets', {\n        status: 200,\n        responseText: '{\"data\": {\"create\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testAssets.create({ input: 'test' }).then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].create).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {Assets.create} */\n    it('throws an error if no asset params are given', () =>\n      testAssets.create().catch(err => {\n        expect(err).to.exist;\n        expect(err.message).to.equal(\n          'Params are required for creating an asset'\n        );\n      }));\n  });\n\n  /** @test {Assets.get} */\n  describe('Assets.get', () => {\n    /** @test {Assets.get} */\n    it('makes a GET request to get an asset', done => {\n      moxios.stubRequest('https://api.mux.com/video/v1/assets/testAsset', {\n        status: 200,\n        responseText: '{\"data\": {\"asset\": \"get\"}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testAssets.get('testAsset').then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].asset).to.equal('get');\n        done();\n      });\n    });\n\n    /** @test {Assets.get} */\n    it('throws an error when an asset id is not given', () =>\n      testAssets\n        .get()\n        .then(res => {\n          expect(res).to.not.exist;\n        })\n        .catch(err => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'An asset ID is required to get an asset'\n          );\n        }));\n  });\n\n  /** @test {Assets.del} */\n  describe('Assets.del', () => {\n    /** @test {Assets.del} */\n    it('makes a DELETE request to delete an asset', done => {\n      moxios.stubRequest('https://api.mux.com/video/v1/assets/testAsset', {\n        status: 200,\n        responseText: '{\"data\": {\"asset\": \"delete\"}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testAssets.del('testAsset').then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].asset).to.equal('delete');\n        done();\n      });\n    });\n\n    /** @test {Assets.del} */\n    it('throws an error when an asset id is not given', () =>\n      testAssets\n        .del()\n        .then(res => {\n          expect(res).to.not.exist;\n        })\n        .catch(err => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'An asset ID is required to delete an asset'\n          );\n        }));\n  });\n\n  /** @test {Assets.inputInfo} */\n  describe('Assets.inputInfo', () => {\n    /** @test {Assets.inputInfo} */\n    it('makes a GET request to get input info for an asset', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/video/v1/assets/testAsset/input-info',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"input\": \"info\"}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      testAssets.inputInfo('testAsset').then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].input).to.equal('info');\n        done();\n      });\n    });\n\n    /** @test {Assets.inputInfo} */\n    it('throws an error when an asset id is not given', () =>\n      testAssets\n        .inputInfo()\n        .then(res => {\n          expect(res).to.not.exist;\n        })\n        .catch(err => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'An asset ID is required to get input-info'\n          );\n        }));\n  });\n\n  /** @test {Assets.list} */\n  describe('Assets.list', () => {\n    /** @test {Assets.list} */\n    it('makes a GET request to list all assets', done => {\n      moxios.stubRequest('https://api.mux.com/video/v1/assets', {\n        status: 200,\n        responseText: '{\"data\": {\"list\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testAssets.list().then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].list).to.be.true;\n        done();\n      });\n    });\n\n    it('makes a GET request to list 100 assets offset by 2 pages', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/video/v1/assets?limit=100&page=2',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"list\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      testAssets.list({ limit: 100, page: 2 }).then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].list).to.be.true;\n        done();\n      });\n    });\n  });\n\n  /** @test {Assets.createPlaybackId} */\n  describe('Assets.createPlaybackId', () => {\n    /** @test {Assets.createPlaybackId} */\n    it('makes a POST request to create a Playback Id for an asset', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/video/v1/assets/testAsset/playback-ids',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"create\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      testAssets\n        .createPlaybackId('testAsset', { policy: 'public' })\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].create).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {Assets.createPlaybackId} */\n    it('throws an error if an asset id is not given', () =>\n      testAssets\n        .createPlaybackId()\n        .then(res => {\n          expect(res).to.not.exist;\n        })\n        .catch(err => {\n          expect(err).to.exist;\n          expect(err.message).to.equal('An asset ID is required');\n        }));\n\n    /** @test {Assets.createPlaybackId} */\n    it('throws an error if playbackId params are not given', () =>\n      testAssets\n        .createPlaybackId('assetid')\n        .then(res => {\n          expect(res).to.not.exist;\n        })\n        .catch(err => {\n          expect(err).to.exist;\n          expect(err.message).to.equal('Playback ID params are required');\n        }));\n  });\n\n  /** @test {Assets.deletePlaybackId} */\n  describe('Assets.deletePlaybackId', () => {\n    /** @test {Assets.deletePlaybackId} */\n    it('makes a DELETE request to delete a Playback Id for an asset', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/video/v1/assets/testAsset/playback-ids/testPlaybackId',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"delete\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      testAssets\n        .deletePlaybackId('testAsset', 'testPlaybackId')\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].delete).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {Assets.deletePlaybackId} */\n    it('throws an error if an asset id is not given', () =>\n      testAssets.deletePlaybackId().catch(err => {\n        expect(err).to.exist;\n        expect(err.message).to.equal('An asset ID is required');\n      }));\n\n    /** @test {Assets.deletePlaybackId} */\n    it('throws an error if playbackId params are not given', () =>\n      testAssets.deletePlaybackId('assetid').catch(err => {\n        expect(err).to.exist;\n        expect(err.message).to.equal('A playback ID is required');\n      }));\n  });\n\n  /** @test {Assets.playbackId} */\n  describe('Assets.playbackId', () => {\n    /** @test {Assets.playbackId} */\n    it('makes a GET request to get a Playback Id for an asset', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/video/v1/assets/testAsset/playback-ids/testPlaybackId',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"get\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      testAssets.playbackId('testAsset', 'testPlaybackId').then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].get).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {Assets.playbackId} */\n    it('throws an error if an asset id is not given', () =>\n      testAssets.playbackId().catch(err => {\n        expect(err).to.exist;\n        expect(err.message).to.equal('An asset ID is required');\n      }));\n\n    /** @test {Assets.playbackId} */\n    it('throws an error if playbackId params are not given', () =>\n      testAssets.playbackId('assetid').catch(err => {\n        expect(err).to.exist;\n        expect(err.message).to.equal('A playback ID is required');\n      }));\n  });\n\n  /** @test {Assets.createTrack} */\n  describe('Assets.createTrack', () => {\n    /** @test {Assets.createTrack} */\n    it('makes a POST request to create a text track for an asset', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/video/v1/assets/testAsset/tracks',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"create\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      testAssets\n        .createTrack('testAsset', {\n          url: 'https://example.com/myVIdeo_en.srt',\n          type: 'text',\n          text_type: 'subtitles',\n          language_code: 'en-US',\n        })\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].create).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {Assets.createTrack} */\n    it('throws an error if an asset id is not given', () =>\n      testAssets\n        .createTrack()\n        .then(res => {\n          expect(res).to.not.exist;\n        })\n        .catch(err => {\n          expect(err).to.exist;\n          expect(err.message).to.equal('An asset ID is required');\n        }));\n\n    /** @test {Assets.createTrack} */\n    it('throws an error if track params are not given', () =>\n      testAssets\n        .createTrack('assetid')\n        .then(res => {\n          expect(res).to.not.exist;\n        })\n        .catch(err => {\n          expect(err).to.exist;\n          expect(err.message).to.equal('Text track params are required');\n        }));\n  });\n\n  /** @test {Assets.deleteTrack} */\n  describe('Assets.deleteTrack', () => {\n    /** @test {Assets.deleteTrack} */\n    it('makes a DELETE request to delete a text track for an asset', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/video/v1/assets/testAsset/tracks/testTrackId',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"delete\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      testAssets.deleteTrack('testAsset', 'testTrackId').then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].delete).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {Assets.deleteTrack} */\n    it('throws an error if an asset id is not given', () =>\n      testAssets.deleteTrack().catch(err => {\n        expect(err).to.exist;\n        expect(err.message).to.equal('An asset ID is required');\n      }));\n\n    /** @test {Assets.deleteTrack} */\n    it('throws an error if text track ID is not given', () =>\n      testAssets.deleteTrack('assetid').catch(err => {\n        expect(err).to.exist;\n        expect(err.message).to.equal('A track ID is required');\n      }));\n  });\n\n  /** @test {Assets.updateMp4Support} */\n  describe('Assets.updateMp4Support', () => {\n    /** @test {Assets.updateMp4Support} */\n    it('makes a PUT request to update the mp4 support', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/video/v1/assets/testAsset/mp4-support',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"update\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      testAssets\n        .updateMp4Support('testAsset', { mp4_support: 'standard' })\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].update).to.be.true;\n        done();\n      });\n    });\n  });\n\n  /** @test {Assets.updateMasterAccess} */\n  describe('Assets.updateMasterAccess', () => {\n    /** @test {Assets.updateMasterAccess} */\n    it('makes a PUT request to update the master access', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/video/v1/assets/testAsset/master-access',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"update\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      testAssets\n        .updateMasterAccess('testAsset', { master_access: 'temporary' })\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].update).to.be.true;\n        done();\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/test/unit/video/resources/assets.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 322,
    "kind": "test",
    "name": "describe111",
    "testId": 111,
    "memberof": "test/unit/video/resources/assets.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111",
    "access": null,
    "description": "Unit::Assets",
    "lineNumber": 7,
    "testTargets": [
      "Assets"
    ]
  },
  {
    "__docId__": 323,
    "kind": "test",
    "name": "describe112",
    "testId": 112,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe112",
    "access": null,
    "description": "Assets",
    "lineNumber": 21,
    "testTargets": [
      "Assets"
    ]
  },
  {
    "__docId__": 324,
    "kind": "test",
    "name": "it113",
    "testId": 113,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe112",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe112.it113",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 23,
    "testTargets": [
      "Assets"
    ]
  },
  {
    "__docId__": 325,
    "kind": "test",
    "name": "it114",
    "testId": 114,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe112",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe112.it114",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 28,
    "testTargets": [
      "Assets"
    ]
  },
  {
    "__docId__": 326,
    "kind": "test",
    "name": "it115",
    "testId": 115,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe112",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe112.it115",
    "access": null,
    "description": "creates a new Assets instance",
    "lineNumber": 35,
    "testTargets": [
      "Assets"
    ]
  },
  {
    "__docId__": 327,
    "kind": "test",
    "name": "describe116",
    "testId": 116,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe116",
    "access": null,
    "description": "Assets.create",
    "lineNumber": 44,
    "testTargets": [
      "Assets.create"
    ]
  },
  {
    "__docId__": 328,
    "kind": "test",
    "name": "it117",
    "testId": 117,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe116",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe116.it117",
    "access": null,
    "description": "makes a POST request to create an asset",
    "lineNumber": 46,
    "testTargets": [
      "Assets.create"
    ]
  },
  {
    "__docId__": 329,
    "kind": "test",
    "name": "it118",
    "testId": 118,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe116",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe116.it118",
    "access": null,
    "description": "throws an error if no asset params are given",
    "lineNumber": 62,
    "testTargets": [
      "Assets.create"
    ]
  },
  {
    "__docId__": 330,
    "kind": "test",
    "name": "describe119",
    "testId": 119,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe119",
    "access": null,
    "description": "Assets.get",
    "lineNumber": 72,
    "testTargets": [
      "Assets.get"
    ]
  },
  {
    "__docId__": 331,
    "kind": "test",
    "name": "it120",
    "testId": 120,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe119",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe119.it120",
    "access": null,
    "description": "makes a GET request to get an asset",
    "lineNumber": 74,
    "testTargets": [
      "Assets.get"
    ]
  },
  {
    "__docId__": 332,
    "kind": "test",
    "name": "it121",
    "testId": 121,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe119",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe119.it121",
    "access": null,
    "description": "throws an error when an asset id is not given",
    "lineNumber": 90,
    "testTargets": [
      "Assets.get"
    ]
  },
  {
    "__docId__": 333,
    "kind": "test",
    "name": "describe122",
    "testId": 122,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe122",
    "access": null,
    "description": "Assets.del",
    "lineNumber": 105,
    "testTargets": [
      "Assets.del"
    ]
  },
  {
    "__docId__": 334,
    "kind": "test",
    "name": "it123",
    "testId": 123,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe122",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe122.it123",
    "access": null,
    "description": "makes a DELETE request to delete an asset",
    "lineNumber": 107,
    "testTargets": [
      "Assets.del"
    ]
  },
  {
    "__docId__": 335,
    "kind": "test",
    "name": "it124",
    "testId": 124,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe122",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe122.it124",
    "access": null,
    "description": "throws an error when an asset id is not given",
    "lineNumber": 123,
    "testTargets": [
      "Assets.del"
    ]
  },
  {
    "__docId__": 336,
    "kind": "test",
    "name": "describe125",
    "testId": 125,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe125",
    "access": null,
    "description": "Assets.inputInfo",
    "lineNumber": 138,
    "testTargets": [
      "Assets.inputInfo"
    ]
  },
  {
    "__docId__": 337,
    "kind": "test",
    "name": "it126",
    "testId": 126,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe125.it126",
    "access": null,
    "description": "makes a GET request to get input info for an asset",
    "lineNumber": 140,
    "testTargets": [
      "Assets.inputInfo"
    ]
  },
  {
    "__docId__": 338,
    "kind": "test",
    "name": "it127",
    "testId": 127,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe125.it127",
    "access": null,
    "description": "throws an error when an asset id is not given",
    "lineNumber": 159,
    "testTargets": [
      "Assets.inputInfo"
    ]
  },
  {
    "__docId__": 339,
    "kind": "test",
    "name": "describe128",
    "testId": 128,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe128",
    "access": null,
    "description": "Assets.list",
    "lineNumber": 174,
    "testTargets": [
      "Assets.list"
    ]
  },
  {
    "__docId__": 340,
    "kind": "test",
    "name": "it129",
    "testId": 129,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe128",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe128.it129",
    "access": null,
    "description": "makes a GET request to list all assets",
    "lineNumber": 176,
    "testTargets": [
      "Assets.list"
    ]
  },
  {
    "__docId__": 341,
    "kind": "test",
    "name": "it130",
    "testId": 130,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe128",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe128.it130",
    "access": null,
    "description": "makes a GET request to list 100 assets offset by 2 pages",
    "lineNumber": 191
  },
  {
    "__docId__": 342,
    "kind": "test",
    "name": "describe131",
    "testId": 131,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe131",
    "access": null,
    "description": "Assets.createPlaybackId",
    "lineNumber": 211,
    "testTargets": [
      "Assets.createPlaybackId"
    ]
  },
  {
    "__docId__": 343,
    "kind": "test",
    "name": "it132",
    "testId": 132,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe131",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe131.it132",
    "access": null,
    "description": "makes a POST request to create a Playback Id for an asset",
    "lineNumber": 213,
    "testTargets": [
      "Assets.createPlaybackId"
    ]
  },
  {
    "__docId__": 344,
    "kind": "test",
    "name": "it133",
    "testId": 133,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe131",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe131.it133",
    "access": null,
    "description": "throws an error if an asset id is not given",
    "lineNumber": 234,
    "testTargets": [
      "Assets.createPlaybackId"
    ]
  },
  {
    "__docId__": 345,
    "kind": "test",
    "name": "it134",
    "testId": 134,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe131",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe131.it134",
    "access": null,
    "description": "throws an error if playbackId params are not given",
    "lineNumber": 246,
    "testTargets": [
      "Assets.createPlaybackId"
    ]
  },
  {
    "__docId__": 346,
    "kind": "test",
    "name": "describe135",
    "testId": 135,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe135",
    "access": null,
    "description": "Assets.deletePlaybackId",
    "lineNumber": 259,
    "testTargets": [
      "Assets.deletePlaybackId"
    ]
  },
  {
    "__docId__": 347,
    "kind": "test",
    "name": "it136",
    "testId": 136,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe135",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe135.it136",
    "access": null,
    "description": "makes a DELETE request to delete a Playback Id for an asset",
    "lineNumber": 261,
    "testTargets": [
      "Assets.deletePlaybackId"
    ]
  },
  {
    "__docId__": 348,
    "kind": "test",
    "name": "it137",
    "testId": 137,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe135",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe135.it137",
    "access": null,
    "description": "throws an error if an asset id is not given",
    "lineNumber": 282,
    "testTargets": [
      "Assets.deletePlaybackId"
    ]
  },
  {
    "__docId__": 349,
    "kind": "test",
    "name": "it138",
    "testId": 138,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe135",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe135.it138",
    "access": null,
    "description": "throws an error if playbackId params are not given",
    "lineNumber": 289,
    "testTargets": [
      "Assets.deletePlaybackId"
    ]
  },
  {
    "__docId__": 350,
    "kind": "test",
    "name": "describe139",
    "testId": 139,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe139",
    "access": null,
    "description": "Assets.playbackId",
    "lineNumber": 297,
    "testTargets": [
      "Assets.playbackId"
    ]
  },
  {
    "__docId__": 351,
    "kind": "test",
    "name": "it140",
    "testId": 140,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe139",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe139.it140",
    "access": null,
    "description": "makes a GET request to get a Playback Id for an asset",
    "lineNumber": 299,
    "testTargets": [
      "Assets.playbackId"
    ]
  },
  {
    "__docId__": 352,
    "kind": "test",
    "name": "it141",
    "testId": 141,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe139",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe139.it141",
    "access": null,
    "description": "throws an error if an asset id is not given",
    "lineNumber": 318,
    "testTargets": [
      "Assets.playbackId"
    ]
  },
  {
    "__docId__": 353,
    "kind": "test",
    "name": "it142",
    "testId": 142,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe139",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe139.it142",
    "access": null,
    "description": "throws an error if playbackId params are not given",
    "lineNumber": 325,
    "testTargets": [
      "Assets.playbackId"
    ]
  },
  {
    "__docId__": 354,
    "kind": "test",
    "name": "describe143",
    "testId": 143,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe143",
    "access": null,
    "description": "Assets.createTrack",
    "lineNumber": 333,
    "testTargets": [
      "Assets.createTrack"
    ]
  },
  {
    "__docId__": 355,
    "kind": "test",
    "name": "it144",
    "testId": 144,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe143",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe143.it144",
    "access": null,
    "description": "makes a POST request to create a text track for an asset",
    "lineNumber": 335,
    "testTargets": [
      "Assets.createTrack"
    ]
  },
  {
    "__docId__": 356,
    "kind": "test",
    "name": "it145",
    "testId": 145,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe143",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe143.it145",
    "access": null,
    "description": "throws an error if an asset id is not given",
    "lineNumber": 361,
    "testTargets": [
      "Assets.createTrack"
    ]
  },
  {
    "__docId__": 357,
    "kind": "test",
    "name": "it146",
    "testId": 146,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe143",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe143.it146",
    "access": null,
    "description": "throws an error if track params are not given",
    "lineNumber": 373,
    "testTargets": [
      "Assets.createTrack"
    ]
  },
  {
    "__docId__": 358,
    "kind": "test",
    "name": "describe147",
    "testId": 147,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe147",
    "access": null,
    "description": "Assets.deleteTrack",
    "lineNumber": 386,
    "testTargets": [
      "Assets.deleteTrack"
    ]
  },
  {
    "__docId__": 359,
    "kind": "test",
    "name": "it148",
    "testId": 148,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe147",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe147.it148",
    "access": null,
    "description": "makes a DELETE request to delete a text track for an asset",
    "lineNumber": 388,
    "testTargets": [
      "Assets.deleteTrack"
    ]
  },
  {
    "__docId__": 360,
    "kind": "test",
    "name": "it149",
    "testId": 149,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe147",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe147.it149",
    "access": null,
    "description": "throws an error if an asset id is not given",
    "lineNumber": 407,
    "testTargets": [
      "Assets.deleteTrack"
    ]
  },
  {
    "__docId__": 361,
    "kind": "test",
    "name": "it150",
    "testId": 150,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe147",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe147.it150",
    "access": null,
    "description": "throws an error if text track ID is not given",
    "lineNumber": 414,
    "testTargets": [
      "Assets.deleteTrack"
    ]
  },
  {
    "__docId__": 362,
    "kind": "test",
    "name": "describe151",
    "testId": 151,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe151",
    "access": null,
    "description": "Assets.updateMp4Support",
    "lineNumber": 422,
    "testTargets": [
      "Assets.updateMp4Support"
    ]
  },
  {
    "__docId__": 363,
    "kind": "test",
    "name": "it152",
    "testId": 152,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe151",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe151.it152",
    "access": null,
    "description": "makes a PUT request to update the mp4 support",
    "lineNumber": 424,
    "testTargets": [
      "Assets.updateMp4Support"
    ]
  },
  {
    "__docId__": 364,
    "kind": "test",
    "name": "describe153",
    "testId": 153,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe153",
    "access": null,
    "description": "Assets.updateMasterAccess",
    "lineNumber": 446,
    "testTargets": [
      "Assets.updateMasterAccess"
    ]
  },
  {
    "__docId__": 365,
    "kind": "test",
    "name": "it154",
    "testId": 154,
    "memberof": "test/unit/video/resources/assets.spec.js~describe111.describe153",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe111.describe153.it154",
    "access": null,
    "description": "makes a PUT request to update the master access",
    "lineNumber": 448,
    "testTargets": [
      "Assets.updateMasterAccess"
    ]
  },
  {
    "__docId__": 366,
    "kind": "testFile",
    "name": "test/unit/video/resources/deliveryUsage.spec.js",
    "content": "const { expect } = require('chai');\nconst sinon = require('sinon');\nconst moxios = require('moxios');\nconst DeliveryUsage = require('../../../../src/video/resources/deliveryUsage');\n\n/** @test {DeliveryUsage} */\ndescribe('Unit::DeliveryUsage', () => {\n  const testApiKey = 'testApiKey';\n  const testSecret = 'testSecret';\n  const testDeliveryUsage = new DeliveryUsage(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(testDeliveryUsage.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(testDeliveryUsage.http);\n  });\n\n  /** @test {DeliveryUsage.list} */\n  describe('DeliveryUsage.list', () => {\n    /** @test {DeliveryUsage.list} */\n    it('makes a GET request to list delivery usage', done => {\n      moxios.stubRequest('https://api.mux.com/video/v1/delivery-usage', {\n        status: 200,\n        responseText: '{\"data\": {\"list\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testDeliveryUsage.list().then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].list).to.be.true;\n        done();\n      });\n    });\n\n    it('makes a GET request to list 100 delivery usage records offset by 2 pages with a timeframe', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/video/v1/delivery-usage?asset_id=123&limit=100&page=2&timeframe[]=1573471440&timeframe[]=1574076240',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"list\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      const date1 =\n        new Date('Mon Nov 11 2019 03:24:00 GMT-0800 (PST)').valueOf() / 1000;\n      const date2 =\n        new Date('Mon Nov 18 2019 03:24:00 GMT-0800 (PST)').valueOf() / 1000;\n      testDeliveryUsage\n        .list({\n          asset_id: '123',\n          limit: 100,\n          page: 2,\n          timeframe: [date1, date2],\n        })\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].list).to.be.true;\n        done();\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/test/unit/video/resources/deliveryUsage.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 367,
    "kind": "test",
    "name": "describe155",
    "testId": 155,
    "memberof": "test/unit/video/resources/deliveryUsage.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/video/resources/deliveryUsage.spec.js~describe155",
    "access": null,
    "description": "Unit::DeliveryUsage",
    "lineNumber": 7,
    "testTargets": [
      "DeliveryUsage"
    ]
  },
  {
    "__docId__": 368,
    "kind": "test",
    "name": "describe156",
    "testId": 156,
    "memberof": "test/unit/video/resources/deliveryUsage.spec.js~describe155",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/deliveryUsage.spec.js~describe155.describe156",
    "access": null,
    "description": "DeliveryUsage.list",
    "lineNumber": 21,
    "testTargets": [
      "DeliveryUsage.list"
    ]
  },
  {
    "__docId__": 369,
    "kind": "test",
    "name": "it157",
    "testId": 157,
    "memberof": "test/unit/video/resources/deliveryUsage.spec.js~describe155.describe156",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/deliveryUsage.spec.js~describe155.describe156.it157",
    "access": null,
    "description": "makes a GET request to list delivery usage",
    "lineNumber": 23,
    "testTargets": [
      "DeliveryUsage.list"
    ]
  },
  {
    "__docId__": 370,
    "kind": "test",
    "name": "it158",
    "testId": 158,
    "memberof": "test/unit/video/resources/deliveryUsage.spec.js~describe155.describe156",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/deliveryUsage.spec.js~describe155.describe156.it158",
    "access": null,
    "description": "makes a GET request to list 100 delivery usage records offset by 2 pages with a timeframe",
    "lineNumber": 38
  },
  {
    "__docId__": 371,
    "kind": "testFile",
    "name": "test/unit/video/resources/liveStreams.spec.js",
    "content": "const { expect } = require('chai');\nconst sinon = require('sinon');\nconst moxios = require('moxios');\nconst LiveStreams = require('../../../../src/video/resources/liveStreams');\n\n/** @test {LiveStreams} */\ndescribe('Unit::LiveStreams', () => {\n  const testApiKey = 'testApiKey';\n  const testSecret = 'testSecret';\n  const testLiveStreams = new LiveStreams(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(testLiveStreams.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(testLiveStreams.http);\n  });\n\n  /** @test {LiveStreams} */\n  describe('LiveStreams', () => {\n    /** @test {LiveStreams} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new LiveStreams()).to.throw(\n        'API Access Token must be provided.'\n      );\n    });\n\n    /** @test {LiveStreams} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new LiveStreams('testKey')).to.throw(\n        'API secret key must be provided'\n      );\n    });\n\n    /** @test {LiveStreams} */\n    it('creates a new LiveStreams instance', () => {\n      const TestLiveStreams = new LiveStreams(testApiKey, testSecret);\n      expect(() => new LiveStreams(testApiKey, testSecret)).to.not.throw();\n      expect(TestLiveStreams.tokenId).to.equal(testApiKey);\n      expect(TestLiveStreams.tokenSecret).to.equal(testSecret);\n    });\n  });\n\n  /** @test {LiveStreams.create} */\n  describe('LiveStreams.create', () => {\n    /** @test {LiveStreams.create} */\n    it('makes a POST request to create a LiveStream asset', done => {\n      moxios.stubRequest('https://api.mux.com/video/v1/live-streams', {\n        status: 200,\n        responseText: '{\"data\": {\"create\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testLiveStreams\n        .create('testLiveStream', {\n          playback_policy: 'public',\n          new_asset_settings: { playback_policy: 'public' },\n        })\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].create).to.be.true;\n        done();\n      });\n    });\n  });\n\n  /** @test {LiveStreams.del} */\n  describe('LiveStreams.del', () => {\n    /** @test {LiveStreams.del} */\n    it('makes a DELETE request to delete a live stream', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/video/v1/live-streams/testLiveStream',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"deleteLive\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      testLiveStreams.del('testLiveStream').then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].deleteLive).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {LiveStreams.del} */\n    it('throws an error when a live stream ID is not given', () =>\n      testLiveStreams\n        .del()\n        .then(res => {\n          expect(res).to.not.exist;\n        })\n        .catch(err => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A live stream ID is required to delete a live stream'\n          );\n        }));\n  });\n\n  /** @test {LiveStreams.list} */\n  describe('LiveStreams.list', () => {\n    /** @test {LiveStreams.list} */\n    it('makes a GET request to list all live streams', done => {\n      moxios.stubRequest('https://api.mux.com/video/v1/live-streams', {\n        status: 200,\n        responseText: '{\"data\": {\"list\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testLiveStreams.list().then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].list).to.be.true;\n        done();\n      });\n    });\n\n    it('makes a GET request to list 100 live streams offset by 2 pages', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/video/v1/live-streams?limit=100&page=2',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"list\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      testLiveStreams.list({ limit: 100, page: 2 }).then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].list).to.be.true;\n        done();\n      });\n    });\n  });\n\n  /** @test {LiveStreams.get} */\n  describe('LiveStreams.get', () => {\n    /** @test {LiveStreams.get} */\n    it('makes a GET request to get a live stream', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/video/v1/live-streams/testLiveStream',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"live_stream\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      testLiveStreams.get('testLiveStream').then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].live_stream).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {LiveStreams.get} */\n    it('throws an error when a live stream ID is not given', () =>\n      testLiveStreams\n        .get()\n        .then(res => {\n          expect(res).to.not.exist;\n        })\n        .catch(err => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A live stream ID is required to get a live stream'\n          );\n        }));\n  });\n\n  /** @test {LiveStreams.signalComplete} */\n  describe('LiveStreams.signalComplete', () => {\n    /** @test {LiveStreams.signalComplete} */\n    it('makes a PUT request to signal a live stream is complete', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/video/v1/live-streams/testLiveStream/complete',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"live_stream\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      testLiveStreams.signalComplete('testLiveStream').then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].live_stream).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {LiveStreams.signalComplete} */\n    it('throws an error when a live stream ID is not given', () =>\n      testLiveStreams\n        .signalComplete()\n        .then(res => {\n          expect(res).to.not.exist;\n        })\n        .catch(err => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A live stream ID is required to signal a stream is complete'\n          );\n        }));\n  });\n\n  /** @test {LiveStreams.resetStreamKey} */\n  describe('LiveStreams.resetStreamKey', () => {\n    /** @test {LiveStreams.resetStreamKey} */\n    it('makes a POST request to reset a live stream key', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/video/v1/live-streams/testLiveStream/reset-stream-key',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"live_stream\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      testLiveStreams.resetStreamKey('testLiveStream').then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].live_stream).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {LiveStreams.resetStreamKey} */\n    it('throws an error when a live stream ID is not given', () =>\n      testLiveStreams\n        .resetStreamKey()\n        .then(res => {\n          expect(res).to.not.exist;\n        })\n        .catch(err => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A live stream ID is required to reset a live stream key'\n          );\n        }));\n  });\n\n  /** @test {LiveStreams.createPlaybackId} */\n  describe('LiveStreams.createPlaybackId', () => {\n    /** @test {LiveStreams.createPlaybackId} */\n    it('makes a POST request to create a playback ID for a live stream', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/video/v1/live-streams/testLiveStream/playback-ids',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"create\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      testLiveStreams\n        .createPlaybackId('testLiveStream', { policy: 'public' })\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].create).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {LiveStreams.createPlaybackId} */\n    it('throws an error if params are not given', () =>\n      testLiveStreams\n        .createPlaybackId('testLiveStream')\n        .then(res => {\n          expect(res).to.not.exist;\n        })\n        .catch(err => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A playback policy is required to create a live stream playback ID'\n          );\n        }));\n\n    /** @test {LiveStreams.createPlaybackId} */\n    it('throws an error if a live stream ID is not given', () =>\n      testLiveStreams\n        .createPlaybackId()\n        .then(res => {\n          expect(res).to.not.exist;\n        })\n        .catch(err => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A live stream ID is required to create a live stream playback ID'\n          );\n        }));\n  });\n\n  /** @test {LiveStreams.deletePlaybackId} */\n  describe('LiveStreams.deletePlaybackId', () => {\n    /** @test {LiveStreams.deletePlaybackId} */\n    it('makes a DELETE request to delete a playback ID for a live stream', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/video/v1/live-streams/testLiveStream/playback-ids/testPlaybackId',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"delete\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      testLiveStreams\n        .deletePlaybackId('testLiveStream', 'testPlaybackId')\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].delete).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {LiveStreams.deletePlaybackId} */\n    it('throws an error if a live stream ID is not given', () =>\n      testLiveStreams\n        .deletePlaybackId()\n        .then(res => {\n          expect(res).to.not.exist;\n        })\n        .catch(err => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A live stream ID is required to delete a live stream playback ID'\n          );\n        }));\n\n    /** @test {LiveStreams.deletePlaybackId} */\n    it('throws an error if a playback id is not given', () =>\n      testLiveStreams\n        .deletePlaybackId('liveStreamId')\n        .then(res => {\n          expect(res).to.not.exist;\n        })\n        .catch(err => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A live stream playback ID is required to delete a live stream playback ID'\n          );\n        }));\n  });\n\n  /** @test {LiveStreams.createSimulcastTarget} */\n  describe('LiveStreams.createSimulcastTarget', () => {\n    /** @test {LiveStreams.createSimulcastTarget} */\n    it('makes a POST request to create a simulcast target for a live stream', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/video/v1/live-streams/testLiveStream/simulcast-targets',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"create\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      testLiveStreams\n        .createSimulcastTarget('testLiveStream', {\n          url: 'rtmp://live.example.com/app',\n          stream_key: 'difvbfgi',\n        })\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].create).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {LiveStreams.createSimulcastTarget} */\n    it('throws an error if a live stream ID is not given', () =>\n      testLiveStreams\n        .createSimulcastTarget()\n        .then(res => {\n          expect(res).to.not.exist;\n        })\n        .catch(err => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A live stream ID is required to create a simulcast target'\n          );\n        }));\n\n    /** @test {LiveStreams.createSimulcastTarget} */\n    it('throws an error if a url and stream key are not given', () =>\n      testLiveStreams\n        .createSimulcastTarget('testLiveStream')\n        .then(res => {\n          expect(res).to.not.exist;\n        })\n        .catch(err => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A url is required to create a simulcast target'\n          );\n        }));\n  });\n\n  /** @test {LiveStreams.getSimulcastTarget} */\n  describe('LiveStreams.getSimulcastTarget', () => {\n    /** @test {LiveStreams.getSimulcastTarget} */\n    it('makes a GET request to get a simulcast target for a live stream', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/video/v1/live-streams/testLiveStream/simulcast-targets/testSimulcastTarget',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"simulcast_target\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      testLiveStreams\n        .getSimulcastTarget('testLiveStream', 'testSimulcastTarget')\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].simulcast_target).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {LiveStreams.getSimulcastTarget} */\n    it('throws an error if a live stream ID is not given', () =>\n      testLiveStreams\n        .getSimulcastTarget()\n        .then(res => {\n          expect(res).to.not.exist;\n        })\n        .catch(err => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A live stream ID is required to get a simulcast target'\n          );\n        }));\n\n    /** @test {LiveStreams.createSimulcastTarget} */\n    it('throws an error if a simulcast target id is not given', () =>\n      testLiveStreams\n        .getSimulcastTarget('testLiveStream')\n        .then(res => {\n          expect(res).to.not.exist;\n        })\n        .catch(err => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A simulcast target ID is required to get a simulcast target'\n          );\n        }));\n  });\n\n  /** @test {LiveStreams.deleteSimulcastTarget} */\n  describe('LiveStreams.deleteSimulcastTarget', () => {\n    /** @test {LiveStreams.deleteSimulcastTarget} */\n    it('makes a DELETE request to delete a simulcast target for a live stream', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/video/v1/live-streams/testLiveStream/simulcast-targets/testSimulcastTarget',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"deleteSimulcastTarget\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      testLiveStreams\n        .deleteSimulcastTarget('testLiveStream', 'testSimulcastTarget')\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].deleteSimulcastTarget).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {LiveStreams.deleteSimulcastTarget} */\n    it('throws an error if a live stream ID is not given', () =>\n      testLiveStreams\n        .deleteSimulcastTarget()\n        .then(res => {\n          expect(res).to.not.exist;\n        })\n        .catch(err => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A live stream ID is required to delete a simulcast target'\n          );\n        }));\n\n    /** @test {LiveStreams.deleteSimulcastTarget} */\n    it('throws an error if a simulcast target id is not given', () =>\n      testLiveStreams\n        .deleteSimulcastTarget('testLiveStream')\n        .then(res => {\n          expect(res).to.not.exist;\n        })\n        .catch(err => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A simulcast target ID is required to delete a simulcast target'\n          );\n        }));\n  });\n});\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/test/unit/video/resources/liveStreams.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 372,
    "kind": "test",
    "name": "describe159",
    "testId": 159,
    "memberof": "test/unit/video/resources/liveStreams.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159",
    "access": null,
    "description": "Unit::LiveStreams",
    "lineNumber": 7,
    "testTargets": [
      "LiveStreams"
    ]
  },
  {
    "__docId__": 373,
    "kind": "test",
    "name": "describe160",
    "testId": 160,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe160",
    "access": null,
    "description": "LiveStreams",
    "lineNumber": 21,
    "testTargets": [
      "LiveStreams"
    ]
  },
  {
    "__docId__": 374,
    "kind": "test",
    "name": "it161",
    "testId": 161,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe160",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe160.it161",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 23,
    "testTargets": [
      "LiveStreams"
    ]
  },
  {
    "__docId__": 375,
    "kind": "test",
    "name": "it162",
    "testId": 162,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe160",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe160.it162",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 30,
    "testTargets": [
      "LiveStreams"
    ]
  },
  {
    "__docId__": 376,
    "kind": "test",
    "name": "it163",
    "testId": 163,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe160",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe160.it163",
    "access": null,
    "description": "creates a new LiveStreams instance",
    "lineNumber": 37,
    "testTargets": [
      "LiveStreams"
    ]
  },
  {
    "__docId__": 377,
    "kind": "test",
    "name": "describe164",
    "testId": 164,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe164",
    "access": null,
    "description": "LiveStreams.create",
    "lineNumber": 46,
    "testTargets": [
      "LiveStreams.create"
    ]
  },
  {
    "__docId__": 378,
    "kind": "test",
    "name": "it165",
    "testId": 165,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe164",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe164.it165",
    "access": null,
    "description": "makes a POST request to create a LiveStream asset",
    "lineNumber": 48,
    "testTargets": [
      "LiveStreams.create"
    ]
  },
  {
    "__docId__": 379,
    "kind": "test",
    "name": "describe166",
    "testId": 166,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe166",
    "access": null,
    "description": "LiveStreams.del",
    "lineNumber": 70,
    "testTargets": [
      "LiveStreams.del"
    ]
  },
  {
    "__docId__": 380,
    "kind": "test",
    "name": "it167",
    "testId": 167,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe166",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe166.it167",
    "access": null,
    "description": "makes a DELETE request to delete a live stream",
    "lineNumber": 72,
    "testTargets": [
      "LiveStreams.del"
    ]
  },
  {
    "__docId__": 381,
    "kind": "test",
    "name": "it168",
    "testId": 168,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe166",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe166.it168",
    "access": null,
    "description": "throws an error when a live stream ID is not given",
    "lineNumber": 91,
    "testTargets": [
      "LiveStreams.del"
    ]
  },
  {
    "__docId__": 382,
    "kind": "test",
    "name": "describe169",
    "testId": 169,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe169",
    "access": null,
    "description": "LiveStreams.list",
    "lineNumber": 106,
    "testTargets": [
      "LiveStreams.list"
    ]
  },
  {
    "__docId__": 383,
    "kind": "test",
    "name": "it170",
    "testId": 170,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe169",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe169.it170",
    "access": null,
    "description": "makes a GET request to list all live streams",
    "lineNumber": 108,
    "testTargets": [
      "LiveStreams.list"
    ]
  },
  {
    "__docId__": 384,
    "kind": "test",
    "name": "it171",
    "testId": 171,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe169",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe169.it171",
    "access": null,
    "description": "makes a GET request to list 100 live streams offset by 2 pages",
    "lineNumber": 123
  },
  {
    "__docId__": 385,
    "kind": "test",
    "name": "describe172",
    "testId": 172,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe172",
    "access": null,
    "description": "LiveStreams.get",
    "lineNumber": 143,
    "testTargets": [
      "LiveStreams.get"
    ]
  },
  {
    "__docId__": 386,
    "kind": "test",
    "name": "it173",
    "testId": 173,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe172",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe172.it173",
    "access": null,
    "description": "makes a GET request to get a live stream",
    "lineNumber": 145,
    "testTargets": [
      "LiveStreams.get"
    ]
  },
  {
    "__docId__": 387,
    "kind": "test",
    "name": "it174",
    "testId": 174,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe172",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe172.it174",
    "access": null,
    "description": "throws an error when a live stream ID is not given",
    "lineNumber": 164,
    "testTargets": [
      "LiveStreams.get"
    ]
  },
  {
    "__docId__": 388,
    "kind": "test",
    "name": "describe175",
    "testId": 175,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe175",
    "access": null,
    "description": "LiveStreams.signalComplete",
    "lineNumber": 179,
    "testTargets": [
      "LiveStreams.signalComplete"
    ]
  },
  {
    "__docId__": 389,
    "kind": "test",
    "name": "it176",
    "testId": 176,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe175.it176",
    "access": null,
    "description": "makes a PUT request to signal a live stream is complete",
    "lineNumber": 181,
    "testTargets": [
      "LiveStreams.signalComplete"
    ]
  },
  {
    "__docId__": 390,
    "kind": "test",
    "name": "it177",
    "testId": 177,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe175.it177",
    "access": null,
    "description": "throws an error when a live stream ID is not given",
    "lineNumber": 200,
    "testTargets": [
      "LiveStreams.signalComplete"
    ]
  },
  {
    "__docId__": 391,
    "kind": "test",
    "name": "describe178",
    "testId": 178,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe178",
    "access": null,
    "description": "LiveStreams.resetStreamKey",
    "lineNumber": 215,
    "testTargets": [
      "LiveStreams.resetStreamKey"
    ]
  },
  {
    "__docId__": 392,
    "kind": "test",
    "name": "it179",
    "testId": 179,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe178",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe178.it179",
    "access": null,
    "description": "makes a POST request to reset a live stream key",
    "lineNumber": 217,
    "testTargets": [
      "LiveStreams.resetStreamKey"
    ]
  },
  {
    "__docId__": 393,
    "kind": "test",
    "name": "it180",
    "testId": 180,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe178",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe178.it180",
    "access": null,
    "description": "throws an error when a live stream ID is not given",
    "lineNumber": 236,
    "testTargets": [
      "LiveStreams.resetStreamKey"
    ]
  },
  {
    "__docId__": 394,
    "kind": "test",
    "name": "describe181",
    "testId": 181,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe181",
    "access": null,
    "description": "LiveStreams.createPlaybackId",
    "lineNumber": 251,
    "testTargets": [
      "LiveStreams.createPlaybackId"
    ]
  },
  {
    "__docId__": 395,
    "kind": "test",
    "name": "it182",
    "testId": 182,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe181",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe181.it182",
    "access": null,
    "description": "makes a POST request to create a playback ID for a live stream",
    "lineNumber": 253,
    "testTargets": [
      "LiveStreams.createPlaybackId"
    ]
  },
  {
    "__docId__": 396,
    "kind": "test",
    "name": "it183",
    "testId": 183,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe181",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe181.it183",
    "access": null,
    "description": "throws an error if params are not given",
    "lineNumber": 274,
    "testTargets": [
      "LiveStreams.createPlaybackId"
    ]
  },
  {
    "__docId__": 397,
    "kind": "test",
    "name": "it184",
    "testId": 184,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe181",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe181.it184",
    "access": null,
    "description": "throws an error if a live stream ID is not given",
    "lineNumber": 288,
    "testTargets": [
      "LiveStreams.createPlaybackId"
    ]
  },
  {
    "__docId__": 398,
    "kind": "test",
    "name": "describe185",
    "testId": 185,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe185",
    "access": null,
    "description": "LiveStreams.deletePlaybackId",
    "lineNumber": 303,
    "testTargets": [
      "LiveStreams.deletePlaybackId"
    ]
  },
  {
    "__docId__": 399,
    "kind": "test",
    "name": "it186",
    "testId": 186,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe185",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe185.it186",
    "access": null,
    "description": "makes a DELETE request to delete a playback ID for a live stream",
    "lineNumber": 305,
    "testTargets": [
      "LiveStreams.deletePlaybackId"
    ]
  },
  {
    "__docId__": 400,
    "kind": "test",
    "name": "it187",
    "testId": 187,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe185",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe185.it187",
    "access": null,
    "description": "throws an error if a live stream ID is not given",
    "lineNumber": 326,
    "testTargets": [
      "LiveStreams.deletePlaybackId"
    ]
  },
  {
    "__docId__": 401,
    "kind": "test",
    "name": "it188",
    "testId": 188,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe185",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe185.it188",
    "access": null,
    "description": "throws an error if a playback id is not given",
    "lineNumber": 340,
    "testTargets": [
      "LiveStreams.deletePlaybackId"
    ]
  },
  {
    "__docId__": 402,
    "kind": "test",
    "name": "describe189",
    "testId": 189,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe189",
    "access": null,
    "description": "LiveStreams.createSimulcastTarget",
    "lineNumber": 355,
    "testTargets": [
      "LiveStreams.createSimulcastTarget"
    ]
  },
  {
    "__docId__": 403,
    "kind": "test",
    "name": "it190",
    "testId": 190,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe189",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe189.it190",
    "access": null,
    "description": "makes a POST request to create a simulcast target for a live stream",
    "lineNumber": 357,
    "testTargets": [
      "LiveStreams.createSimulcastTarget"
    ]
  },
  {
    "__docId__": 404,
    "kind": "test",
    "name": "it191",
    "testId": 191,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe189",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe189.it191",
    "access": null,
    "description": "throws an error if a live stream ID is not given",
    "lineNumber": 381,
    "testTargets": [
      "LiveStreams.createSimulcastTarget"
    ]
  },
  {
    "__docId__": 405,
    "kind": "test",
    "name": "it192",
    "testId": 192,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe189",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe189.it192",
    "access": null,
    "description": "throws an error if a url and stream key are not given",
    "lineNumber": 395,
    "testTargets": [
      "LiveStreams.createSimulcastTarget"
    ]
  },
  {
    "__docId__": 406,
    "kind": "test",
    "name": "describe193",
    "testId": 193,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe193",
    "access": null,
    "description": "LiveStreams.getSimulcastTarget",
    "lineNumber": 410,
    "testTargets": [
      "LiveStreams.getSimulcastTarget"
    ]
  },
  {
    "__docId__": 407,
    "kind": "test",
    "name": "it194",
    "testId": 194,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe193",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe193.it194",
    "access": null,
    "description": "makes a GET request to get a simulcast target for a live stream",
    "lineNumber": 412,
    "testTargets": [
      "LiveStreams.getSimulcastTarget"
    ]
  },
  {
    "__docId__": 408,
    "kind": "test",
    "name": "it195",
    "testId": 195,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe193",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe193.it195",
    "access": null,
    "description": "throws an error if a live stream ID is not given",
    "lineNumber": 433,
    "testTargets": [
      "LiveStreams.getSimulcastTarget"
    ]
  },
  {
    "__docId__": 409,
    "kind": "test",
    "name": "it196",
    "testId": 196,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe193",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe193.it196",
    "access": null,
    "description": "throws an error if a simulcast target id is not given",
    "lineNumber": 447,
    "testTargets": [
      "LiveStreams.createSimulcastTarget"
    ]
  },
  {
    "__docId__": 410,
    "kind": "test",
    "name": "describe197",
    "testId": 197,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe197",
    "access": null,
    "description": "LiveStreams.deleteSimulcastTarget",
    "lineNumber": 462,
    "testTargets": [
      "LiveStreams.deleteSimulcastTarget"
    ]
  },
  {
    "__docId__": 411,
    "kind": "test",
    "name": "it198",
    "testId": 198,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe197",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe197.it198",
    "access": null,
    "description": "makes a DELETE request to delete a simulcast target for a live stream",
    "lineNumber": 464,
    "testTargets": [
      "LiveStreams.deleteSimulcastTarget"
    ]
  },
  {
    "__docId__": 412,
    "kind": "test",
    "name": "it199",
    "testId": 199,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe197",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe197.it199",
    "access": null,
    "description": "throws an error if a live stream ID is not given",
    "lineNumber": 485,
    "testTargets": [
      "LiveStreams.deleteSimulcastTarget"
    ]
  },
  {
    "__docId__": 413,
    "kind": "test",
    "name": "it200",
    "testId": 200,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe159.describe197",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe159.describe197.it200",
    "access": null,
    "description": "throws an error if a simulcast target id is not given",
    "lineNumber": 499,
    "testTargets": [
      "LiveStreams.deleteSimulcastTarget"
    ]
  },
  {
    "__docId__": 414,
    "kind": "testFile",
    "name": "test/unit/video/resources/uploads.spec.js",
    "content": "const { expect } = require('chai');\nconst sinon = require('sinon');\nconst moxios = require('moxios');\nconst Uploads = require('../../../../src/video/resources/uploads');\n\n/** @test {Uploads} */\ndescribe('Unit::Uploads', () => {\n  const testApiKey = 'testApiKey';\n  const testSecret = 'testSecret';\n  const testUploads = new Uploads(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(testUploads.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(testUploads.http);\n  });\n\n  /** @test {Uploads.create} */\n  describe('Uploads.create', () => {\n    /** @test {Uploads.create} */\n    it('makes a POST request to create a new Upload', done => {\n      moxios.stubRequest('https://api.mux.com/video/v1/uploads', {\n        status: 201,\n        responseText: '{\"data\": {\"create\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testUploads\n        .create({\n          new_asset_settings: { playback_policy: 'public' },\n        })\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].create).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {Uploads.create} */\n    it('throws an error if no params are given', () =>\n      testUploads.create().catch(err => {\n        expect(err).to.exist;\n        expect(err.message).to.include('Params are required');\n      }));\n  });\n\n  /** @test {Uploads.get} */\n  describe('Uploads.get', () => {\n    /** @test {Uploads.get} */\n    it('makes a GET request to get an upload', done => {\n      moxios.stubRequest('https://api.mux.com/video/v1/uploads/testUpload', {\n        status: 200,\n        responseText: '{\"data\": {\"upload\": \"get\"}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testUploads.get('testUpload').then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].upload).to.equal('get');\n        done();\n      });\n    });\n\n    /** @test {Uploads.get} */\n    it('throws an error when an upload id is not given', () =>\n      testUploads\n        .get()\n        .then(res => {\n          expect(res).to.not.exist;\n        })\n        .catch(err => {\n          expect(err).to.exist;\n          expect(err.message).to.include('An upload ID is required');\n        }));\n  });\n\n  /** @test {Uploads.cancel} */\n  describe('Uploads.cancel', () => {\n    /** @test {Uploads.cancel} */\n    it('makes a PUT request to cancel an upload', done => {\n      moxios.stubRequest(\n        'https://api.mux.com/video/v1/uploads/testUpload/cancel',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"upload\": \"cancel\"}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      testUploads.cancel('testUpload').then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].upload).to.equal('cancel');\n        done();\n      });\n    });\n\n    /** @test {Uploads.del} */\n    it('throws an error when an upload id is not given', () =>\n      testUploads.cancel().catch(err => {\n        expect(err).to.exist;\n        expect(err.message).to.include('An upload ID is required');\n      }));\n  });\n});\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/test/unit/video/resources/uploads.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 415,
    "kind": "test",
    "name": "describe201",
    "testId": 201,
    "memberof": "test/unit/video/resources/uploads.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe201",
    "access": null,
    "description": "Unit::Uploads",
    "lineNumber": 7,
    "testTargets": [
      "Uploads"
    ]
  },
  {
    "__docId__": 416,
    "kind": "test",
    "name": "describe202",
    "testId": 202,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe201",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe201.describe202",
    "access": null,
    "description": "Uploads.create",
    "lineNumber": 21,
    "testTargets": [
      "Uploads.create"
    ]
  },
  {
    "__docId__": 417,
    "kind": "test",
    "name": "it203",
    "testId": 203,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe201.describe202",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe201.describe202.it203",
    "access": null,
    "description": "makes a POST request to create a new Upload",
    "lineNumber": 23,
    "testTargets": [
      "Uploads.create"
    ]
  },
  {
    "__docId__": 418,
    "kind": "test",
    "name": "it204",
    "testId": 204,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe201.describe202",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe201.describe202.it204",
    "access": null,
    "description": "throws an error if no params are given",
    "lineNumber": 43,
    "testTargets": [
      "Uploads.create"
    ]
  },
  {
    "__docId__": 419,
    "kind": "test",
    "name": "describe205",
    "testId": 205,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe201",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe201.describe205",
    "access": null,
    "description": "Uploads.get",
    "lineNumber": 51,
    "testTargets": [
      "Uploads.get"
    ]
  },
  {
    "__docId__": 420,
    "kind": "test",
    "name": "it206",
    "testId": 206,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe201.describe205",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe201.describe205.it206",
    "access": null,
    "description": "makes a GET request to get an upload",
    "lineNumber": 53,
    "testTargets": [
      "Uploads.get"
    ]
  },
  {
    "__docId__": 421,
    "kind": "test",
    "name": "it207",
    "testId": 207,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe201.describe205",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe201.describe205.it207",
    "access": null,
    "description": "throws an error when an upload id is not given",
    "lineNumber": 69,
    "testTargets": [
      "Uploads.get"
    ]
  },
  {
    "__docId__": 422,
    "kind": "test",
    "name": "describe208",
    "testId": 208,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe201",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe201.describe208",
    "access": null,
    "description": "Uploads.cancel",
    "lineNumber": 82,
    "testTargets": [
      "Uploads.cancel"
    ]
  },
  {
    "__docId__": 423,
    "kind": "test",
    "name": "it209",
    "testId": 209,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe201.describe208",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe201.describe208.it209",
    "access": null,
    "description": "makes a PUT request to cancel an upload",
    "lineNumber": 84,
    "testTargets": [
      "Uploads.cancel"
    ]
  },
  {
    "__docId__": 424,
    "kind": "test",
    "name": "it210",
    "testId": 210,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe201.describe208",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe201.describe208.it210",
    "access": null,
    "description": "throws an error when an upload id is not given",
    "lineNumber": 103,
    "testTargets": [
      "Uploads.del"
    ]
  },
  {
    "__docId__": 425,
    "kind": "testFile",
    "name": "test/unit/video/video.spec.js",
    "content": "const { expect } = require('chai');\nconst Video = require('../../../src/video/video');\nconst Assets = require('../../../src/video/resources/assets');\nconst LiveStreams = require('../../../src/video/resources/liveStreams');\nconst Uploads = require('../../../src/video/resources/uploads');\n\n/** @test {Video} */\ndescribe('Unit::Video', () => {\n  const testApiKey = 'testApiKey';\n  const testSecret = 'testSecret';\n\n  /** @test {Video} */\n  describe('Video', () => {\n    /** @test {Video} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new Video()).to.throw('API Access Token must be provided.');\n    });\n\n    /** @test {Video} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new Video('testKey')).to.throw(\n        'API secret key must be provided'\n      );\n    });\n\n    /** @test {Video} */\n    it('creates a new Video instance', () => {\n      const TestVideo = new Video(testApiKey, testSecret);\n      expect(() => new Video(testApiKey, testSecret)).to.not.throw();\n      expect(TestVideo.Assets).to.be.an.instanceof(Assets);\n      expect(TestVideo.LiveStreams).to.be.an.instanceof(LiveStreams);\n      expect(TestVideo.LiveStreams).to.be.an.instanceof(LiveStreams);\n      expect(TestVideo.Uploads).to.be.an.instanceof(Uploads);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/test/unit/video/video.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 426,
    "kind": "test",
    "name": "describe211",
    "testId": 211,
    "memberof": "test/unit/video/video.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/video/video.spec.js~describe211",
    "access": null,
    "description": "Unit::Video",
    "lineNumber": 8,
    "testTargets": [
      "Video"
    ]
  },
  {
    "__docId__": 427,
    "kind": "test",
    "name": "describe212",
    "testId": 212,
    "memberof": "test/unit/video/video.spec.js~describe211",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/video.spec.js~describe211.describe212",
    "access": null,
    "description": "Video",
    "lineNumber": 13,
    "testTargets": [
      "Video"
    ]
  },
  {
    "__docId__": 428,
    "kind": "test",
    "name": "it213",
    "testId": 213,
    "memberof": "test/unit/video/video.spec.js~describe211.describe212",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/video.spec.js~describe211.describe212.it213",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 15,
    "testTargets": [
      "Video"
    ]
  },
  {
    "__docId__": 429,
    "kind": "test",
    "name": "it214",
    "testId": 214,
    "memberof": "test/unit/video/video.spec.js~describe211.describe212",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/video.spec.js~describe211.describe212.it214",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 20,
    "testTargets": [
      "Video"
    ]
  },
  {
    "__docId__": 430,
    "kind": "test",
    "name": "it215",
    "testId": 215,
    "memberof": "test/unit/video/video.spec.js~describe211.describe212",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/video.spec.js~describe211.describe212.it215",
    "access": null,
    "description": "creates a new Video instance",
    "lineNumber": 27,
    "testTargets": [
      "Video"
    ]
  },
  {
    "__docId__": 431,
    "kind": "testFile",
    "name": "test/unit/webhooks/resources/verify_header.spec.js",
    "content": "const { expect } = require('chai');\nconst sinon = require('sinon');\nconst VerifyHeader = require('../../../../src/webhooks/resources/verify_header');\n\n/** @test {VerifyHeader} */\ndescribe('Unit::VerifyHeader', () => {\n  /** @test {VerifyHeader} */\n  describe('VerifyHeader', () => {\n    /** @test {VerifyHeader.parseHeader} */\n    describe('parseHeader with a known-hard coded header value', () => {\n      it('will correctly parse the header value to the known timestamp and signature', () => {\n        /*\n          This header value was generated from Mux's backend code with the following values:\n            * secret: 'SuperSecret123'\n            * body: \"{\\\"test\\\":\\\"body\\\"}\"\n            * time: 1565125718 (08/06/2019 @ 9:08pm UTC)\n        */\n        const header =\n          't=1565125718,v1=854ece4c22acef7c66b57d4e504153bc512595e8e9c772ece2a68150548c19a7';\n        const expectedSignature =\n          '854ece4c22acef7c66b57d4e504153bc512595e8e9c772ece2a68150548c19a7';\n        const parsed = VerifyHeader.parseHeader(header);\n        expect(parsed.timestamp).to.equal('1565125718');\n        expect(parsed.signatures.length).to.equal(1);\n        expect(parsed.signatures[0]).to.equal(expectedSignature);\n      });\n    });\n\n    /** @test {VerifyHeader.verify} */\n    describe('verify', () => {\n      let payload = '{\"test\":\"body\"}';\n      const secret = 'SuperSecret123';\n      const validTimeSec = 1565125718;\n      const validHeaderAtTheTime =\n        't=1565125718,v1=854ece4c22acef7c66b57d4e504153bc512595e8e9c772ece2a68150548c19a7';\n\n      /** @test {VerifyHeader.verify} */\n      describe('with a malformatted header value', () => {\n        /** @test {VerifyHeader.verify} */\n        it('will throw an unable to extract timestamp and signatures error', () => {\n          expect(() => {\n            VerifyHeader.verify(payload, 'somebadheadervalue', secret);\n          }).to.throw('Unable to extract timestamp and signatures from header');\n        });\n      });\n\n      /** @test {VerifyHeader.verify} */\n      describe('with a header value that has the wrong scheme', () => {\n        /** @test {VerifyHeader.verify} */\n        it('will throw a no signatures found with expected scheme error', () => {\n          expect(() => {\n            const header = 't=1565125718,v2=weiorwer';\n            VerifyHeader.verify(payload, header, secret);\n          }).to.throw('No signatures found with expected scheme');\n        });\n      });\n\n      /** @test {VerifyHeader.verify} */\n      describe('with a header value that is valid expect that it is outside the tolerated time range', () => {\n        /** @test {VerifyHeader.verify} */\n        it('will throw a timestamp outside the tolerance zone error', () => {\n          expect(() => {\n            VerifyHeader.verify(payload, validHeaderAtTheTime, secret);\n          }).to.throw('Timestamp outside the tolerance zone');\n        });\n      });\n\n      /** @test {VerifyHeader.verify} */\n      describe('with a header value that is actually valid', () => {\n        let clock;\n\n        beforeEach(() => {\n          clock = sinon.useFakeTimers(new Date(validTimeSec * 1000));\n        });\n\n        afterEach(() => clock.restore());\n\n        /** @test {VerifyHeader.verify} */\n        it('will return true when the payload is a string', () => {\n          const isVerified = VerifyHeader.verify(\n            payload,\n            validHeaderAtTheTime,\n            secret\n          );\n          expect(isVerified).to.be.true;\n        });\n\n        /** @test {VerifyHeader.verify} */\n        it('will return true when the payload is a buffer', () => {\n          payload = Buffer.from(payload);\n          const isVerified = VerifyHeader.verify(\n            payload,\n            validHeaderAtTheTime,\n            secret\n          );\n          expect(isVerified).to.be.true;\n        });\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/test/unit/webhooks/resources/verify_header.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 432,
    "kind": "test",
    "name": "describe216",
    "testId": 216,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe216",
    "access": null,
    "description": "Unit::VerifyHeader",
    "lineNumber": 6,
    "testTargets": [
      "VerifyHeader"
    ]
  },
  {
    "__docId__": 433,
    "kind": "test",
    "name": "describe217",
    "testId": 217,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe216",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe216.describe217",
    "access": null,
    "description": "VerifyHeader",
    "lineNumber": 8,
    "testTargets": [
      "VerifyHeader"
    ]
  },
  {
    "__docId__": 434,
    "kind": "test",
    "name": "describe218",
    "testId": 218,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe216.describe217",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe216.describe217.describe218",
    "access": null,
    "description": "parseHeader with a known-hard coded header value",
    "lineNumber": 10,
    "testTargets": [
      "VerifyHeader.parseHeader"
    ]
  },
  {
    "__docId__": 435,
    "kind": "test",
    "name": "it219",
    "testId": 219,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe216.describe217.describe218",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe216.describe217.describe218.it219",
    "access": null,
    "description": "will correctly parse the header value to the known timestamp and signature",
    "lineNumber": 11
  },
  {
    "__docId__": 436,
    "kind": "test",
    "name": "describe220",
    "testId": 220,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe216.describe217",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe216.describe217.describe220",
    "access": null,
    "description": "verify",
    "lineNumber": 30,
    "testTargets": [
      "VerifyHeader.verify"
    ]
  },
  {
    "__docId__": 437,
    "kind": "test",
    "name": "describe221",
    "testId": 221,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe216.describe217.describe220",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe216.describe217.describe220.describe221",
    "access": null,
    "description": "with a malformatted header value",
    "lineNumber": 38,
    "testTargets": [
      "VerifyHeader.verify"
    ]
  },
  {
    "__docId__": 438,
    "kind": "test",
    "name": "it222",
    "testId": 222,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe216.describe217.describe220.describe221",
    "testDepth": 4,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe216.describe217.describe220.describe221.it222",
    "access": null,
    "description": "will throw an unable to extract timestamp and signatures error",
    "lineNumber": 40,
    "testTargets": [
      "VerifyHeader.verify"
    ]
  },
  {
    "__docId__": 439,
    "kind": "test",
    "name": "describe223",
    "testId": 223,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe216.describe217.describe220",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe216.describe217.describe220.describe223",
    "access": null,
    "description": "with a header value that has the wrong scheme",
    "lineNumber": 48,
    "testTargets": [
      "VerifyHeader.verify"
    ]
  },
  {
    "__docId__": 440,
    "kind": "test",
    "name": "it224",
    "testId": 224,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe216.describe217.describe220.describe223",
    "testDepth": 4,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe216.describe217.describe220.describe223.it224",
    "access": null,
    "description": "will throw a no signatures found with expected scheme error",
    "lineNumber": 50,
    "testTargets": [
      "VerifyHeader.verify"
    ]
  },
  {
    "__docId__": 441,
    "kind": "test",
    "name": "describe225",
    "testId": 225,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe216.describe217.describe220",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe216.describe217.describe220.describe225",
    "access": null,
    "description": "with a header value that is valid expect that it is outside the tolerated time range",
    "lineNumber": 59,
    "testTargets": [
      "VerifyHeader.verify"
    ]
  },
  {
    "__docId__": 442,
    "kind": "test",
    "name": "it226",
    "testId": 226,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe216.describe217.describe220.describe225",
    "testDepth": 4,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe216.describe217.describe220.describe225.it226",
    "access": null,
    "description": "will throw a timestamp outside the tolerance zone error",
    "lineNumber": 61,
    "testTargets": [
      "VerifyHeader.verify"
    ]
  },
  {
    "__docId__": 443,
    "kind": "test",
    "name": "describe227",
    "testId": 227,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe216.describe217.describe220",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe216.describe217.describe220.describe227",
    "access": null,
    "description": "with a header value that is actually valid",
    "lineNumber": 69,
    "testTargets": [
      "VerifyHeader.verify"
    ]
  },
  {
    "__docId__": 444,
    "kind": "test",
    "name": "it228",
    "testId": 228,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe216.describe217.describe220.describe227",
    "testDepth": 4,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe216.describe217.describe220.describe227.it228",
    "access": null,
    "description": "will return true when the payload is a string",
    "lineNumber": 79,
    "testTargets": [
      "VerifyHeader.verify"
    ]
  },
  {
    "__docId__": 445,
    "kind": "test",
    "name": "it229",
    "testId": 229,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe216.describe217.describe220.describe227",
    "testDepth": 4,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe216.describe217.describe220.describe227.it229",
    "access": null,
    "description": "will return true when the payload is a buffer",
    "lineNumber": 89,
    "testTargets": [
      "VerifyHeader.verify"
    ]
  },
  {
    "__docId__": 446,
    "kind": "testFile",
    "name": "test/unit/webhooks/webhooks.spec.js",
    "content": "const { expect } = require('chai');\nconst sinon = require('sinon');\nconst Webhooks = require('../../../src/webhooks/webhooks');\n\n/** @test {Webhooks} */\ndescribe('Unit::Webhooks', () => {\n  /** @test {Webhooks.verifyHeader} */\n  describe('verifyHeader', () => {\n    const payload = '{\"test\":\"body\"}';\n    const secret = 'SuperSecret123';\n    const validTimeSec = 1565125718;\n    const validHeaderAtTheTime =\n      't=1565125718,v1=854ece4c22acef7c66b57d4e504153bc512595e8e9c772ece2a68150548c19a7';\n    let clock;\n\n    beforeEach(() => {\n      clock = sinon.useFakeTimers(new Date(validTimeSec * 1000));\n    });\n\n    afterEach(() => clock.restore());\n\n    /** @test {Webhooks.verifyHeader} */\n    it('returns true for a valid header', () => {\n      expect(Webhooks.verifyHeader(payload, validHeaderAtTheTime, secret)).to.be\n        .true;\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/travis/build/muxinc/mux-node-sdk/test/unit/webhooks/webhooks.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 447,
    "kind": "test",
    "name": "describe230",
    "testId": 230,
    "memberof": "test/unit/webhooks/webhooks.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/webhooks/webhooks.spec.js~describe230",
    "access": null,
    "description": "Unit::Webhooks",
    "lineNumber": 6,
    "testTargets": [
      "Webhooks"
    ]
  },
  {
    "__docId__": 448,
    "kind": "test",
    "name": "describe231",
    "testId": 231,
    "memberof": "test/unit/webhooks/webhooks.spec.js~describe230",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/webhooks/webhooks.spec.js~describe230.describe231",
    "access": null,
    "description": "verifyHeader",
    "lineNumber": 8,
    "testTargets": [
      "Webhooks.verifyHeader"
    ]
  },
  {
    "__docId__": 449,
    "kind": "test",
    "name": "it232",
    "testId": 232,
    "memberof": "test/unit/webhooks/webhooks.spec.js~describe230.describe231",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/webhooks/webhooks.spec.js~describe230.describe231.it232",
    "access": null,
    "description": "returns true for a valid header",
    "lineNumber": 23,
    "testTargets": [
      "Webhooks.verifyHeader"
    ]
  }
]